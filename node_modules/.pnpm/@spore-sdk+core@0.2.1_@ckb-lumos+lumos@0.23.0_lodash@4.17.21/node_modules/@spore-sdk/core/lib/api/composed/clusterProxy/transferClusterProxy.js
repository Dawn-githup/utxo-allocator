"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transferClusterProxy = void 0;
const lumos_1 = require("@ckb-lumos/lumos");
const helpers_1 = require("../../../helpers");
const config_1 = require("../../../config");
const cobuild_1 = require("../../../cobuild");
const getClusterProxy_1 = require("../../joints/clusterProxy/getClusterProxy");
const injectLiveClusterProxyCell_1 = require("../../joints/clusterProxy/injectLiveClusterProxyCell");
async function transferClusterProxy(props) {
    // Env
    const config = props.config ?? (0, config_1.getSporeConfig)();
    const indexer = new lumos_1.Indexer(config.ckbIndexerUrl, config.ckbNodeUrl);
    const useCapacityMarginAsFee = props.useCapacityMarginAsFee ?? true;
    // Check capacity margin related props
    if (!useCapacityMarginAsFee && !props.fromInfos) {
        throw new Error('When useCapacityMarginAsFee is enabled, fromInfos is also required');
    }
    if (useCapacityMarginAsFee && props.capacityMargin !== void 0) {
        throw new Error('When useCapacityMarginAsFee is enabled, cannot update capacityMargin of the cell');
    }
    // TransactionSkeleton
    let txSkeleton = lumos_1.helpers.TransactionSkeleton({
        cellProvider: indexer,
    });
    // Get target ClusterProxy cell
    const clusterProxyCell = await (0, getClusterProxy_1.getClusterProxyByOutPoint)(props.outPoint, config);
    const clusterProxyScript = (0, config_1.getSporeScript)(config, 'ClusterProxy', clusterProxyCell.cellOutput.type);
    // Inject live ClusterProxy cell to inputs/outputs of the Transaction
    const injectLiveClusterProxyCellResult = await (0, injectLiveClusterProxyCell_1.injectLiveClusterProxyCell)({
        txSkeleton,
        cell: clusterProxyCell,
        addOutput: true,
        updateOutput(cell) {
            cell.cellOutput.lock = props.toLock;
            if (props.updateOutput instanceof Function) {
                cell = props.updateOutput(cell);
            }
            return cell;
        },
        capacityMargin: props.capacityMargin,
        updateWitness: props.updateWitness,
        defaultWitness: props.defaultWitness,
        since: props.since,
        config,
    });
    txSkeleton = injectLiveClusterProxyCellResult.txSkeleton;
    // Generate TransferClusterProxy actions
    const actionResult = (0, cobuild_1.generateTransferClusterProxyAction)({
        txSkeleton,
        inputIndex: injectLiveClusterProxyCellResult.inputIndex,
        outputIndex: injectLiveClusterProxyCellResult.outputIndex,
    });
    if (!useCapacityMarginAsFee) {
        // Inject needed capacity from fromInfos and pay fee
        const injectCapacityAndPayFeeResult = await (0, helpers_1.injectCapacityAndPayFee)({
            txSkeleton,
            fromInfos: props.fromInfos,
            changeAddress: props.changeAddress,
            feeRate: props.feeRate,
            updateTxSkeletonAfterCollection(_txSkeleton) {
                // Inject CobuildProof
                if (clusterProxyScript.behaviors?.cobuild) {
                    const injectCobuildProofResult = (0, cobuild_1.injectCommonCobuildProof)({
                        txSkeleton: _txSkeleton,
                        actions: actionResult.actions,
                    });
                    _txSkeleton = injectCobuildProofResult.txSkeleton;
                }
                return _txSkeleton;
            },
            config,
        });
        txSkeleton = injectCapacityAndPayFeeResult.txSkeleton;
    }
    else {
        // Inject CobuildProof
        if (clusterProxyScript.behaviors?.cobuild) {
            const injectCobuildProofResult = (0, cobuild_1.injectCommonCobuildProof)({
                txSkeleton,
                actions: actionResult.actions,
            });
            txSkeleton = injectCobuildProofResult.txSkeleton;
        }
        // Pay fee by the spore cell's capacity margin
        txSkeleton = await (0, helpers_1.payFeeByOutput)({
            outputIndex: injectLiveClusterProxyCellResult.outputIndex,
            txSkeleton,
            config,
        });
    }
    return {
        txSkeleton,
        inputIndex: injectLiveClusterProxyCellResult.inputIndex,
        outputIndex: injectLiveClusterProxyCellResult.outputIndex,
    };
}
exports.transferClusterProxy = transferClusterProxy;
//# sourceMappingURL=transferClusterProxy.js.map