"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.injectLiveClusterAgentReference = void 0;
const helper_1 = require("@ckb-lumos/common-scripts/lib/helper");
const helpers_1 = require("../../../helpers");
const config_1 = require("../../../config");
const injectLiveClusterAgentCell_1 = require("./injectLiveClusterAgentCell");
async function injectLiveClusterAgentReference(props) {
    // Env
    const config = props.config ?? (0, config_1.getSporeConfig)();
    let txSkeleton = props.txSkeleton;
    // Get ClusterAgent cell
    const clusterAgentCell = props.cell;
    if (!clusterAgentCell.outPoint) {
        throw new Error(`Cannot inject ClusterAgent as reference because target cell has no OutPoint`);
    }
    // Inject reference cell or LockProxy
    let injectLiveClusterAgentResult;
    const referenceResult = await (0, helpers_1.referenceCellOrLockProxy)({
        txSkeleton,
        cell: clusterAgentCell,
        inputLocks: props.inputLocks,
        outputLocks: props.outputLocks,
        async referenceCell(tx) {
            injectLiveClusterAgentResult = await (0, injectLiveClusterAgentCell_1.injectLiveClusterAgentCell)({
                txSkeleton: tx,
                cell: clusterAgentCell,
                addOutput: true,
                updateOutput: props.updateOutput,
                updateWitness: props.updateWitness,
                capacityMargin: props.capacityMargin,
                defaultWitness: props.defaultWitness,
                since: props.since,
                config,
            });
            return injectLiveClusterAgentResult.txSkeleton;
        },
        referenceLockProxy(tx) {
            const cellType = clusterAgentCell.cellOutput.type;
            const clusterAgentScript = (0, config_1.getSporeScript)(config, 'ClusterAgent', cellType);
            if (!clusterAgentScript.behaviors?.lockProxy) {
                throw new Error('Cannot reference ClusterAgent because target cell does not supported lockProxy');
            }
            // Add ClusterAgent required cellDeps
            tx = (0, helper_1.addCellDep)(tx, clusterAgentScript.cellDep);
            return tx;
        },
    });
    txSkeleton = referenceResult.txSkeleton;
    return {
        txSkeleton,
        referenceType: referenceResult.referencedCell ? 'cell' : 'lockProxy',
        clusterAgent: referenceResult.referencedCell && injectLiveClusterAgentResult !== void 0
            ? {
                inputIndex: injectLiveClusterAgentResult.inputIndex,
                outputIndex: injectLiveClusterAgentResult.outputIndex,
            }
            : void 0,
    };
}
exports.injectLiveClusterAgentReference = injectLiveClusterAgentReference;
//# sourceMappingURL=injectLiveClusterAgentReference.js.map