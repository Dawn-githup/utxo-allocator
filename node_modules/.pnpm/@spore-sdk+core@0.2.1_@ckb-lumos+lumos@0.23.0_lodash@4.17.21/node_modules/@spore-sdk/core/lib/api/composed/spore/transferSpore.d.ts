import { Address, OutPoint, Script } from '@ckb-lumos/base';
import { BIish } from '@ckb-lumos/bi';
import { BI, Cell, helpers, HexString, PackedSince } from '@ckb-lumos/lumos';
import { FromInfo } from '@ckb-lumos/lumos/common-scripts';
import { SporeConfig } from '../../../config';
export declare function transferSpore(props: {
    outPoint: OutPoint;
    toLock: Script;
    fromInfos?: FromInfo[];
    changeAddress?: Address;
    useCapacityMarginAsFee?: boolean;
    updateOutput?: (cell: Cell) => Cell;
    capacityMargin?: BIish | ((cell: Cell, margin: BI) => BIish);
    updateWitness?: HexString | ((witness: HexString) => HexString);
    defaultWitness?: HexString;
    since?: PackedSince;
    feeRate?: BIish | undefined;
    config?: SporeConfig;
}): Promise<{
    txSkeleton: helpers.TransactionSkeletonType;
    inputIndex: number;
    outputIndex: number;
}>;
export declare function transferMultipleSpore(props: {
    outPoints: OutPoint[];
    toLock: Script;
    fromInfos?: FromInfo[];
    changeAddress?: Address;
    useCapacityMarginAsFee?: boolean;
    updateOutput?: (cell: Cell) => Cell;
    capacityMargin?: BIish | ((cell: Cell, margin: BI) => BIish);
    updateWitness?: HexString | ((witness: HexString) => HexString);
    defaultWitness?: HexString;
    since?: PackedSince;
    feeRate?: BIish | undefined;
    config?: SporeConfig;
}): Promise<{
    txSkeleton: helpers.TransactionSkeletonType;
    inputIndecies: number[];
    outputIndecies: number[];
}>;
