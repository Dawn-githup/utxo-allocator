"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMutant = void 0;
const lumos_1 = require("@ckb-lumos/lumos");
const config_1 = require("../../../config");
const helpers_1 = require("../../../helpers");
const __1 = require("../..");
async function createMutant(props) {
    // Env
    const config = props.config ?? (0, config_1.getSporeConfig)();
    const indexer = new lumos_1.Indexer(config.ckbIndexerUrl, config.ckbNodeUrl);
    const capacityMargin = lumos_1.BI.from(props.capacityMargin ?? 1_0000_0000);
    const maxTransactionSize = props.maxTransactionSize ?? config.maxTransactionSize ?? false;
    // TransactionSkeleton
    let txSkeleton = lumos_1.helpers.TransactionSkeleton({
        cellProvider: indexer,
    });
    // Create and inject a new Mutant cell
    const injectNewMutantResult = (0, __1.injectNewMutantOutput)({
        txSkeleton,
        data: props.data,
        toLock: props.toLock,
        minPayment: props.minPayment,
        updateOutput: props.updateOutput,
        capacityMargin,
        config,
    });
    txSkeleton = injectNewMutantResult.txSkeleton;
    // Inject needed capacity and pay fee
    const injectCapacityAndPayFeeResult = await (0, helpers_1.injectCapacityAndPayFee)({
        txSkeleton,
        fromInfos: props.fromInfos,
        changeAddress: props.changeAddress,
        feeRate: props.feeRate,
        config,
    });
    txSkeleton = injectCapacityAndPayFeeResult.txSkeleton;
    // Generate and inject ID for the new Mutant
    txSkeleton = (0, __1.injectNewMutantIds)({
        outputIndices: [injectNewMutantResult.outputIndex],
        txSkeleton,
        config,
    });
    // Make sure the tx size is in range (if needed)
    if (typeof maxTransactionSize === 'number') {
        (0, helpers_1.assertTransactionSkeletonSize)(txSkeleton, void 0, maxTransactionSize);
    }
    return {
        txSkeleton,
        outputIndex: injectNewMutantResult.outputIndex,
    };
}
exports.createMutant = createMutant;
//# sourceMappingURL=createMutant.js.map