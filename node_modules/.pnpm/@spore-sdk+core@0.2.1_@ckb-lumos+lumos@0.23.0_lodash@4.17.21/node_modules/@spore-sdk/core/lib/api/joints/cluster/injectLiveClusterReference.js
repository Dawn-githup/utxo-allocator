"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.injectLiveClusterReference = void 0;
const helper_1 = require("@ckb-lumos/common-scripts/lib/helper");
const config_1 = require("../../../config");
const helpers_1 = require("../../../helpers");
const injectLiveClusterCell_1 = require("./injectLiveClusterCell");
async function injectLiveClusterReference(props) {
    // Env
    const config = props.config ?? (0, config_1.getSporeConfig)();
    const clusterCell = props.cell;
    // TransactionSkeleton
    let txSkeleton = props.txSkeleton;
    // Injection status & hooks
    let injectLiveClusterResult;
    // Inject referenced cluster directly or inject LockProxy only
    const referenceResult = await (0, helpers_1.referenceCellOrLockProxy)({
        txSkeleton,
        cell: clusterCell,
        inputLocks: props.inputLocks,
        outputLocks: props.outputLocks,
        async referenceCell(tx) {
            injectLiveClusterResult = await (0, injectLiveClusterCell_1.injectLiveClusterCell)({
                txSkeleton: tx,
                cell: clusterCell,
                addOutput: true,
                updateOutput: props.updateOutput,
                updateWitness: props.updateWitness,
                capacityMargin: props.capacityMargin,
                defaultWitness: props.defaultWitness,
                since: props.since,
                config,
            });
            return injectLiveClusterResult.txSkeleton;
        },
        async referenceLockProxy(tx) {
            const clusterType = clusterCell.cellOutput.type;
            const clusterScript = (0, config_1.getSporeScript)(config, 'Cluster', clusterType);
            if (!clusterScript.behaviors?.lockProxy) {
                throw new Error('Cannot reference Cluster because target Cluster does not supported lockProxy');
            }
            tx = (0, helper_1.addCellDep)(tx, clusterScript.cellDep);
            return tx;
        },
    });
    txSkeleton = referenceResult.txSkeleton;
    return {
        txSkeleton,
        referenceType: referenceResult.referencedCell ? 'cell' : 'lockProxy',
        cluster: referenceResult.referencedCell && injectLiveClusterResult !== void 0
            ? {
                inputIndex: injectLiveClusterResult.inputIndex,
                outputIndex: injectLiveClusterResult.outputIndex,
            }
            : void 0,
    };
}
exports.injectLiveClusterReference = injectLiveClusterReference;
//# sourceMappingURL=injectLiveClusterReference.js.map