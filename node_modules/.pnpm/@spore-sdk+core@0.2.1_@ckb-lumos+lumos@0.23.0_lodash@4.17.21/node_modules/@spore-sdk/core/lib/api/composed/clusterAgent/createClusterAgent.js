"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createClusterAgent = void 0;
const lumos_1 = require("@ckb-lumos/lumos");
const helpers_1 = require("../../../helpers");
const config_1 = require("../../../config");
const cobuild_1 = require("../../../cobuild");
const __1 = require("../..");
const codec_1 = require("../../../codec");
async function createClusterAgent(props) {
    // Env
    const config = props.config ?? (0, config_1.getSporeConfig)();
    const indexer = new lumos_1.Indexer(config.ckbIndexerUrl, config.ckbNodeUrl);
    const capacityMargin = lumos_1.BI.from(props.capacityMargin ?? 1_0000_0000);
    // TransactionSkeleton
    let txSkeleton = lumos_1.helpers.TransactionSkeleton({
        cellProvider: indexer,
    });
    // Get referenced Cluster
    const clusterProxyCell = await (0, __1.getClusterProxyByOutPoint)(props.clusterProxyOutPoint, config);
    // Create and inject a new ClusterProxy cell,
    // also inject the referenced Cluster or its LockProxy to the transaction
    const injectNewClusterAgentOutputResult = await (0, __1.injectNewClusterAgentOutput)({
        txSkeleton,
        clusterProxyCell,
        referenceType: props.referenceType,
        paymentAmount: props.paymentAmount,
        toLock: props.toLock,
        fromInfos: props.fromInfos,
        changeAddress: props.changeAddress,
        updateOutput: props.updateOutput,
        clusterProxy: props.clusterProxy,
        capacityMargin,
        config,
    });
    txSkeleton = injectNewClusterAgentOutputResult.txSkeleton;
    // Inject needed capacity and pay fee
    const injectCapacityAndPayFeeResult = await (0, helpers_1.injectCapacityAndPayFee)({
        txSkeleton,
        fromInfos: props.fromInfos,
        changeAddress: props.changeAddress,
        feeRate: props.feeRate,
        updateTxSkeletonAfterCollection(_txSkeleton) {
            // Inject CobuildProof
            const clusterAgentCell = txSkeleton.get('outputs').get(injectNewClusterAgentOutputResult.outputIndex);
            const clusterAgentScript = (0, config_1.getSporeScript)(config, 'ClusterAgent', clusterAgentCell.cellOutput.type);
            if (clusterAgentScript.behaviors?.cobuild) {
                const actionResult = (0, cobuild_1.generateCreateClusterAgentAction)({
                    txSkeleton: _txSkeleton,
                    clusterProxyId: (0, codec_1.unpackToRawClusterProxyArgs)(clusterProxyCell.cellOutput.type.args).id,
                    outputIndex: injectNewClusterAgentOutputResult.outputIndex,
                    reference: injectNewClusterAgentOutputResult.reference,
                });
                const injectCobuildProofResult = (0, cobuild_1.injectCommonCobuildProof)({
                    txSkeleton: _txSkeleton,
                    actions: actionResult.actions,
                });
                _txSkeleton = injectCobuildProofResult.txSkeleton;
            }
            return _txSkeleton;
        },
        config,
    });
    txSkeleton = injectCapacityAndPayFeeResult.txSkeleton;
    // TODO: validate the referenced ClusterProxy/Payment
    return {
        txSkeleton,
        outputIndex: injectNewClusterAgentOutputResult.outputIndex,
        reference: injectNewClusterAgentOutputResult.reference,
    };
}
exports.createClusterAgent = createClusterAgent;
//# sourceMappingURL=createClusterAgent.js.map