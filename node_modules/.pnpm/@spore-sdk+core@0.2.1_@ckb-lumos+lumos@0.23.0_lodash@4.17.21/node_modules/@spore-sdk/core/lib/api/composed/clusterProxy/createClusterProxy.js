"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createClusterProxy = void 0;
const lumos_1 = require("@ckb-lumos/lumos");
const helpers_1 = require("../../../helpers");
const config_1 = require("../../../config");
const cobuild_1 = require("../../../cobuild");
const __1 = require("../..");
async function createClusterProxy(props) {
    // Env
    const config = props.config ?? (0, config_1.getSporeConfig)();
    const indexer = new lumos_1.Indexer(config.ckbIndexerUrl, config.ckbNodeUrl);
    const capacityMargin = lumos_1.BI.from(props.capacityMargin ?? 1_0000_0000);
    // TransactionSkeleton
    let txSkeleton = lumos_1.helpers.TransactionSkeleton({
        cellProvider: indexer,
    });
    // Get referenced Cluster
    const clusterCell = await (0, __1.getClusterByOutPoint)(props.clusterOutPoint, config);
    // Create and inject a new ClusterProxy cell,
    // also inject the referenced Cluster or its LockProxy to the transaction
    const injectNewClusterProxyResult = await (0, __1.injectNewClusterProxyOutput)({
        txSkeleton,
        clusterCell,
        toLock: props.toLock,
        fromInfos: props.fromInfos,
        minPayment: props.minPayment,
        changeAddress: props.changeAddress,
        updateOutput: props.updateOutput,
        cluster: props.cluster,
        capacityMargin,
        config,
    });
    txSkeleton = injectNewClusterProxyResult.txSkeleton;
    // Inject needed capacity and pay fee
    const injectCapacityAndPayFeeResult = await (0, helpers_1.injectCapacityAndPayFee)({
        txSkeleton,
        fromInfos: props.fromInfos,
        changeAddress: props.changeAddress,
        feeRate: props.feeRate,
        updateTxSkeletonAfterCollection(_txSkeleton) {
            // Generate and inject ID for the new ClusterProxy
            _txSkeleton = (0, __1.injectNewClusterProxyIds)({
                outputIndices: [injectNewClusterProxyResult.outputIndex],
                txSkeleton: _txSkeleton,
                config,
            });
            // Inject CobuildProof
            const clusterProxyCell = txSkeleton.get('outputs').get(injectNewClusterProxyResult.outputIndex);
            const clusterProxyScript = (0, config_1.getSporeScript)(config, 'ClusterProxy', clusterProxyCell.cellOutput.type);
            if (clusterProxyScript.behaviors?.cobuild) {
                const actionResult = (0, cobuild_1.generateCreateClusterProxyAction)({
                    txSkeleton: _txSkeleton,
                    outputIndex: injectNewClusterProxyResult.outputIndex,
                    reference: injectNewClusterProxyResult.reference,
                });
                const injectCobuildProofResult = (0, cobuild_1.injectCommonCobuildProof)({
                    txSkeleton: _txSkeleton,
                    actions: actionResult.actions,
                });
                _txSkeleton = injectCobuildProofResult.txSkeleton;
            }
            return _txSkeleton;
        },
        config,
    });
    txSkeleton = injectCapacityAndPayFeeResult.txSkeleton;
    // TODO: Validate the referenced Cluster/LockProxy
    return {
        txSkeleton,
        outputIndex: injectNewClusterProxyResult.outputIndex,
        reference: injectNewClusterProxyResult.reference,
    };
}
exports.createClusterProxy = createClusterProxy;
//# sourceMappingURL=createClusterProxy.js.map