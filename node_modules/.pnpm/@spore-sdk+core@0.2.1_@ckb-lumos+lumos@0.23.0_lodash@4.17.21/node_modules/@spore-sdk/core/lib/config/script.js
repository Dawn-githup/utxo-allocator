"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSporeScriptSupported = exports.isSporeScriptCategorySupported = exports.getSporeScriptByTags = exports.getSporeScriptByScriptId = exports.getLatestSporeScript = exports.getSporeScript = exports.getSporeScriptCategory = void 0;
const cache_1 = require("./cache");
/**
 * Get a specific SporeScriptCategory from SporeConfig by "scriptName".
 * Throws an error if the script doesn't exist.
 */
function getSporeScriptCategory(config, scriptName) {
    const category = config.scripts[scriptName];
    if (!category) {
        throw new Error(`"${scriptName}" script is not defined in the SporeConfig`);
    }
    return category;
}
exports.getSporeScriptCategory = getSporeScriptCategory;
function getSporeScript(config, scriptName, extraArg) {
    if (extraArg && typeof extraArg === 'object' && 'codeHash' in extraArg && 'hashType' in extraArg) {
        return getSporeScriptByScriptId(config, scriptName, extraArg);
    }
    if (extraArg && Array.isArray(extraArg)) {
        return getSporeScriptByTags(config, scriptName, extraArg);
    }
    if (config.defaultTags) {
        return getSporeScriptByTags(config, scriptName, config.defaultTags);
    }
    return getLatestSporeScript(config, scriptName);
}
exports.getSporeScript = getSporeScript;
/**
 * Get a specific SporeScript from SporeConfig by "scriptName".
 * Throws an error if the script doesn't exist.
 */
function getLatestSporeScript(config, scriptName) {
    const scriptCategory = config.scripts[scriptName];
    if (!scriptCategory || !scriptCategory.versions.length) {
        throw new Error(`"${scriptName}" script is not defined in the SporeConfig`);
    }
    return scriptCategory.versions[0];
}
exports.getLatestSporeScript = getLatestSporeScript;
/**
 * Get a specific SporeScript from SporeConfig by "scriptName" and "scriptId".
 * Throws an error if the script doesn't exist.
 */
function getSporeScriptByScriptId(config, scriptName, scriptId) {
    const scriptCategory = config.scripts[scriptName];
    if (!scriptCategory || !scriptCategory.versions.length) {
        throw new Error(`"${scriptName}" script is not defined in the SporeConfig`);
    }
    const cache = (0, cache_1.getSporeConfigCache)(config);
    const script = (0, cache_1.getSporeCacheScriptByCodeHash)(cache, scriptId.codeHash, scriptName);
    if (!script) {
        throw new Error(`Specific "${scriptName}" script is not defined in the SporeConfig, codeHash: ${scriptId.codeHash}`);
    }
    return script;
}
exports.getSporeScriptByScriptId = getSporeScriptByScriptId;
/**
 * Get a specific SporeScript from SporeConfig by "scriptName" and "scriptId".
 * Throws an error if the script doesn't exist.
 */
function getSporeScriptByTags(config, scriptName, tags) {
    const scriptCategory = config.scripts[scriptName];
    if (!scriptCategory || !scriptCategory.versions.length) {
        throw new Error(`"${scriptName}" script is not defined in the SporeConfig`);
    }
    const cache = (0, cache_1.getSporeConfigCache)(config);
    const scripts = (0, cache_1.getSporeCacheScriptsByTags)(cache, scriptName, tags);
    if (!scripts || !scripts.length) {
        throw new Error(`Specific tags of the "${scriptName}" script is not defined in the SporeConfig: [${tags.join(', ')}]`);
    }
    // Returns the latest version of the script (the first one in the list)
    return scripts[0];
}
exports.getSporeScriptByTags = getSporeScriptByTags;
/**
 * Returns a boolean indicating weather if the target ScriptName exists in the SporeConfig.
 */
function isSporeScriptCategorySupported(config, scriptName) {
    return config.scripts[scriptName] !== void 0;
}
exports.isSporeScriptCategorySupported = isSporeScriptCategorySupported;
/**
 * Returns a boolean indicating weather if the target ScriptId exists in the SporeConfig.
 * If "scriptName" is passed, it also checks whether the name of the target script matches.
 */
function isSporeScriptSupported(config, scriptId, scriptName) {
    const cache = (0, cache_1.getSporeConfigCache)(config);
    const script = (0, cache_1.getSporeCacheScriptByCodeHash)(cache, scriptId.codeHash, scriptName);
    return script !== void 0;
}
exports.isSporeScriptSupported = isSporeScriptSupported;
//# sourceMappingURL=script.js.map