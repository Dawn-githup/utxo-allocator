export interface EncodableContentType {
    type: string;
    subtype: string;
    parameters?: Record<string, any>;
}
export interface DecodedContentType {
    type: string;
    subtype: string;
    mediaType: string;
    parameters: Record<string, string | string[]>;
}
/**
 * Check if the target ContentType's format is valid.
 * - A typical MIME example: "image/jpeg".
 * - A more complex example: "image/svg+xml;q=0.9,/;q=0.8".
 */
export declare function isContentTypeValid(contentType: string): boolean;
/**
 * Convert ContentType object to string.
 *
 * @example
 * encodeContentType({
 *   type: 'image',
 *   subtype: 'svg+xml',
 *   parameters: {
 *     a: 1,
 *     b: 2,
 *   },
 * })
 * // image/svg+xml;a=1;b=2
 */
export declare function encodeContentType(encodable: EncodableContentType): string;
/**
 * Convert ContentType from string to object.
 *
 * @example
 * decodeContentType('image/svg+xml;a=1;b=2')
 * // {
 * //  type: 'image',
 * //  subtype: 'svg+xml',
 * //  mediaType: 'image/svg+xml',
 * //  parameters: { a: '1', b: '2' },
 * // }
 */
export declare function decodeContentType(contentType: string): DecodedContentType;
/**
 * Update the parameters of a content type string.
 * Note the function may change the order of the provided content type.
 *
 * @example
 * setContentTypeParameters('image/jpeg;a=1;b=2', { a: '3' });
 * // image/jpeg;a=3;b=2
 */
export declare function setContentTypeParameters(contentType: string, parameters: Record<string, any>): string;
/**
 * Validate and convert parameters['mutant'] of ContentType to acceptable format.
 */
export declare function encodeMutantParameter(key: string, value: any[]): [string, string[]];
