import { helpers } from '@ckb-lumos/lumos';
import { BytesLike, UnpackResult } from '@ckb-lumos/codec';
import { ActionVec } from '../codec/buildingPacket';
export declare function getWitnessType(witness?: BytesLike): string;
export declare function unpackWitness(witness?: BytesLike): {
    type: "SighashAll";
    value: Partial<Pick<{
        seal: string;
        message: Partial<Pick<{
            actions: (Partial<Pick<{
                scriptInfoHash: string;
                scriptHash: string;
                data: string;
            }, never>> & Pick<{
                scriptInfoHash: string;
                scriptHash: string;
                data: string;
            }, "data" | "scriptInfoHash" | "scriptHash">)[];
        }, never>> & Pick<{
            actions: (Partial<Pick<{
                scriptInfoHash: string;
                scriptHash: string;
                data: string;
            }, never>> & Pick<{
                scriptInfoHash: string;
                scriptHash: string;
                data: string;
            }, "data" | "scriptInfoHash" | "scriptHash">)[];
        }, "actions">;
    }, never>> & Pick<{
        seal: string;
        message: Partial<Pick<{
            actions: (Partial<Pick<{
                scriptInfoHash: string;
                scriptHash: string;
                data: string;
            }, never>> & Pick<{
                scriptInfoHash: string;
                scriptHash: string;
                data: string;
            }, "data" | "scriptInfoHash" | "scriptHash">)[];
        }, never>> & Pick<{
            actions: (Partial<Pick<{
                scriptInfoHash: string;
                scriptHash: string;
                data: string;
            }, never>> & Pick<{
                scriptInfoHash: string;
                scriptHash: string;
                data: string;
            }, "data" | "scriptInfoHash" | "scriptHash">)[];
        }, "actions">;
    }, "message" | "seal">;
} | {
    type: "SighashAllOnly";
    value: Partial<Pick<{
        seal: string;
    }, never>> & Pick<{
        seal: string;
    }, "seal">;
} | {
    type: "Otx";
    value: Partial<Pick<{}, never>> & Pick<{}, never>;
} | {
    type: "OtxStart";
    value: Partial<Pick<{}, never>> & Pick<{}, never>;
} | {
    type: string;
    value: {
        lock?: string | undefined;
        inputType?: string | undefined;
        outputType?: string | undefined;
    };
};
export declare function assembleCobuildWitnessLayout(actions: UnpackResult<typeof ActionVec>): string;
export declare function injectCommonCobuildProof(props: {
    txSkeleton: helpers.TransactionSkeletonType;
    actions: UnpackResult<typeof ActionVec>;
}): {
    txSkeleton: helpers.TransactionSkeletonType;
    witnessIndex: number;
};
