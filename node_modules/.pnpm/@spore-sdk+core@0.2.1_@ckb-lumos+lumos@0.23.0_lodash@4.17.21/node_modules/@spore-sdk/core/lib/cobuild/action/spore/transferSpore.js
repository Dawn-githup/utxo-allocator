"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateTransferSporeBuildingPacket = exports.generateTransferSporeAction = exports.assembleTransferSporeAction = void 0;
const lumos_1 = require("@ckb-lumos/lumos");
const codec_1 = require("@ckb-lumos/codec");
const sporeAction_1 = require("../../codec/sporeAction");
const buildingPacket_1 = require("../../codec/buildingPacket");
const buildingPacket_2 = require("../../base/buildingPacket");
const sporeScriptInfo_1 = require("../../base/sporeScriptInfo");
function assembleTransferSporeAction(sporeInput, sporeOutput) {
    const actions = [];
    const scriptInfos = [];
    const sporeType = sporeOutput.cellOutput.type;
    const sporeTypeHash = lumos_1.utils.computeScriptHash(sporeType);
    const scriptInfo = (0, sporeScriptInfo_1.createSporeScriptInfoFromTemplate)({
        scriptHash: sporeTypeHash,
    });
    scriptInfos.push(scriptInfo);
    const actionData = sporeAction_1.SporeAction.pack({
        type: 'TransferSpore',
        value: {
            sporeId: sporeType.args,
            from: {
                type: 'Script',
                value: sporeInput.cellOutput.lock,
            },
            to: {
                type: 'Script',
                value: sporeOutput.cellOutput.lock,
            },
        },
    });
    actions.push({
        scriptInfoHash: lumos_1.utils.ckbHash(buildingPacket_1.ScriptInfo.pack(scriptInfo)),
        scriptHash: sporeTypeHash,
        data: codec_1.bytes.hexify(actionData),
    });
    return {
        actions,
        scriptInfos,
    };
}
exports.assembleTransferSporeAction = assembleTransferSporeAction;
function generateTransferSporeAction(props) {
    let txSkeleton = props.txSkeleton;
    const sporeInput = txSkeleton.get('inputs').get(props.inputIndex);
    const sporeOutput = txSkeleton.get('outputs').get(props.outputIndex);
    return assembleTransferSporeAction(sporeInput, sporeOutput);
}
exports.generateTransferSporeAction = generateTransferSporeAction;
function generateTransferSporeBuildingPacket(props) {
    let txSkeleton = props.txSkeleton;
    const action = generateTransferSporeAction(props);
    return (0, buildingPacket_2.createRawBuildingPacket)({
        txSkeleton,
        actions: action.actions,
        scriptInfos: action.scriptInfos,
        changeOutput: props.useCapacityMarginAsFee ? props.outputIndex : txSkeleton.get('outputs').size - 1,
    });
}
exports.generateTransferSporeBuildingPacket = generateTransferSporeBuildingPacket;
//# sourceMappingURL=transferSpore.js.map