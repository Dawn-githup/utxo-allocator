import { Cell, helpers } from '@ckb-lumos/lumos';
import { UnpackResult } from '@ckb-lumos/codec';
import { Action, ScriptInfo } from '../../codec/buildingPacket';
export declare function assembleTransferClusterAction(clusterInput: Cell | undefined, clusterOutput: Cell | undefined): {
    actions: UnpackResult<typeof Action>[];
    scriptInfos: UnpackResult<typeof ScriptInfo>[];
};
export declare function generateTransferClusterAction(props: {
    txSkeleton: helpers.TransactionSkeletonType;
    inputIndex: number;
    outputIndex: number;
}): {
    actions: UnpackResult<typeof Action>[];
    scriptInfos: UnpackResult<typeof ScriptInfo>[];
};
export declare function generateTransferClusterBuildingPacket(props: {
    txSkeleton: helpers.TransactionSkeletonType;
    inputIndex: number;
    outputIndex: number;
    useCapacityMarginAsFee: boolean;
}): {
    type: "BuildingPacketV1";
    value: Partial<Pick<{
        message: Partial<Pick<{
            actions: (Partial<Pick<{
                scriptInfoHash: string;
                scriptHash: string;
                data: string;
            }, never>> & Pick<{
                scriptInfoHash: string;
                scriptHash: string;
                data: string;
            }, "data" | "scriptInfoHash" | "scriptHash">)[];
        }, never>> & Pick<{
            actions: (Partial<Pick<{
                scriptInfoHash: string;
                scriptHash: string;
                data: string;
            }, never>> & Pick<{
                scriptInfoHash: string;
                scriptHash: string;
                data: string;
            }, "data" | "scriptInfoHash" | "scriptHash">)[];
        }, "actions">;
        payload: Partial<Pick<{
            version: string;
            cellDeps: (Partial<Pick<{
                outPoint: Partial<Pick<{
                    txHash: string;
                    index: string;
                }, never>> & Pick<{
                    txHash: string;
                    index: string;
                }, "index" | "txHash">;
                depType: import("@ckb-lumos/lumos").DepType;
            }, never>> & Pick<{
                outPoint: Partial<Pick<{
                    txHash: string;
                    index: string;
                }, never>> & Pick<{
                    txHash: string;
                    index: string;
                }, "index" | "txHash">;
                depType: import("@ckb-lumos/lumos").DepType;
            }, "outPoint" | "depType">)[];
            headerDeps: string[];
            inputs: (Partial<Pick<{
                since: string;
                previousOutput: Partial<Pick<{
                    txHash: string;
                    index: string;
                }, never>> & Pick<{
                    txHash: string;
                    index: string;
                }, "index" | "txHash">;
            }, never>> & Pick<{
                since: string;
                previousOutput: Partial<Pick<{
                    txHash: string;
                    index: string;
                }, never>> & Pick<{
                    txHash: string;
                    index: string;
                }, "index" | "txHash">;
            }, "since" | "previousOutput">)[];
            outputs: (Partial<Pick<{
                capacity: string;
                lock: Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">;
                type: (Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">) | undefined;
            }, "type">> & Pick<{
                capacity: string;
                lock: Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">;
                type: (Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">) | undefined;
            }, "lock" | "capacity">)[];
            outputsData: string[];
        }, never>> & Pick<{
            version: string;
            cellDeps: (Partial<Pick<{
                outPoint: Partial<Pick<{
                    txHash: string;
                    index: string;
                }, never>> & Pick<{
                    txHash: string;
                    index: string;
                }, "index" | "txHash">;
                depType: import("@ckb-lumos/lumos").DepType;
            }, never>> & Pick<{
                outPoint: Partial<Pick<{
                    txHash: string;
                    index: string;
                }, never>> & Pick<{
                    txHash: string;
                    index: string;
                }, "index" | "txHash">;
                depType: import("@ckb-lumos/lumos").DepType;
            }, "outPoint" | "depType">)[];
            headerDeps: string[];
            inputs: (Partial<Pick<{
                since: string;
                previousOutput: Partial<Pick<{
                    txHash: string;
                    index: string;
                }, never>> & Pick<{
                    txHash: string;
                    index: string;
                }, "index" | "txHash">;
            }, never>> & Pick<{
                since: string;
                previousOutput: Partial<Pick<{
                    txHash: string;
                    index: string;
                }, never>> & Pick<{
                    txHash: string;
                    index: string;
                }, "index" | "txHash">;
            }, "since" | "previousOutput">)[];
            outputs: (Partial<Pick<{
                capacity: string;
                lock: Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">;
                type: (Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">) | undefined;
            }, "type">> & Pick<{
                capacity: string;
                lock: Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">;
                type: (Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">) | undefined;
            }, "lock" | "capacity">)[];
            outputsData: string[];
        }, "cellDeps" | "headerDeps" | "inputs" | "outputs" | "version" | "outputsData"> & {
            witnesses: string[];
        };
        resolvedInputs: Partial<Pick<{
            outputs: (Partial<Pick<{
                capacity: string;
                lock: Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">;
                type: (Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">) | undefined;
            }, "type">> & Pick<{
                capacity: string;
                lock: Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">;
                type: (Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">) | undefined;
            }, "lock" | "capacity">)[];
            outputsData: string[];
        }, never>> & Pick<{
            outputs: (Partial<Pick<{
                capacity: string;
                lock: Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">;
                type: (Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">) | undefined;
            }, "type">> & Pick<{
                capacity: string;
                lock: Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">;
                type: (Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">) | undefined;
            }, "lock" | "capacity">)[];
            outputsData: string[];
        }, "outputs" | "outputsData">;
        changeOutput: number | undefined;
        scriptInfos: (Partial<Pick<{
            name: string;
            url: string;
            scriptHash: string;
            schema: string;
            messageType: string;
        }, never>> & Pick<{
            name: string;
            url: string;
            scriptHash: string;
            schema: string;
            messageType: string;
        }, "name" | "scriptHash" | "url" | "schema" | "messageType">)[];
        lockActions: (Partial<Pick<{
            scriptInfoHash: string;
            scriptHash: string;
            data: string;
        }, never>> & Pick<{
            scriptInfoHash: string;
            scriptHash: string;
            data: string;
        }, "data" | "scriptInfoHash" | "scriptHash">)[];
    }, "changeOutput">> & Pick<{
        message: Partial<Pick<{
            actions: (Partial<Pick<{
                scriptInfoHash: string;
                scriptHash: string;
                data: string;
            }, never>> & Pick<{
                scriptInfoHash: string;
                scriptHash: string;
                data: string;
            }, "data" | "scriptInfoHash" | "scriptHash">)[];
        }, never>> & Pick<{
            actions: (Partial<Pick<{
                scriptInfoHash: string;
                scriptHash: string;
                data: string;
            }, never>> & Pick<{
                scriptInfoHash: string;
                scriptHash: string;
                data: string;
            }, "data" | "scriptInfoHash" | "scriptHash">)[];
        }, "actions">;
        payload: Partial<Pick<{
            version: string;
            cellDeps: (Partial<Pick<{
                outPoint: Partial<Pick<{
                    txHash: string;
                    index: string;
                }, never>> & Pick<{
                    txHash: string;
                    index: string;
                }, "index" | "txHash">;
                depType: import("@ckb-lumos/lumos").DepType;
            }, never>> & Pick<{
                outPoint: Partial<Pick<{
                    txHash: string;
                    index: string;
                }, never>> & Pick<{
                    txHash: string;
                    index: string;
                }, "index" | "txHash">;
                depType: import("@ckb-lumos/lumos").DepType;
            }, "outPoint" | "depType">)[];
            headerDeps: string[];
            inputs: (Partial<Pick<{
                since: string;
                previousOutput: Partial<Pick<{
                    txHash: string;
                    index: string;
                }, never>> & Pick<{
                    txHash: string;
                    index: string;
                }, "index" | "txHash">;
            }, never>> & Pick<{
                since: string;
                previousOutput: Partial<Pick<{
                    txHash: string;
                    index: string;
                }, never>> & Pick<{
                    txHash: string;
                    index: string;
                }, "index" | "txHash">;
            }, "since" | "previousOutput">)[];
            outputs: (Partial<Pick<{
                capacity: string;
                lock: Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">;
                type: (Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">) | undefined;
            }, "type">> & Pick<{
                capacity: string;
                lock: Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">;
                type: (Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">) | undefined;
            }, "lock" | "capacity">)[];
            outputsData: string[];
        }, never>> & Pick<{
            version: string;
            cellDeps: (Partial<Pick<{
                outPoint: Partial<Pick<{
                    txHash: string;
                    index: string;
                }, never>> & Pick<{
                    txHash: string;
                    index: string;
                }, "index" | "txHash">;
                depType: import("@ckb-lumos/lumos").DepType;
            }, never>> & Pick<{
                outPoint: Partial<Pick<{
                    txHash: string;
                    index: string;
                }, never>> & Pick<{
                    txHash: string;
                    index: string;
                }, "index" | "txHash">;
                depType: import("@ckb-lumos/lumos").DepType;
            }, "outPoint" | "depType">)[];
            headerDeps: string[];
            inputs: (Partial<Pick<{
                since: string;
                previousOutput: Partial<Pick<{
                    txHash: string;
                    index: string;
                }, never>> & Pick<{
                    txHash: string;
                    index: string;
                }, "index" | "txHash">;
            }, never>> & Pick<{
                since: string;
                previousOutput: Partial<Pick<{
                    txHash: string;
                    index: string;
                }, never>> & Pick<{
                    txHash: string;
                    index: string;
                }, "index" | "txHash">;
            }, "since" | "previousOutput">)[];
            outputs: (Partial<Pick<{
                capacity: string;
                lock: Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">;
                type: (Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">) | undefined;
            }, "type">> & Pick<{
                capacity: string;
                lock: Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">;
                type: (Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">) | undefined;
            }, "lock" | "capacity">)[];
            outputsData: string[];
        }, "cellDeps" | "headerDeps" | "inputs" | "outputs" | "version" | "outputsData"> & {
            witnesses: string[];
        };
        resolvedInputs: Partial<Pick<{
            outputs: (Partial<Pick<{
                capacity: string;
                lock: Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">;
                type: (Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">) | undefined;
            }, "type">> & Pick<{
                capacity: string;
                lock: Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">;
                type: (Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">) | undefined;
            }, "lock" | "capacity">)[];
            outputsData: string[];
        }, never>> & Pick<{
            outputs: (Partial<Pick<{
                capacity: string;
                lock: Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">;
                type: (Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">) | undefined;
            }, "type">> & Pick<{
                capacity: string;
                lock: Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">;
                type: (Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/lumos").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">) | undefined;
            }, "lock" | "capacity">)[];
            outputsData: string[];
        }, "outputs" | "outputsData">;
        changeOutput: number | undefined;
        scriptInfos: (Partial<Pick<{
            name: string;
            url: string;
            scriptHash: string;
            schema: string;
            messageType: string;
        }, never>> & Pick<{
            name: string;
            url: string;
            scriptHash: string;
            schema: string;
            messageType: string;
        }, "name" | "scriptHash" | "url" | "schema" | "messageType">)[];
        lockActions: (Partial<Pick<{
            scriptInfoHash: string;
            scriptHash: string;
            data: string;
        }, never>> & Pick<{
            scriptInfoHash: string;
            scriptHash: string;
            data: string;
        }, "data" | "scriptInfoHash" | "scriptHash">)[];
    }, "message" | "payload" | "resolvedInputs" | "scriptInfos" | "lockActions">;
};
