{"version":3,"file":"utils.js","names":["_blake2b","_interopRequireDefault","require","_lodash","_jsXxhash","_codec","blockchain","_interopRequireWildcard","_number","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","obj","bytify","hexify","bytifyRawString","bytes","CKBHasher","constructor","options","outLength","hasher","blake2b","undefined","update","data","digestHex","out","Uint8Array","digest","buffer","exports","ckbHash","ckbHash160","hash160HexLength","slice","computeScriptHash","script","Script","pack","hashCode","xxHash32","toBigUInt64LE","num","toBigUInt64LECompatible","Uint64LE","readBigUInt64LE","hex","readBigUInt64LECompatible","toBigInt","unpack","toBigUInt128LE","u128","toBigUInt128LECompatible","Uint128LE","readBigUInt128LE","leHex","readBigUInt128LECompatible","assertHexString","debugPath","str","test","Error","assertHexadecimal","isDeepEqual","b","isEqual","TYPE_ID_CODE_HASH","generateTypeIdArgs","input","outputIndex","outPointBuf","CellInput","outputIndexBuf","number","ckbHasher","generateTypeIdScript","args","codeHash","hashType","toCamel","s","replace","$1","toUpperCase","deepCamel","prototype","toString","length","map","item","result","key","value","deepCamelizeDepGroup","deepCamelizeTransaction"],"sources":["../src/utils.ts"],"sourcesContent":["import blake2b, { Blake2b } from \"blake2b\";\nimport isEqual from \"lodash.isequal\";\nimport { xxHash32 } from \"js-xxhash\";\nimport { bytes, number, BytesLike } from \"@ckb-lumos/codec\";\nimport { BI, BIish } from \"@ckb-lumos/bi\";\nimport * as blockchain from \"./blockchain\";\nimport { Script, Input } from \"./api\";\nimport { Hash, HexNumber, HexString } from \"./primitive\";\nimport { Uint128LE, Uint64LE } from \"@ckb-lumos/codec/lib/number\";\n\ntype CKBHasherOptions = {\n  outLength?: number;\n};\n\nconst { bytify, hexify, bytifyRawString } = bytes;\nclass CKBHasher {\n  hasher: Blake2b;\n  outLength: number;\n\n  constructor(options: CKBHasherOptions = {}) {\n    const { outLength = 32 } = options;\n    this.outLength = outLength;\n    this.hasher = blake2b(\n      outLength,\n      undefined,\n      undefined,\n      bytifyRawString(\"ckb-default-hash\")\n    );\n  }\n\n  update(data: string | ArrayBuffer): this {\n    this.hasher.update(bytify(data));\n    return this;\n  }\n\n  digestHex(): Hash {\n    const out = new Uint8Array(this.outLength);\n    this.hasher.digest(out);\n    return hexify(out.buffer);\n  }\n}\n\n/**\n * create a 32-bytes Blake2b hash with the CKB personalization\n * @param data\n */\nfunction ckbHash(data: BytesLike): Hash {\n  const hasher = new CKBHasher();\n  hasher.update(bytes.bytify(data));\n  return hasher.digestHex();\n}\n\n/**\n * create a 20-bytes Blake2b hash with the CKB personalization\n * @param data\n */\nfunction ckbHash160(data: BytesLike): Hash {\n  // 2 for prefix 0x\n  // 40 for 20-bytes hex string\n  const hash160HexLength = 42;\n  return ckbHash(data).slice(0, hash160HexLength);\n}\n\n/**\n * compute lock/type hash\n *\n * @param script\n */\nfunction computeScriptHash(script: Script): string {\n  return ckbHash(blockchain.Script.pack(script));\n}\n\nfunction hashCode(buffer: Buffer): number {\n  return xxHash32(buffer, 0);\n}\n\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n * convert bigint to BigUInt64 little-endian hex string\n * @param num\n */\nfunction toBigUInt64LE(num: BIish): HexString {\n  return toBigUInt64LECompatible(num);\n}\n\nfunction toBigUInt64LECompatible(num: BIish): HexString {\n  return bytes.hexify(Uint64LE.pack(num));\n}\n\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n * convert BigUInt64 little-endian hex string to bigint\n *\n * @param hex BigUInt64 little-endian hex string\n */\nfunction readBigUInt64LE(hex: HexString): bigint {\n  return readBigUInt64LECompatible(hex).toBigInt();\n}\n\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n */\nfunction readBigUInt64LECompatible(hex: HexString): BI {\n  return Uint64LE.unpack(hex);\n}\n\n// const U128_MIN = BigInt(0);\n// const U128_MAX = BigInt(\"340282366920938463463374607431768211455\");\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n * convert bigint to BigUInt128 little-endian hex string\n *\n * @param u128\n */\nfunction toBigUInt128LE(u128: BIish): string {\n  return toBigUInt128LECompatible(u128);\n}\n\nfunction toBigUInt128LECompatible(num: BIish): HexNumber {\n  return bytes.hexify(Uint128LE.pack(num));\n}\n\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n * convert BigUInt64 little-endian hex string to bigint\n *\n * @param leHex BigUInt128 little-endian hex string\n */\nfunction readBigUInt128LE(leHex: HexString): bigint {\n  return readBigUInt128LECompatible(leHex).toBigInt();\n}\n\n/**\n * @deprecated please follow the {@link https://lumos-website.vercel.app/migrations/migrate-to-v0.19 migration-guide}\n */\nfunction readBigUInt128LECompatible(leHex: HexString): BI {\n  return Uint128LE.unpack(leHex);\n}\n\nfunction assertHexString(debugPath: string, str: string): void {\n  if (!/^0x([0-9a-fA-F][0-9a-fA-F])*$/.test(str)) {\n    throw new Error(`${debugPath} must be a hex string!`);\n  }\n}\n\nfunction assertHexadecimal(debugPath: string, str: string): void {\n  if (!/^0x(0|[0-9a-fA-F]+)$/.test(str)) {\n    throw new Error(`${debugPath} must be a hexadecimal!`);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nfunction isDeepEqual(a: any, b: any): boolean {\n  return isEqual(a, b);\n}\n// Buffer.from('TYPE_ID')\nconst TYPE_ID_CODE_HASH =\n  \"0x00000000000000000000000000000000000000000000000000545950455f4944\";\n\nfunction generateTypeIdArgs(input: Input, outputIndex: HexNumber): HexString {\n  const outPointBuf = blockchain.CellInput.pack(input);\n  const outputIndexBuf = bytes.hexify(number.Uint64LE.pack(outputIndex));\n  const ckbHasher = new CKBHasher();\n  ckbHasher.update(outPointBuf);\n  ckbHasher.update(outputIndexBuf);\n  return ckbHasher.digestHex();\n}\n\n/**\n * Generate a type script for type id {@link https://xuejie.space/2020_02_03_introduction_to_ckb_script_programming_type_id/}\n * @param input\n * @param outputIndex\n */\nfunction generateTypeIdScript(input: Input, outputIndex = \"0x0\"): Script {\n  blockchain.CellInput.pack(input);\n  assertHexadecimal(\"outputIndex\", outputIndex);\n\n  const args = generateTypeIdArgs(input, outputIndex);\n  return {\n    codeHash: TYPE_ID_CODE_HASH,\n    hashType: \"type\",\n    args,\n  };\n}\n\nfunction toCamel(s: string): string {\n  return s.replace(/([-_][a-z])/gi, ($1) => {\n    return $1.toUpperCase().replace(\"-\", \"\").replace(\"_\", \"\");\n  });\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nfunction deepCamel(data: any): any {\n  if (Object.prototype.toString.call(data) === \"[object Array]\") {\n    if (data.length === 0) {\n      return data;\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return data.map((item: any) => deepCamel(item));\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const result: any = {};\n  if (Object.prototype.toString.call(data) === \"[object Object]\") {\n    for (const key in data) {\n      const value = data[key];\n      if (\n        Object.prototype.toString.call(value) === \"[object Object]\" ||\n        Object.prototype.toString.call(value) === \"[object Array]\"\n      ) {\n        result[toCamel(key)] = deepCamel(value);\n      } else {\n        result[toCamel(key)] = value;\n      }\n    }\n    return result;\n  }\n  return data;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nfunction deepCamelizeDepGroup(data: any): any {\n  if (Object.prototype.toString.call(data) === \"[object Array]\") {\n    if (data.length === 0) {\n      return data;\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      return data.map((item: any) => deepCamelizeDepGroup(item));\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const result: any = {};\n  if (Object.prototype.toString.call(data) === \"[object Object]\") {\n    for (const key in data) {\n      const value = data[key];\n      if (\n        Object.prototype.toString.call(value) === \"[object Object]\" ||\n        Object.prototype.toString.call(value) === \"[object Array]\"\n      ) {\n        result[key] = deepCamelizeDepGroup(value);\n      } else {\n        result[key] = value === \"dep_group\" ? \"depGroup\" : value;\n      }\n    }\n    return result;\n  }\n  return data;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nfunction deepCamelizeTransaction(data: any): any {\n  return deepCamelizeDepGroup(deepCamel(data));\n}\n\nexport {\n  CKBHasher,\n  ckbHash,\n  ckbHash160,\n  deepCamel,\n  deepCamelizeTransaction,\n  toBigUInt64LE,\n  toBigUInt64LECompatible,\n  readBigUInt64LE,\n  readBigUInt64LECompatible,\n  toBigUInt128LE,\n  toBigUInt128LECompatible,\n  readBigUInt128LE,\n  readBigUInt128LECompatible,\n  computeScriptHash,\n  hashCode,\n  assertHexString,\n  assertHexadecimal,\n  isDeepEqual,\n  generateTypeIdScript,\n};\n"],"mappings":"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","ignoreList":[]}