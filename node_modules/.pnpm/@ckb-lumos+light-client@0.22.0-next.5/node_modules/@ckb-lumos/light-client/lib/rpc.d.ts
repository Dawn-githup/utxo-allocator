import { CKBComponents } from "@ckb-lumos/rpc/lib/types/api";
import type { FetchHeaderResult, FetchTransactionResult, LightClientScript, SetScriptCommand } from "./type";
export declare class LightClientRPC {
    private uri;
    /**
     *
     * @param uri light client uri
     */
    constructor(uri: string);
    getTipHeader(): Promise<CKBComponents.BlockHeader>;
    getPeers(): Promise<Array<CKBComponents.RemoteNodeInfo>>;
    localNodeInfo(): Promise<CKBComponents.LocalNodeInfo>;
    fetchHeader(blockHash: string): Promise<FetchHeaderResult>;
    getHeader(blockHash: string): Promise<CKBComponents.BlockHeader>;
    fetchTransaction(txHash: string): Promise<FetchTransactionResult>;
    getTransaction(txHash: string): Promise<CKBComponents.TransactionWithStatus>;
    sendTransaction(tx: CKBComponents.RawTransaction): Promise<CKBComponents.Hash>;
    getScripts(): Promise<Array<LightClientScript>>;
    setScripts(scripts: Array<LightClientScript>, command?: SetScriptCommand): Promise<void>;
    getCells<WithData extends boolean = true>(searchKey: CKBComponents.GetCellsSearchKey<WithData>, order: CKBComponents.Order, limit: CKBComponents.UInt32, cursor?: string): Promise<CKBComponents.GetLiveCellsResult<WithData>>;
    getCellsCapacity(searchKey: CKBComponents.SearchKey): Promise<CKBComponents.CellsCapacity>;
    getGenesisBlock(): Promise<CKBComponents.Block>;
    getTransactions<Grouped extends boolean = false>(searchKey: CKBComponents.GetTransactionsSearchKey<Grouped>, order: CKBComponents.Order, limit: CKBComponents.UInt32, cursor?: string): Promise<CKBComponents.GetTransactionsResult<Grouped>>;
}
//# sourceMappingURL=rpc.d.ts.map