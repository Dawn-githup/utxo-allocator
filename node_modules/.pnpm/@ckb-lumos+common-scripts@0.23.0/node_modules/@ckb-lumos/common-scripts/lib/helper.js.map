{"version":3,"file":"helper.js","names":["_immutable","require","_helpers","_codec","_base","_number","CKBHasher","ckbHash","utils","addCellDep","txSkeleton","newCellDep","cellDep","get","find","depType","values","OutPointValue","outPoint","validate","equals","update","cellDeps","push","generateDaoScript","config","template","SCRIPTS","DAO","codeHash","CODE_HASH","hashType","HASH_TYPE","args","isSecp256k1Blake160Script","script","SECP256K1_BLAKE160","isSecp256k1Blake160Address","address","parseAddress","isOmnilockScript","OMNILOCK","isOmnilockAddress","isSecp256k1Blake160MultisigScript","SECP256K1_BLAKE160_MULTISIG","isSecp256k1Blake160MultisigAddress","isDaoScript","isSudtScript","SUDT","Error","isAcpScript","ANYONE_CAN_PAY","isAcpAddress","hashWitness","hasher","witness","len","bytes","hexify","Uint64","pack","bytify","length","prepareSigningEntries","scriptType","processedArgs","Set","tx","createTransactionFromSkeleton","txHash","blockchain","RawTransaction","inputs","witnesses","signingEntries","i","size","input","cellOutput","lock","has","add","lockValue","ScriptValue","j","otherInput","signingEntry","type","index","message","digestHex","set","ensureScript","SECP_SIGNATURE_PLACEHOLDER","exports","_default","default"],"sources":["../src/helper.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-non-null-assertion, @typescript-eslint/explicit-module-boundary-types */\n\nimport { Set } from \"immutable\";\nimport {\n  createTransactionFromSkeleton,\n  parseAddress,\n  TransactionSkeletonType,\n} from \"@ckb-lumos/helpers\";\nimport { bytes } from \"@ckb-lumos/codec\";\nimport {\n  values,\n  utils,\n  CellDep,\n  Script,\n  Address,\n  HexString,\n  blockchain,\n} from \"@ckb-lumos/base\";\nconst { CKBHasher, ckbHash } = utils;\nimport { Config } from \"@ckb-lumos/config-manager\";\nimport { Uint64 } from \"@ckb-lumos/codec/lib/number\";\n\nexport function addCellDep(\n  txSkeleton: TransactionSkeletonType,\n  newCellDep: CellDep\n): TransactionSkeletonType {\n  const cellDep = txSkeleton.get(\"cellDeps\").find((cellDep) => {\n    return (\n      cellDep.depType === newCellDep.depType &&\n      new values.OutPointValue(cellDep.outPoint, { validate: false }).equals(\n        new values.OutPointValue(newCellDep.outPoint, { validate: false })\n      )\n    );\n  });\n\n  if (!cellDep) {\n    txSkeleton = txSkeleton.update(\"cellDeps\", (cellDeps) => {\n      return cellDeps.push({\n        outPoint: newCellDep.outPoint,\n        depType: newCellDep.depType,\n      });\n    });\n  }\n\n  return txSkeleton;\n}\n\nexport function generateDaoScript(config: Config): Script {\n  const template = config.SCRIPTS.DAO!;\n\n  return {\n    codeHash: template.CODE_HASH,\n    hashType: template.HASH_TYPE,\n    args: \"0x\",\n  };\n}\n\nexport function isSecp256k1Blake160Script(\n  script: Script,\n  config: Config\n): boolean {\n  const template = config.SCRIPTS.SECP256K1_BLAKE160!;\n  return (\n    script.codeHash === template.CODE_HASH &&\n    script.hashType === template.HASH_TYPE\n  );\n}\n\nexport function isSecp256k1Blake160Address(\n  address: Address,\n  config: Config\n): boolean {\n  const script = parseAddress(address, { config });\n  return isSecp256k1Blake160Script(script, config);\n}\n\nexport function isOmnilockScript(script: Script, config: Config): boolean {\n  const template = config.SCRIPTS.OMNILOCK!;\n  return (\n    script.codeHash === template.CODE_HASH &&\n    script.hashType === template.HASH_TYPE\n  );\n}\n\nexport function isOmnilockAddress(address: Address, config: Config): boolean {\n  const script = parseAddress(address, { config });\n  return isOmnilockScript(script, config);\n}\n\nexport function isSecp256k1Blake160MultisigScript(\n  script: Script,\n  config: Config\n): boolean {\n  const template = config.SCRIPTS.SECP256K1_BLAKE160_MULTISIG!;\n  return (\n    script.codeHash === template.CODE_HASH &&\n    script.hashType === template.HASH_TYPE\n  );\n}\n\nexport function isSecp256k1Blake160MultisigAddress(\n  address: Address,\n  config: Config\n): boolean {\n  const script = parseAddress(address, { config });\n  return isSecp256k1Blake160MultisigScript(script, config);\n}\n\nexport function isDaoScript(\n  script: Script | undefined,\n  config: Config\n): boolean {\n  const template = config.SCRIPTS.DAO!;\n\n  return (\n    !!script &&\n    script.codeHash === template.CODE_HASH &&\n    script.hashType === template.HASH_TYPE\n  );\n}\n\nexport function isSudtScript(\n  script: Script | undefined,\n  config: Config\n): boolean {\n  const template = config.SCRIPTS.SUDT;\n\n  if (!template) {\n    throw new Error(`SUDT script not defined in config!`);\n  }\n\n  return (\n    !!script &&\n    script.codeHash === template.CODE_HASH &&\n    script.hashType === template.HASH_TYPE\n  );\n}\n\nexport function isAcpScript(script: Script, config: Config): boolean {\n  const template = config.SCRIPTS.ANYONE_CAN_PAY;\n\n  if (!template) {\n    throw new Error(`ANYONE_CAN_PAY script not defined in config!`);\n  }\n\n  return (\n    !!script &&\n    script.codeHash === template.CODE_HASH &&\n    script.hashType === template.HASH_TYPE\n  );\n}\n\nexport function isAcpAddress(address: Address, config: Config): boolean {\n  const script = parseAddress(address, { config });\n\n  return isAcpScript(script, config);\n}\n\n/**\n * Hash a witness in a hasher\n * @param hasher The hasher object which should have a `update` method.\n * @param witness witness data, the inputs to hasher will derived from it\n */\nexport function hashWitness(\n  hasher: { update: (value: HexString | ArrayBuffer) => unknown },\n  witness: HexString\n): void {\n  // https://github.com/nervosnetwork/ckb-system-scripts/blob/a7b7c75662ed950c9bd024e15f83ce702a54996e/c/secp256k1_blake160_sighash_all.c#L81\n  const len = bytes.hexify(Uint64.pack(bytes.bytify(witness).length));\n  // https://github.com/nervosnetwork/ckb-system-scripts/blob/a7b7c75662ed950c9bd024e15f83ce702a54996e/c/secp256k1_blake160_sighash_all.c#L214-L215\n  hasher.update(len);\n  hasher.update(witness);\n}\n/* eslint-enable camelcase, @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types */\n\nexport function prepareSigningEntries(\n  txSkeleton: TransactionSkeletonType,\n  config: Config,\n  scriptType: \"SECP256K1_BLAKE160\" | \"SECP256K1_BLAKE160_MULTISIG\" | \"OMNILOCK\"\n): TransactionSkeletonType {\n  const template = config.SCRIPTS[scriptType];\n  if (!template) {\n    throw new Error(\n      `Provided config does not have ${scriptType} script setup!`\n    );\n  }\n  let processedArgs = Set<string>();\n  const tx = createTransactionFromSkeleton(txSkeleton);\n  const txHash = ckbHash(blockchain.RawTransaction.pack(tx));\n  const inputs = txSkeleton.get(\"inputs\");\n  const witnesses = txSkeleton.get(\"witnesses\");\n  let signingEntries = txSkeleton.get(\"signingEntries\");\n  for (let i = 0; i < inputs.size; i++) {\n    const input = inputs.get(i)!;\n    if (\n      template.CODE_HASH === input.cellOutput.lock.codeHash &&\n      template.HASH_TYPE === input.cellOutput.lock.hashType &&\n      !processedArgs.has(input.cellOutput.lock.args)\n    ) {\n      processedArgs = processedArgs.add(input.cellOutput.lock.args);\n      const lockValue = new values.ScriptValue(input.cellOutput.lock, {\n        validate: false,\n      });\n      const hasher = new CKBHasher();\n      hasher.update(txHash);\n      if (i >= witnesses.size) {\n        throw new Error(\n          `The first witness in the script group starting at input index ${i} does not exist, maybe some other part has invalidly tampered the transaction?`\n        );\n      }\n      hashWitness(hasher, witnesses.get(i)!);\n      for (let j = i + 1; j < inputs.size && j < witnesses.size; j++) {\n        const otherInput = inputs.get(j)!;\n        if (\n          lockValue.equals(\n            new values.ScriptValue(otherInput.cellOutput.lock, {\n              validate: false,\n            })\n          )\n        ) {\n          hashWitness(hasher, witnesses.get(j)!);\n        }\n      }\n      for (let j = inputs.size; j < witnesses.size; j++) {\n        hashWitness(hasher, witnesses.get(j)!);\n      }\n      const signingEntry = {\n        type: \"witness_args_lock\",\n        index: i,\n        message: hasher.digestHex(),\n      };\n      signingEntries = signingEntries.push(signingEntry);\n    }\n  }\n  txSkeleton = txSkeleton.set(\"signingEntries\", signingEntries);\n  return txSkeleton;\n}\n\nexport function ensureScript(\n  script: Script,\n  config: Config,\n  scriptType:\n    | \"SECP256K1_BLAKE160\"\n    | \"SECP256K1_BLAKE160_MULTISIG\"\n    | \"DAO\"\n    | \"OMNILOCK\"\n): void {\n  const template = config.SCRIPTS[scriptType];\n  if (!template) {\n    throw new Error(\n      `Provided config does not have ${scriptType} script setup!`\n    );\n  }\n  if (\n    template.CODE_HASH !== script.codeHash ||\n    template.HASH_TYPE !== script.hashType\n  ) {\n    throw new Error(`Provided script is not ${scriptType} script!`);\n  }\n}\n\n/* 65-byte zeros in hex */\nexport const SECP_SIGNATURE_PLACEHOLDER =\n  \"0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\";\n\nexport default {\n  addCellDep,\n  generateDaoScript,\n  isSecp256k1Blake160Script,\n  isSecp256k1Blake160MultisigScript,\n  isDaoScript,\n  isSudtScript,\n  prepareSigningEntries,\n  isSecp256k1Blake160Address,\n  isSecp256k1Blake160MultisigAddress,\n  ensureScript,\n  isAcpScript,\n  isAcpAddress,\n};\n"],"mappings":"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","ignoreList":[]}