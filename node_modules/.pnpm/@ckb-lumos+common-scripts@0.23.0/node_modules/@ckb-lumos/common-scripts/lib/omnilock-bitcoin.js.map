{"version":3,"file":"omnilock-bitcoin.js","names":["_codec","require","_bech","_bs","_interopRequireDefault","obj","__esModule","default","BTC_PREFIX","decodeAddress","address","startsWith","bech32","fromWords","decode","words","slice","bs58","Error","signMessage","digest","type","provider","internal","window","unisat","okxwallet","bitcoin","accounts","requestAccounts","digestWithout0x","bytes","hexify","signatureBase64","signature","bytify","base64ToHex","str","raw","atob","result","i","length","hex","charCodeAt","toString"],"sources":["../src/omnilock-bitcoin.ts"],"sourcesContent":["// TODO the magic number eslint will be resolved in 0.24 by recovering https://github.com/ckb-js/lumos/pull/682\n/*eslint-disable @typescript-eslint/no-magic-numbers*/\n\nimport { bytes, BytesLike } from \"@ckb-lumos/codec\";\nimport { bech32 } from \"bech32\";\nimport bs58 from \"bs58\";\n\n// https://github.com/cryptape/omnilock/blob/9419b7795641da0ade25a04127e25d8a0b709077/c/ckb_identity.h#L28\nconst BTC_PREFIX = \"CKB (Bitcoin Layer) transaction: 0x\";\n\n/**\n * Decode bitcoin address to public key hash in bytes\n * @see https://en.bitcoin.it/wiki/List_of_address_prefixes\n * @param address\n */\nexport function decodeAddress(address: string): ArrayLike<number> {\n  try {\n    // Bech32\n    if (address.startsWith(\"bc1q\")) {\n      return bech32.fromWords(bech32.decode(address).words.slice(1));\n    }\n\n    // P2PKH\n    if (address.startsWith(\"1\")) {\n      return bs58.decode(address).slice(1, 21);\n    }\n\n    // P2SH\n    if (address.startsWith(\"3\")) {\n      return bs58.decode(address).slice(1, 21);\n    }\n  } catch {\n    // https://bitcoin.design/guide/glossary/address/#taproot-address---p2tr\n    if (address.startsWith(\"bc1p\")) {\n      throw new Error(\"Taproot address is not supported yet.\");\n    }\n  }\n\n  throw new Error(\n    `Unsupported bitcoin address ${address}, only 1...(P2PKH) 3...(P2SH), and bc1...(Bech32) are supported.`\n  );\n}\n\nexport interface Provider {\n  requestAccounts(): Promise<string[]>;\n  signMessage(message: string, type?: \"ecdsa\"): Promise<string>;\n}\n\nexport async function signMessage(\n  digest: BytesLike,\n  type?: \"ecdsa\",\n  provider?: Provider\n): Promise<string> {\n  const internal: Provider = (() => {\n    if (provider) return provider;\n\n    /* c8 ignore next 15*/\n    if (typeof window !== \"undefined\") {\n      if (\"unisat\" in window) {\n        return window.unisat as Provider;\n      }\n\n      if (\n        \"okxwallet\" in window &&\n        \"bitcoin\" in (window.okxwallet as Provider)\n      ) {\n        return (window.okxwallet as Record<\"bitcoin\", Provider>).bitcoin;\n      }\n    }\n\n    throw new Error(\n      \"No provider found, make sure you have installed UniSat Wallet\"\n    );\n  })();\n\n  const accounts = await internal.requestAccounts();\n  const digestWithout0x = bytes.hexify(digest).slice(2);\n  const signatureBase64 = await internal.signMessage(\n    `${BTC_PREFIX}${digestWithout0x}`,\n    type\n  );\n  const signature = bytes.bytify(base64ToHex(signatureBase64));\n\n  const address = accounts[0];\n  // a secp256k1 private key can be used to sign various types of messages\n  // the first byte of signature used as a recovery id to identify the type of message\n  // https://github.com/XuJiandong/omnilock/blob/4e9fdb6ca78637651c8145bb7c5b82b4591332fb/c/ckb_identity.h#L249-L266\n  if (address.startsWith(\"bc1q\")) {\n    signature[0] = 39 + ((signature[0] - 27) % 4);\n  } else if (address.startsWith(\"3\")) {\n    signature[0] = 35 + ((signature[0] - 27) % 4);\n  } else if (address.startsWith(\"1\")) {\n    signature[0] = 31 + ((signature[0] - 27) % 4);\n  } else {\n    throw new Error(\n      `Unsupported bitcoin address ${address}, only 1...(P2PKH) 3...(P2SH), and bc1...(Bech32) are supported.`\n    );\n  }\n\n  return bytes.hexify(signature);\n}\n\nfunction base64ToHex(str: string) {\n  const raw = atob(str);\n  let result = \"\";\n  for (let i = 0; i < raw.length; i++) {\n    const hex = raw.charCodeAt(i).toString(16);\n    result += hex.length === 2 ? hex : \"0\" + hex;\n  }\n  return \"0x\" + result;\n}\n"],"mappings":"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","ignoreList":[]}