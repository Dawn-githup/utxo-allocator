{"version":3,"file":"omnilock.js","names":["_codec","require","_base","_configManager","_helper","_from_info","_molecule","_blockchain","_bytes","bitcoin","_interopRequireWildcard","exports","solana","_bs","_utils","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","ScriptValue","values","IdentityFlagsType","OMNILOCK_AUTH_CONTENT_LENGTH","SECP256K1_SIGNATURE_PLACEHOLDER_LENGTH","ED25519_SIGNATURE_PLACEHOLDER_LENGTH","createOmnilockScript","omnilockInfo","options","config","getConfig","omnilockConfig","SCRIPTS","OMNILOCK","Error","defaultOmnilockArgs","omnilockArgs","args","flag","auth","bytes","hexify","concat","IdentityFlagsEthereum","content","IdentityFlagsCkb","IdentityFlagsBitcoin","decodeAddress","authContent","bytify","ckbHash","bs58Decode","slice","IdentityFlagsSolana","codeHash","CODE_HASH","hashType","HASH_TYPE","Hexify","pack","unpack","IDENTITY_LENGTH","Auth","createFixedHexBytesCodec","SmtProof","byteVecOf","SmtProofEntry","table","mask","byteOf","proof","SmtProofEntryVec","vector","OmniIdentity","identity","proofs","OmniIdentityOpt","option","OmnilockWitnessLock","signature","BytesOpt","omni_identity","preimage","CellCollector","constructor","fromInfo","cellProvider","undefined","queryOptions","fromScript","parseFromInfo","lock","type","cellCollector","collector","collect","isOmnilockScript","inputCell","setupInputCell","txSkeleton","_fromInfo","defaultWitness","since","cellOutput","update","inputs","push","output","capacity","data","outputs","inputSinces","size","witnesses","template","secp256k1Template","SECP256K1_BLAKE160","omnilockOutPoint","txHash","TX_HASH","index","INDEX","secp256k1OutPoint","addCellDep","outPoint","depType","DEP_TYPE","firstIndex","findIndex","input","validate","equals","witness","placeholderLength","identityFlag","newWitnessArgs","createWitnessLockPlaceholder","blockchain","WitnessArgs","signatureLength","serializedLength","Uint8Array","byteLength","prepareSigningEntries","_prepareSigningEntries","_default"],"sources":["../src/omnilock.ts"],"sourcesContent":["import { Options, TransactionSkeletonType } from \"@ckb-lumos/helpers\";\nimport { bytes, BytesLike } from \"@ckb-lumos/codec\";\nimport {\n  blockchain,\n  Cell,\n  CellCollector as CellCollectorType,\n  CellProvider,\n  HexString,\n  OutPoint,\n  PackedSince,\n  QueryOptions,\n  Script,\n  values,\n  WitnessArgs,\n} from \"@ckb-lumos/base\";\nimport { Config, getConfig } from \"@ckb-lumos/config-manager\";\nimport {\n  addCellDep,\n  isOmnilockScript,\n  prepareSigningEntries as _prepareSigningEntries,\n} from \"./helper\";\nimport { FromInfo } from \".\";\nimport { parseFromInfo } from \"./from_info\";\nimport { CellCollectorConstructor } from \"./type\";\nimport {\n  byteOf,\n  byteVecOf,\n  option,\n  table,\n  vector,\n} from \"@ckb-lumos/codec/lib/molecule\";\nimport {\n  BytesOpt,\n  createFixedHexBytesCodec,\n} from \"@ckb-lumos/codec/lib/blockchain\";\nimport { bytify, hexify } from \"@ckb-lumos/codec/lib/bytes\";\nimport * as bitcoin from \"./omnilock-bitcoin\";\nimport * as solana from \"./omnilock-solana\";\nimport { decode as bs58Decode } from \"bs58\";\nimport { ckbHash } from \"@ckb-lumos/base/lib/utils\";\n\nconst { ScriptValue } = values;\n\nexport type OmnilockInfo = {\n  auth: OmnilockAuth;\n};\n\nexport type OmnilockAuth =\n  | IdentityCkb\n  | IdentityEthereum\n  | IdentityBitcoin\n  | IdentitySolana;\n\nexport type IdentityCkb = {\n  flag: \"SECP256K1_BLAKE160\";\n  /**\n   * the blake160 hash of a secp256k1 public key\n   */\n  content: BytesLike;\n};\nexport type IdentityEthereum = {\n  flag: \"ETHEREUM\";\n\n  /**\n   * an Ethereum address, aka the public key hash\n   */\n  content: BytesLike;\n};\nexport type IdentityBitcoin = {\n  flag: \"BITCOIN\";\n  /**\n   * a Bitcoin address, such as\n   * `P2PKH(17VZNX1SN5NtKa8UQFxwQbFeFc3iqRYhem)`,\n   * `P2SH(3EktnHQD7RiAE6uzMj2ZifT9YgRrkSgzQX)`,\n   * `Bech32(bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4)`\n   */\n  content: string;\n};\n\nexport type IdentitySolana = {\n  flag: \"SOLANA\";\n  // base58 encoded ed25519 public key\n  content: string;\n};\n\n// https://github.com/XuJiandong/omnilock/blob/4e9fdb6ca78637651c8145bb7c5b82b4591332fb/c/ckb_identity.h#L62-L76\nenum IdentityFlagsType {\n  IdentityFlagsCkb = 0,\n  IdentityFlagsEthereum = 1,\n  IdentityFlagsEos = 2,\n  IdentityFlagsTron = 3,\n  IdentityFlagsBitcoin = 4,\n  IdentityFlagsDogecoin = 5,\n  IdentityCkbMultisig = 6,\n  IdentityFlagsEthereumDisplaying = 18,\n  IdentityFlagsSolana = 19,\n  IdentityFlagsOwnerLock = 0xfc,\n  IdentityFlagsExec = 0xfd,\n  IdentityFlagsDl = 0xfe,\n}\n\n// https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0042-omnilock/0042-omnilock.md#authentication\nconst OMNILOCK_AUTH_CONTENT_LENGTH = 20;\n\nconst SECP256K1_SIGNATURE_PLACEHOLDER_LENGTH = 65;\n\n//  https://datatracker.ietf.org/doc/html/rfc8032#section-7.1\n// 64 bytes for ED25519 signature\n// 32 bytes for Ed25519 pubkey public key\nconst ED25519_SIGNATURE_PLACEHOLDER_LENGTH = 96;\n\n/**\n * only support ETHEREUM and SECP256K1_BLAKE160 mode currently\n * refer to: @link https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0042-omnilock/0042-omnilock.md omnilock\n * @param omnilockInfo\n * @param options\n * @returns\n * @example\n * // create an omnilock to work with MetaMask wallet\n * createOmnilockScript({\n *   auth: {\n *     flag: \"ETHEREUM\",\n *     content: \"an ethereum address here\",\n *   }, { config })\n * // or we can create an omnilock to work with UniSat wallet\n * createOmnilockScript({\n *   auth: {\n *     flag: \"BITCOIN\",\n *     content: \"a bitcoin address here\",\n *   }\n * }, {config})\n */\nexport function createOmnilockScript(\n  omnilockInfo: OmnilockInfo,\n  options?: Options\n): Script {\n  const config = options?.config || getConfig();\n  const omnilockConfig = config.SCRIPTS.OMNILOCK;\n  if (!omnilockConfig) {\n    throw new Error(\"OMNILOCK script config not found.\");\n  }\n\n  // TODO The advanced feature will be supported in the future.\n  // https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0042-omnilock/0042-omnilock.md\n  /**\n   * |Name                 |Flags     |Affected Args              |Affected Args Size (byte)|Affected Witness|\n   * |---------------------|----------|---------------------------|-------------------------|----------------|\n   * |administrator mode   |0b00000001|AdminList cell Type ID     |32                       |omni_identity/signature in OmniLockWitnessLock|\n   * |anyone-can-pay mode  |0b00000010|minimum ckb/udt in ACP     |2                        |N/A             |\n   * |time-lock mode       |0b00000100|since for timelock         |8                        |N/A             |\n   * |supply mode          |0b00001000|type script hash for supply|32                       |N/A             |\n   */\n  const defaultOmnilockArgs = 0b00000000;\n  const omnilockArgs = [defaultOmnilockArgs];\n\n  const args = (() => {\n    const flag = omnilockInfo.auth.flag;\n    switch (flag) {\n      case \"ETHEREUM\":\n        return bytes.hexify(\n          bytes.concat(\n            [IdentityFlagsType.IdentityFlagsEthereum],\n            omnilockInfo.auth.content,\n            omnilockArgs\n          )\n        );\n      case \"SECP256K1_BLAKE160\":\n        return bytes.hexify(\n          bytes.concat(\n            [IdentityFlagsType.IdentityFlagsCkb],\n            omnilockInfo.auth.content,\n            omnilockArgs\n          )\n        );\n      case \"BITCOIN\":\n        return bytes.hexify(\n          bytes.concat(\n            [IdentityFlagsType.IdentityFlagsBitcoin],\n            bitcoin.decodeAddress(omnilockInfo.auth.content),\n            omnilockArgs\n          )\n        );\n      case \"SOLANA\": {\n        const authContent = bytes\n          .bytify(ckbHash(bs58Decode(omnilockInfo.auth.content)))\n          .slice(0, OMNILOCK_AUTH_CONTENT_LENGTH);\n        return bytes.hexify(\n          bytes.concat(\n            [IdentityFlagsType.IdentityFlagsSolana],\n            authContent,\n            omnilockArgs\n          )\n        );\n      }\n\n      default:\n        throw new Error(`Not supported flag: ${flag}.`);\n    }\n  })();\n\n  return {\n    codeHash: omnilockConfig.CODE_HASH,\n    hashType: omnilockConfig.HASH_TYPE,\n    args,\n  };\n}\n\nconst Hexify = { pack: bytify, unpack: hexify };\n\n// https://github.com/cryptape/omnilock/blob/cd764d7133ec4e6b192fac4b93fc0596ef5b71f6/c/omni_lock.mol#L3\n// array Auth[byte; 21];\nconst IDENTITY_LENGTH = 21;\nconst Auth = createFixedHexBytesCodec(IDENTITY_LENGTH);\nconst SmtProof = byteVecOf(Hexify);\nconst SmtProofEntry = table(\n  {\n    mask: byteOf(Hexify),\n    proof: SmtProof,\n  },\n  [\"mask\", \"proof\"]\n);\nconst SmtProofEntryVec = vector(SmtProofEntry);\nconst OmniIdentity = table(\n  {\n    identity: Auth,\n    proofs: SmtProofEntryVec,\n  },\n  [\"identity\", \"proofs\"]\n);\nconst OmniIdentityOpt = option(OmniIdentity);\nexport const OmnilockWitnessLock = table(\n  {\n    signature: BytesOpt,\n    omni_identity: OmniIdentityOpt,\n    preimage: BytesOpt,\n  },\n  [\"signature\", \"omni_identity\", \"preimage\"]\n);\n\nexport const CellCollector: CellCollectorConstructor = class CellCollector\n  implements CellCollectorType\n{\n  private cellCollector: CellCollectorType;\n  private config: Config;\n  public readonly fromScript: Script;\n\n  constructor(\n    fromInfo: FromInfo,\n    cellProvider: CellProvider,\n    {\n      config = undefined,\n      queryOptions = {},\n    }: Options & {\n      queryOptions?: QueryOptions;\n    } = {}\n  ) {\n    if (!cellProvider) {\n      throw new Error(`Cell provider is missing!`);\n    }\n    config = config || getConfig();\n    this.fromScript = parseFromInfo(fromInfo, { config }).fromScript;\n\n    this.config = config;\n\n    queryOptions = {\n      ...queryOptions,\n      lock: this.fromScript,\n      type: queryOptions.type || \"empty\",\n    };\n\n    this.cellCollector = cellProvider.collector(queryOptions);\n  }\n\n  async *collect(): AsyncGenerator<Cell> {\n    if (!isOmnilockScript(this.fromScript, this.config)) {\n      return;\n    }\n\n    for await (const inputCell of this.cellCollector.collect()) {\n      yield inputCell;\n    }\n  }\n};\n\n/**\n * Setup input cell infos, such as cell deps and witnesses.\n *\n * @param txSkeleton\n * @param inputCell\n * @param _fromInfo\n * @param options\n */\nexport async function setupInputCell(\n  txSkeleton: TransactionSkeletonType,\n  inputCell: Cell,\n  _fromInfo?: FromInfo,\n  {\n    config = undefined,\n    defaultWitness = \"0x\",\n    since = undefined,\n  }: Options & {\n    defaultWitness?: HexString;\n    since?: PackedSince;\n  } = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n\n  const fromScript = inputCell.cellOutput.lock;\n  if (!isOmnilockScript(fromScript, config)) {\n    throw new Error(`Not OMNILOCK input!`);\n  }\n\n  // add inputCell to txSkeleton\n  txSkeleton = txSkeleton.update(\"inputs\", (inputs) => {\n    return inputs.push(inputCell);\n  });\n\n  const output: Cell = {\n    cellOutput: {\n      capacity: inputCell.cellOutput.capacity,\n      lock: inputCell.cellOutput.lock,\n      type: inputCell.cellOutput.type,\n    },\n    data: inputCell.data,\n  };\n\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.push(output);\n  });\n\n  if (since) {\n    txSkeleton = txSkeleton.update(\"inputSinces\", (inputSinces) => {\n      return inputSinces.set(txSkeleton.get(\"inputs\").size - 1, since);\n    });\n  }\n\n  txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) => {\n    return witnesses.push(defaultWitness);\n  });\n\n  const template = config.SCRIPTS.OMNILOCK;\n  const secp256k1Template = config.SCRIPTS.SECP256K1_BLAKE160;\n  if (!template) {\n    throw new Error(`OMNILOCK script not defined in config!`);\n  }\n  if (!secp256k1Template) {\n    throw new Error(`SECP256K1_BLAKE160 script not defined in config!`);\n  }\n\n  const omnilockOutPoint: OutPoint = {\n    txHash: template.TX_HASH,\n    index: template.INDEX,\n  };\n  const secp256k1OutPoint: OutPoint = {\n    txHash: secp256k1Template.TX_HASH,\n    index: secp256k1Template.INDEX,\n  };\n\n  // add cell dep\n  txSkeleton = addCellDep(txSkeleton, {\n    outPoint: omnilockOutPoint,\n    depType: template.DEP_TYPE,\n  });\n  txSkeleton = addCellDep(txSkeleton, {\n    outPoint: secp256k1OutPoint,\n    depType: secp256k1Template.DEP_TYPE,\n  });\n\n  // add witness\n  /*\n   * Modify the skeleton, so the first witness of the fromAddress script group\n   * has a WitnessArgs construct with 85-byte zero filled values. While this\n   * is not required, it helps in transaction fee estimation.\n   */\n  const firstIndex = txSkeleton\n    .get(\"inputs\")\n    .findIndex((input) =>\n      new ScriptValue(input.cellOutput.lock, { validate: false }).equals(\n        new ScriptValue(fromScript, { validate: false })\n      )\n    );\n  if (firstIndex !== -1) {\n    while (firstIndex >= txSkeleton.get(\"witnesses\").size) {\n      txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) =>\n        witnesses.push(\"0x\")\n      );\n    }\n    let witness: string = txSkeleton.get(\"witnesses\").get(firstIndex)!;\n\n    const placeholderLength = (() => {\n      const identityFlag = bytes.bytify(inputCell.cellOutput.lock.args)[0];\n      switch (identityFlag) {\n        case IdentityFlagsType.IdentityFlagsSolana: {\n          return ED25519_SIGNATURE_PLACEHOLDER_LENGTH;\n        }\n\n        case IdentityFlagsType.IdentityFlagsCkb:\n        case IdentityFlagsType.IdentityFlagsEthereum:\n        case IdentityFlagsType.IdentityFlagsBitcoin: {\n          return SECP256K1_SIGNATURE_PLACEHOLDER_LENGTH;\n        }\n\n        default: {\n          throw new Error(\n            `Unsupported flag: ${identityFlag}, please check if the script.args is expected`\n          );\n        }\n      }\n    })();\n\n    const newWitnessArgs: WitnessArgs = {\n      lock: createWitnessLockPlaceholder(placeholderLength),\n    };\n\n    witness = bytes.hexify(blockchain.WitnessArgs.pack(newWitnessArgs));\n    txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) =>\n      witnesses.set(firstIndex, witness)\n    );\n  }\n\n  return txSkeleton;\n}\n\nfunction createWitnessLockPlaceholder(signatureLength: number) {\n  const serializedLength = OmnilockWitnessLock.pack({\n    signature: new Uint8Array(signatureLength),\n  }).byteLength;\n\n  return bytes.hexify(new Uint8Array(serializedLength));\n}\n\n/**\n * prepare for txSkeleton signingEntries, will update txSkeleton.get(\"signingEntries\")\n *\n * @param txSkeleton\n * @param options\n */\nexport function prepareSigningEntries(\n  txSkeleton: TransactionSkeletonType,\n  { config = undefined }: Options = {}\n): TransactionSkeletonType {\n  config = config || getConfig();\n\n  return _prepareSigningEntries(txSkeleton, config, \"OMNILOCK\");\n}\n\nexport { bitcoin };\nexport { solana };\n\nexport default {\n  prepareSigningEntries,\n  setupInputCell,\n  CellCollector,\n  OmnilockWitnessLock,\n  createOmnilockScript,\n};\n"],"mappings":"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","ignoreList":[]}