import { Config } from '@ckb-lumos/config-manager';
import { FromInfo } from '@ckb-lumos/common-scripts';
import { Hash, OutPoint, PackedSince, Script } from '@ckb-lumos/base';
import { Cell, helpers, HexString, Indexer, RPC } from '@ckb-lumos/lumos';
import { CKBComponents } from '@ckb-lumos/rpc/lib/types/api';
export declare function getCellByLock(props: {
    lock: Script;
    indexer: Indexer;
    has_type: boolean;
}): Promise<Cell | undefined>;
/**
 * Find and return the first cell of target type script from CKB Indexer.
 */
export declare function getCellByType(props: {
    type: Script;
    indexer: Indexer;
}): Promise<Cell | undefined>;
/**
 * A wrapper function, to get a Cell structure from RPC.getLiveCell() method.
 */
export declare function getCellWithStatusByOutPoint(props: {
    outPoint: OutPoint;
    rpc: RPC;
}): Promise<{
    cell?: Cell;
    status: CKBComponents.CellStatus;
}>;
/**
 * Inject a cell to Transaction.inputs, and to Transaction.outputs if needed.
 * The function also adds needed/supported witness placeholders and cellDeps.
 */
export declare function setupCell(props: {
    txSkeleton: helpers.TransactionSkeletonType;
    input: Cell;
    fromInfo?: FromInfo;
    addOutput?: boolean;
    updateOutput?(cell: Cell): Cell;
    defaultWitness?: HexString;
    updateWitness?: HexString | ((witness: HexString) => HexString);
    since?: PackedSince;
    config?: Config;
}): Promise<{
    txSkeleton: helpers.TransactionSkeletonType;
    inputIndex: number;
    outputIndex: number;
}>;
/**
 * Group cells by TypeScriptID.
 */
export declare function groupCells(cells: Cell[]): Record<Hash | 'null', {
    index: number;
    cell: Cell;
}[]>;
export declare function findCellIndexByScriptFromTransactionSkeleton(props: {
    txSkeleton: helpers.TransactionSkeletonType;
    source: 'inputs' | 'outputs';
    scriptName: 'lock' | 'type';
    script: Script;
}): number;
