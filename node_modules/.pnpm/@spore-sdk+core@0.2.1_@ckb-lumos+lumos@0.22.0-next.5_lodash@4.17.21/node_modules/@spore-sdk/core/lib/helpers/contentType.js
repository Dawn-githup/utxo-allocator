"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodeMutantParameter = exports.setContentTypeParameters = exports.decodeContentType = exports.encodeContentType = exports.isContentTypeValid = void 0;
const mimeType_1 = require("./mimeType");
/**
 * Check if the target ContentType's format is valid.
 * - A typical MIME example: "image/jpeg".
 * - A more complex example: "image/svg+xml;q=0.9,/;q=0.8".
 */
function isContentTypeValid(contentType) {
    try {
        const decoded = decodeContentType(contentType);
        const encoded = encodeContentType(decoded);
        return encoded === contentType;
    }
    catch {
        return false;
    }
}
exports.isContentTypeValid = isContentTypeValid;
/**
 * Convert ContentType object to string.
 *
 * @example
 * encodeContentType({
 *   type: 'image',
 *   subtype: 'svg+xml',
 *   parameters: {
 *     a: 1,
 *     b: 2,
 *   },
 * })
 * // image/svg+xml;a=1;b=2
 */
function encodeContentType(encodable) {
    const originalParameters = Object.entries(encodable.parameters || {});
    const parameters = originalParameters.map(([key, value]) => {
        if (key === 'mutant' || key === 'mutant[]') {
            [key, value] = encodeMutantParameter(key, value);
        }
        if (Array.isArray(value)) {
            value = value.map((row, index) => {
                if (typeof row !== 'string') {
                    if (!(row['toString'] instanceof Function)) {
                        throw new Error(`ContentType parameter "${key}" has a property that cannot be converted to string`);
                    }
                    row = row.toString();
                }
                return row;
            });
        }
        if (!Array.isArray(value) && typeof value !== 'string') {
            if (!(value['toString'] instanceof Function)) {
                throw new Error(`ContentType parameter "${key}" cannot be converted to string`);
            }
            value = value.toString();
        }
        return [key, value];
    });
    return (0, mimeType_1.serializeMimeType)({
        type: encodable.type,
        subtype: encodable.subtype,
        parameters: new Map(parameters),
    }, {
        arrayParameters: true,
    });
}
exports.encodeContentType = encodeContentType;
/**
 * Convert ContentType from string to object.
 *
 * @example
 * decodeContentType('image/svg+xml;a=1;b=2')
 * // {
 * //  type: 'image',
 * //  subtype: 'svg+xml',
 * //  mediaType: 'image/svg+xml',
 * //  parameters: { a: '1', b: '2' },
 * // }
 */
function decodeContentType(contentType) {
    let decoded = null;
    try {
        decoded = (0, mimeType_1.parseMimeType)(contentType, {
            arrayParameters: true,
        });
    }
    catch {
        // The error will be handled later
    }
    if (!decoded) {
        throw new Error(`Cannot decode ContentType: ${contentType}`);
    }
    const parameters = Object.fromEntries(decoded.parameters);
    if (parameters.mutant && Array.isArray(parameters.mutant)) {
        parameters.mutant = parameters.mutant.map((row) => {
            return !row.startsWith('0x') ? '0x' + row : row;
        });
    }
    return {
        type: decoded.type,
        subtype: decoded.subtype,
        mediaType: `${decoded.type}/${decoded.subtype}`,
        parameters,
    };
}
exports.decodeContentType = decodeContentType;
/**
 * Update the parameters of a content type string.
 * Note the function may change the order of the provided content type.
 *
 * @example
 * setContentTypeParameters('image/jpeg;a=1;b=2', { a: '3' });
 * // image/jpeg;a=3;b=2
 */
function setContentTypeParameters(contentType, parameters) {
    const decoded = decodeContentType(contentType);
    for (const [key, value] of Object.entries(parameters)) {
        decoded.parameters[key] = value;
    }
    return encodeContentType(decoded);
}
exports.setContentTypeParameters = setContentTypeParameters;
/**
 * Validate and convert parameters['mutant'] of ContentType to acceptable format.
 */
function encodeMutantParameter(key, value) {
    if (key === 'mutant[]') {
        key = 'mutant';
    }
    if (!Array.isArray(value)) {
        throw new Error(`ContentType parameter mutant should be an array`);
    }
    value = value.map((row, index) => {
        if (typeof row !== 'string') {
            if (!(row['toString'] instanceof Function)) {
                throw new Error(`ContentType parameter "${key}" has a property that cannot be converted to string`);
            }
            row = row.toString();
        }
        if (row.startsWith('0x')) {
            row = row.slice(2);
        }
        if (row.length !== 64) {
            throw new Error(`ContentType parameter mutant[${index}] should have a length of 32 bytes: ${row}`);
        }
        return row;
    });
    return [key, value];
}
exports.encodeMutantParameter = encodeMutantParameter;
//# sourceMappingURL=contentType.js.map