import { Address, OutPoint, PackedSince, Script } from '@ckb-lumos/base';
import { FromInfo } from '@ckb-lumos/common-scripts';
import { BI, BIish, Cell, helpers, HexString } from '@ckb-lumos/lumos';
import { injectNewSporeOutput, SporeDataProps } from '../..';
import { SporeConfig } from '../../../config';
export declare function meltThenCreateSpore(props: {
    outPoint: OutPoint;
    changeAddress?: Address;
    updateWitness?: HexString | ((witness: HexString) => HexString);
    defaultWitness?: HexString;
    since?: PackedSince;
    config?: SporeConfig;
    data: SporeDataProps;
    toLock: Script;
    fromInfos: FromInfo[];
    prefixInputs?: Cell[];
    prefixOutputs?: Cell[];
    postInputs?: Cell[];
    postOutputs?: Cell[];
    feeRate?: BIish | undefined;
    updateOutput?: (cell: Cell) => Cell;
    capacityMargin?: BIish | ((cell: Cell, margin: BI) => BIish);
    cluster?: {
        updateOutput?: (cell: Cell) => Cell;
        capacityMargin?: BIish | ((cell: Cell, margin: BI) => BIish);
        updateWitness?: HexString | ((witness: HexString) => HexString);
    };
    clusterAgentOutPoint?: OutPoint;
    clusterAgent?: {
        updateOutput?: (cell: Cell) => Cell;
        capacityMargin?: BIish | ((cell: Cell, margin: BI) => BIish);
        updateWitness?: HexString | ((witness: HexString) => HexString);
    };
    mutant?: {
        paymentAmount?: (minPayment: BI, lock: Script, cell: Cell) => BIish;
    };
    maxTransactionSize?: number | false;
}): Promise<{
    txSkeleton: helpers.TransactionSkeletonType;
    inputIndex: number;
    outputIndex: number;
    reference: Awaited<ReturnType<typeof injectNewSporeOutput>>['reference'];
    mutantReference: Awaited<ReturnType<typeof injectNewSporeOutput>>['mutantReference'];
}>;
export declare function meltMultipleThenCreateSpore(props: {
    outPoints: OutPoint[];
    changeAddress?: Address;
    updateWitness?: HexString | ((witness: HexString) => HexString);
    defaultWitness?: HexString;
    since?: PackedSince;
    config?: SporeConfig;
    data: SporeDataProps;
    toLock: Script;
    fromInfos: FromInfo[];
    prefixInputs?: Cell[];
    prefixOutputs?: Cell[];
    postInputs?: Cell[];
    postOutputs?: Cell[];
    feeRate?: BIish | undefined;
    updateOutput?: (cell: Cell) => Cell;
    capacityMargin?: BIish | ((cell: Cell, margin: BI) => BIish);
    cluster?: {
        updateOutput?: (cell: Cell) => Cell;
        capacityMargin?: BIish | ((cell: Cell, margin: BI) => BIish);
        updateWitness?: HexString | ((witness: HexString) => HexString);
    };
    clusterAgentOutPoint?: OutPoint;
    clusterAgent?: {
        updateOutput?: (cell: Cell) => Cell;
        capacityMargin?: BIish | ((cell: Cell, margin: BI) => BIish);
        updateWitness?: HexString | ((witness: HexString) => HexString);
    };
    mutant?: {
        paymentAmount?: (minPayment: BI, lock: Script, cell: Cell) => BIish;
    };
    maxTransactionSize?: number | false;
}): Promise<{
    txSkeleton: helpers.TransactionSkeletonType;
    inputIndexs: number[];
    outputIndex: number;
    reference: Awaited<ReturnType<typeof injectNewSporeOutput>>['reference'];
    mutantReference: Awaited<ReturnType<typeof injectNewSporeOutput>>['mutantReference'];
}>;
