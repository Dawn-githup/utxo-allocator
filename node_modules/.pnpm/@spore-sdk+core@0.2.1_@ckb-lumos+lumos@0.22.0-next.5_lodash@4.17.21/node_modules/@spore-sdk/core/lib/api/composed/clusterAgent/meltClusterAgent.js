"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.meltClusterAgent = void 0;
const lumos_1 = require("@ckb-lumos/lumos");
const helpers_1 = require("../../../helpers");
const config_1 = require("../../../config");
const cobuild_1 = require("../../../cobuild");
const __1 = require("../..");
async function meltClusterAgent(props) {
    // Env
    const config = props.config ?? (0, config_1.getSporeConfig)();
    const indexer = new lumos_1.Indexer(config.ckbIndexerUrl, config.ckbNodeUrl);
    // TransactionSkeleton
    let txSkeleton = lumos_1.helpers.TransactionSkeleton({
        cellProvider: indexer,
    });
    // Get ClusterAgent cell
    const clusterAgentCell = await (0, __1.getClusterAgentByOutPoint)(props.outPoint, config);
    const clusterAgentScript = (0, config_1.getSporeScript)(config, 'ClusterAgent', clusterAgentCell.cellOutput.type);
    // Inject target cell to Transaction.inputs
    const injectLiveClusterAgentCellResult = await (0, __1.injectLiveClusterAgentCell)({
        txSkeleton,
        cell: clusterAgentCell,
        updateWitness: props.updateWitness,
        config,
    });
    txSkeleton = injectLiveClusterAgentCellResult.txSkeleton;
    // Inject CobuildProof
    if (clusterAgentScript.behaviors?.cobuild) {
        const actionResult = (0, cobuild_1.generateMeltClusterAgentAction)({
            txSkeleton,
            inputIndex: injectLiveClusterAgentCellResult.inputIndex,
        });
        const injectCobuildProofResult = (0, cobuild_1.injectCommonCobuildProof)({
            txSkeleton,
            actions: actionResult.actions,
        });
        txSkeleton = injectCobuildProofResult.txSkeleton;
    }
    // Redeem occupied capacity from the melted cell
    const targetCellAddress = lumos_1.helpers.encodeToAddress(clusterAgentCell.cellOutput.lock, { config: config.lumos });
    const returnExceededCapacityAndPayFeeResult = await (0, helpers_1.returnExceededCapacityAndPayFee)({
        changeAddress: props.changeAddress ?? targetCellAddress,
        txSkeleton,
        config,
    });
    txSkeleton = returnExceededCapacityAndPayFeeResult.txSkeleton;
    return {
        txSkeleton,
        inputIndex: injectLiveClusterAgentCellResult.inputIndex,
    };
}
exports.meltClusterAgent = meltClusterAgent;
//# sourceMappingURL=meltClusterAgent.js.map