import { BIish } from '@ckb-lumos/bi';
import { Script } from '@ckb-lumos/base';
import { BytesLike } from '@ckb-lumos/codec';
import { Address, BI, Cell, Hash, helpers, HexString, PackedSince } from '@ckb-lumos/lumos';
import { SporeConfig } from '../../../config';
import { EncodableContentType } from '../../../helpers';
import { FromInfo } from '@ckb-lumos/lumos/common-scripts';
export interface SporeDataProps {
    contentType: string;
    contentTypeParameters?: EncodableContentType['parameters'];
    content: BytesLike;
    clusterId?: Hash;
}
export declare function injectNewSporeOutput(props: {
    txSkeleton: helpers.TransactionSkeletonType;
    data: SporeDataProps;
    toLock: Script;
    fromInfos: FromInfo[];
    extraOutputLocks?: Script[];
    changeAddress?: Address;
    updateOutput?: (cell: Cell) => Cell;
    capacityMargin?: BIish | ((cell: Cell, margin: BI) => BIish);
    cluster?: {
        updateOutput?: (cell: Cell) => Cell;
        capacityMargin?: BIish | ((cell: Cell, margin: BI) => BIish);
        updateWitness?: HexString | ((witness: HexString) => HexString);
        defaultWitness?: HexString;
        since?: PackedSince;
    };
    clusterAgentCell?: Cell;
    clusterAgent?: {
        updateOutput?: (cell: Cell) => Cell;
        capacityMargin?: BIish | ((cell: Cell, margin: BI) => BIish);
        updateWitness?: HexString | ((witness: HexString) => HexString);
        defaultWitness?: HexString;
        since?: PackedSince;
    };
    skipCheckContentType?: boolean;
    mutant?: {
        paymentAmount?: (minPayment: BI, lock: Script, cell: Cell) => BIish;
    };
    config?: SporeConfig;
}): Promise<{
    txSkeleton: helpers.TransactionSkeletonType;
    outputIndex: number;
    hasId: boolean;
    reference: {
        referenceTarget: 'cluster' | 'clusterAgent' | 'none';
        referenceType?: 'cell' | 'lockProxy';
        cluster?: {
            inputIndex: number;
            outputIndex: number;
        };
        clusterAgent?: {
            inputIndex: number;
            outputIndex: number;
        };
    };
    mutantReference?: {
        referenceType: 'payment' | 'none';
        payment?: {
            outputIndices: number[];
        };
    };
}>;
