import { molecule } from '@ckb-lumos/codec';
export declare const Action: molecule.ObjectLayoutCodec<{
    scriptInfoHash: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
    scriptHash: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
    data: import("@ckb-lumos/codec/lib/base").BytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
}>;
export declare const ActionVec: molecule.ArrayLayoutCodec<molecule.ObjectLayoutCodec<{
    scriptInfoHash: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
    scriptHash: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
    data: import("@ckb-lumos/codec/lib/base").BytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
}>>;
export declare const Message: molecule.ObjectLayoutCodec<{
    actions: molecule.ArrayLayoutCodec<molecule.ObjectLayoutCodec<{
        scriptInfoHash: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
        scriptHash: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
        data: import("@ckb-lumos/codec/lib/base").BytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
    }>>;
}>;
export declare const ResolvedInputs: molecule.ObjectLayoutCodec<{
    outputs: molecule.ArrayLayoutCodec<molecule.ObjectLayoutCodec<{
        capacity: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, import("@ckb-lumos/bi").BIish>;
        lock: molecule.ObjectLayoutCodec<{
            codeHash: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
            hashType: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<import("@ckb-lumos/base").HashType, import("@ckb-lumos/base").HashType>;
            args: import("@ckb-lumos/codec/lib/base").BytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
        }>;
        type: molecule.OptionLayoutCodec<molecule.ObjectLayoutCodec<{
            codeHash: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
            hashType: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<import("@ckb-lumos/base").HashType, import("@ckb-lumos/base").HashType>;
            args: import("@ckb-lumos/codec/lib/base").BytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
        }>>;
    }>>;
    outputsData: molecule.ArrayLayoutCodec<import("@ckb-lumos/codec/lib/base").BytesCodec<string, import("@ckb-lumos/codec").BytesLike>>;
}>;
export declare const ScriptInfo: molecule.ObjectLayoutCodec<{
    name: import("@ckb-lumos/codec/lib/base").BytesCodec<string, string>;
    url: import("@ckb-lumos/codec/lib/base").BytesCodec<string, string>;
    scriptHash: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
    schema: import("@ckb-lumos/codec/lib/base").BytesCodec<string, string>;
    messageType: import("@ckb-lumos/codec/lib/base").BytesCodec<string, string>;
}>;
export declare const ScriptInfoVec: molecule.ArrayLayoutCodec<molecule.ObjectLayoutCodec<{
    name: import("@ckb-lumos/codec/lib/base").BytesCodec<string, string>;
    url: import("@ckb-lumos/codec/lib/base").BytesCodec<string, string>;
    scriptHash: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
    schema: import("@ckb-lumos/codec/lib/base").BytesCodec<string, string>;
    messageType: import("@ckb-lumos/codec/lib/base").BytesCodec<string, string>;
}>>;
export declare const BuildingPacketV1: molecule.ObjectLayoutCodec<{
    message: molecule.ObjectLayoutCodec<{
        actions: molecule.ArrayLayoutCodec<molecule.ObjectLayoutCodec<{
            scriptInfoHash: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
            scriptHash: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
            data: import("@ckb-lumos/codec/lib/base").BytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
        }>>;
    }>;
    payload: import("@ckb-lumos/codec/lib/base").BytesCodec<Partial<Pick<{
        version: string;
        cellDeps: (Partial<Pick<{
            outPoint: Partial<Pick<{
                txHash: string;
                index: string;
            }, never>> & Pick<{
                txHash: string;
                index: string;
            }, "index" | "txHash">;
            depType: import("@ckb-lumos/base").DepType;
        }, never>> & Pick<{
            outPoint: Partial<Pick<{
                txHash: string;
                index: string;
            }, never>> & Pick<{
                txHash: string;
                index: string;
            }, "index" | "txHash">;
            depType: import("@ckb-lumos/base").DepType;
        }, "outPoint" | "depType">)[];
        headerDeps: string[];
        inputs: (Partial<Pick<{
            since: string;
            previousOutput: Partial<Pick<{
                txHash: string;
                index: string;
            }, never>> & Pick<{
                txHash: string;
                index: string;
            }, "index" | "txHash">;
        }, never>> & Pick<{
            since: string;
            previousOutput: Partial<Pick<{
                txHash: string;
                index: string;
            }, never>> & Pick<{
                txHash: string;
                index: string;
            }, "index" | "txHash">;
        }, "since" | "previousOutput">)[];
        outputs: (Partial<Pick<{
            capacity: string;
            lock: Partial<Pick<{
                codeHash: string;
                hashType: import("@ckb-lumos/base").HashType;
                args: string;
            }, never>> & Pick<{
                codeHash: string;
                hashType: import("@ckb-lumos/base").HashType;
                args: string;
            }, "args" | "codeHash" | "hashType">;
            type: (Partial<Pick<{
                codeHash: string;
                hashType: import("@ckb-lumos/base").HashType;
                args: string;
            }, never>> & Pick<{
                codeHash: string;
                hashType: import("@ckb-lumos/base").HashType;
                args: string;
            }, "args" | "codeHash" | "hashType">) | undefined;
        }, "type">> & Pick<{
            capacity: string;
            lock: Partial<Pick<{
                codeHash: string;
                hashType: import("@ckb-lumos/base").HashType;
                args: string;
            }, never>> & Pick<{
                codeHash: string;
                hashType: import("@ckb-lumos/base").HashType;
                args: string;
            }, "args" | "codeHash" | "hashType">;
            type: (Partial<Pick<{
                codeHash: string;
                hashType: import("@ckb-lumos/base").HashType;
                args: string;
            }, never>> & Pick<{
                codeHash: string;
                hashType: import("@ckb-lumos/base").HashType;
                args: string;
            }, "args" | "codeHash" | "hashType">) | undefined;
        }, "lock" | "capacity">)[];
        outputsData: string[];
    }, never>> & Pick<{
        version: string;
        cellDeps: (Partial<Pick<{
            outPoint: Partial<Pick<{
                txHash: string;
                index: string;
            }, never>> & Pick<{
                txHash: string;
                index: string;
            }, "index" | "txHash">;
            depType: import("@ckb-lumos/base").DepType;
        }, never>> & Pick<{
            outPoint: Partial<Pick<{
                txHash: string;
                index: string;
            }, never>> & Pick<{
                txHash: string;
                index: string;
            }, "index" | "txHash">;
            depType: import("@ckb-lumos/base").DepType;
        }, "outPoint" | "depType">)[];
        headerDeps: string[];
        inputs: (Partial<Pick<{
            since: string;
            previousOutput: Partial<Pick<{
                txHash: string;
                index: string;
            }, never>> & Pick<{
                txHash: string;
                index: string;
            }, "index" | "txHash">;
        }, never>> & Pick<{
            since: string;
            previousOutput: Partial<Pick<{
                txHash: string;
                index: string;
            }, never>> & Pick<{
                txHash: string;
                index: string;
            }, "index" | "txHash">;
        }, "since" | "previousOutput">)[];
        outputs: (Partial<Pick<{
            capacity: string;
            lock: Partial<Pick<{
                codeHash: string;
                hashType: import("@ckb-lumos/base").HashType;
                args: string;
            }, never>> & Pick<{
                codeHash: string;
                hashType: import("@ckb-lumos/base").HashType;
                args: string;
            }, "args" | "codeHash" | "hashType">;
            type: (Partial<Pick<{
                codeHash: string;
                hashType: import("@ckb-lumos/base").HashType;
                args: string;
            }, never>> & Pick<{
                codeHash: string;
                hashType: import("@ckb-lumos/base").HashType;
                args: string;
            }, "args" | "codeHash" | "hashType">) | undefined;
        }, "type">> & Pick<{
            capacity: string;
            lock: Partial<Pick<{
                codeHash: string;
                hashType: import("@ckb-lumos/base").HashType;
                args: string;
            }, never>> & Pick<{
                codeHash: string;
                hashType: import("@ckb-lumos/base").HashType;
                args: string;
            }, "args" | "codeHash" | "hashType">;
            type: (Partial<Pick<{
                codeHash: string;
                hashType: import("@ckb-lumos/base").HashType;
                args: string;
            }, never>> & Pick<{
                codeHash: string;
                hashType: import("@ckb-lumos/base").HashType;
                args: string;
            }, "args" | "codeHash" | "hashType">) | undefined;
        }, "lock" | "capacity">)[];
        outputsData: string[];
    }, "cellDeps" | "headerDeps" | "inputs" | "outputs" | "version" | "outputsData"> & {
        witnesses: string[];
    }, import("@ckb-lumos/base").Transaction>;
    resolvedInputs: molecule.ObjectLayoutCodec<{
        outputs: molecule.ArrayLayoutCodec<molecule.ObjectLayoutCodec<{
            capacity: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, import("@ckb-lumos/bi").BIish>;
            lock: molecule.ObjectLayoutCodec<{
                codeHash: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
                hashType: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<import("@ckb-lumos/base").HashType, import("@ckb-lumos/base").HashType>;
                args: import("@ckb-lumos/codec/lib/base").BytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
            }>;
            type: molecule.OptionLayoutCodec<molecule.ObjectLayoutCodec<{
                codeHash: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
                hashType: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<import("@ckb-lumos/base").HashType, import("@ckb-lumos/base").HashType>;
                args: import("@ckb-lumos/codec/lib/base").BytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
            }>>;
        }>>;
        outputsData: molecule.ArrayLayoutCodec<import("@ckb-lumos/codec/lib/base").BytesCodec<string, import("@ckb-lumos/codec").BytesLike>>;
    }>;
    changeOutput: molecule.OptionLayoutCodec<import("@ckb-lumos/codec/lib/base").FixedBytesCodec<number, import("@ckb-lumos/bi").BIish>>;
    scriptInfos: molecule.ArrayLayoutCodec<molecule.ObjectLayoutCodec<{
        name: import("@ckb-lumos/codec/lib/base").BytesCodec<string, string>;
        url: import("@ckb-lumos/codec/lib/base").BytesCodec<string, string>;
        scriptHash: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
        schema: import("@ckb-lumos/codec/lib/base").BytesCodec<string, string>;
        messageType: import("@ckb-lumos/codec/lib/base").BytesCodec<string, string>;
    }>>;
    lockActions: molecule.ArrayLayoutCodec<molecule.ObjectLayoutCodec<{
        scriptInfoHash: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
        scriptHash: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
        data: import("@ckb-lumos/codec/lib/base").BytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
    }>>;
}>;
export declare const BuildingPacket: molecule.UnionLayoutCodec<{
    BuildingPacketV1: molecule.ObjectLayoutCodec<{
        message: molecule.ObjectLayoutCodec<{
            actions: molecule.ArrayLayoutCodec<molecule.ObjectLayoutCodec<{
                scriptInfoHash: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
                scriptHash: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
                data: import("@ckb-lumos/codec/lib/base").BytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
            }>>;
        }>;
        payload: import("@ckb-lumos/codec/lib/base").BytesCodec<Partial<Pick<{
            version: string;
            cellDeps: (Partial<Pick<{
                outPoint: Partial<Pick<{
                    txHash: string;
                    index: string;
                }, never>> & Pick<{
                    txHash: string;
                    index: string;
                }, "index" | "txHash">;
                depType: import("@ckb-lumos/base").DepType;
            }, never>> & Pick<{
                outPoint: Partial<Pick<{
                    txHash: string;
                    index: string;
                }, never>> & Pick<{
                    txHash: string;
                    index: string;
                }, "index" | "txHash">;
                depType: import("@ckb-lumos/base").DepType;
            }, "outPoint" | "depType">)[];
            headerDeps: string[];
            inputs: (Partial<Pick<{
                since: string;
                previousOutput: Partial<Pick<{
                    txHash: string;
                    index: string;
                }, never>> & Pick<{
                    txHash: string;
                    index: string;
                }, "index" | "txHash">;
            }, never>> & Pick<{
                since: string;
                previousOutput: Partial<Pick<{
                    txHash: string;
                    index: string;
                }, never>> & Pick<{
                    txHash: string;
                    index: string;
                }, "index" | "txHash">;
            }, "since" | "previousOutput">)[];
            outputs: (Partial<Pick<{
                capacity: string;
                lock: Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/base").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/base").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">;
                type: (Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/base").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/base").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">) | undefined;
            }, "type">> & Pick<{
                capacity: string;
                lock: Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/base").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/base").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">;
                type: (Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/base").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/base").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">) | undefined;
            }, "lock" | "capacity">)[];
            outputsData: string[];
        }, never>> & Pick<{
            version: string;
            cellDeps: (Partial<Pick<{
                outPoint: Partial<Pick<{
                    txHash: string;
                    index: string;
                }, never>> & Pick<{
                    txHash: string;
                    index: string;
                }, "index" | "txHash">;
                depType: import("@ckb-lumos/base").DepType;
            }, never>> & Pick<{
                outPoint: Partial<Pick<{
                    txHash: string;
                    index: string;
                }, never>> & Pick<{
                    txHash: string;
                    index: string;
                }, "index" | "txHash">;
                depType: import("@ckb-lumos/base").DepType;
            }, "outPoint" | "depType">)[];
            headerDeps: string[];
            inputs: (Partial<Pick<{
                since: string;
                previousOutput: Partial<Pick<{
                    txHash: string;
                    index: string;
                }, never>> & Pick<{
                    txHash: string;
                    index: string;
                }, "index" | "txHash">;
            }, never>> & Pick<{
                since: string;
                previousOutput: Partial<Pick<{
                    txHash: string;
                    index: string;
                }, never>> & Pick<{
                    txHash: string;
                    index: string;
                }, "index" | "txHash">;
            }, "since" | "previousOutput">)[];
            outputs: (Partial<Pick<{
                capacity: string;
                lock: Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/base").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/base").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">;
                type: (Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/base").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/base").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">) | undefined;
            }, "type">> & Pick<{
                capacity: string;
                lock: Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/base").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/base").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">;
                type: (Partial<Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/base").HashType;
                    args: string;
                }, never>> & Pick<{
                    codeHash: string;
                    hashType: import("@ckb-lumos/base").HashType;
                    args: string;
                }, "args" | "codeHash" | "hashType">) | undefined;
            }, "lock" | "capacity">)[];
            outputsData: string[];
        }, "cellDeps" | "headerDeps" | "inputs" | "outputs" | "version" | "outputsData"> & {
            witnesses: string[];
        }, import("@ckb-lumos/base").Transaction>;
        resolvedInputs: molecule.ObjectLayoutCodec<{
            outputs: molecule.ArrayLayoutCodec<molecule.ObjectLayoutCodec<{
                capacity: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, import("@ckb-lumos/bi").BIish>;
                lock: molecule.ObjectLayoutCodec<{
                    codeHash: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
                    hashType: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<import("@ckb-lumos/base").HashType, import("@ckb-lumos/base").HashType>;
                    args: import("@ckb-lumos/codec/lib/base").BytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
                }>;
                type: molecule.OptionLayoutCodec<molecule.ObjectLayoutCodec<{
                    codeHash: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
                    hashType: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<import("@ckb-lumos/base").HashType, import("@ckb-lumos/base").HashType>;
                    args: import("@ckb-lumos/codec/lib/base").BytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
                }>>;
            }>>;
            outputsData: molecule.ArrayLayoutCodec<import("@ckb-lumos/codec/lib/base").BytesCodec<string, import("@ckb-lumos/codec").BytesLike>>;
        }>;
        changeOutput: molecule.OptionLayoutCodec<import("@ckb-lumos/codec/lib/base").FixedBytesCodec<number, import("@ckb-lumos/bi").BIish>>;
        scriptInfos: molecule.ArrayLayoutCodec<molecule.ObjectLayoutCodec<{
            name: import("@ckb-lumos/codec/lib/base").BytesCodec<string, string>;
            url: import("@ckb-lumos/codec/lib/base").BytesCodec<string, string>;
            scriptHash: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
            schema: import("@ckb-lumos/codec/lib/base").BytesCodec<string, string>;
            messageType: import("@ckb-lumos/codec/lib/base").BytesCodec<string, string>;
        }>>;
        lockActions: molecule.ArrayLayoutCodec<molecule.ObjectLayoutCodec<{
            scriptInfoHash: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
            scriptHash: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
            data: import("@ckb-lumos/codec/lib/base").BytesCodec<string, import("@ckb-lumos/codec").BytesLike>;
        }>>;
    }>;
}>;
