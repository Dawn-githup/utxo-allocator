import { __rest } from "tslib";
import { scriptToHash, JSBI, EMPTY_WITNESS_ARGS, assertToBeHexStringOrBigint } from '@nervosnetwork/ckb-sdk-utils';
const EMPTY_DATA = '0x';
const MIN_CELL_CAPACITY = `0x${(6100000000).toString(16)}`;
export const getBigInts = ({ fee, capacityThreshold, changeThreshold }) => {
    assertToBeHexStringOrBigint(fee);
    assertToBeHexStringOrBigint(capacityThreshold);
    assertToBeHexStringOrBigint(changeThreshold);
    return {
        targetFee: JSBI.BigInt(`${fee}`),
        minCapacity: JSBI.BigInt(`${capacityThreshold}`),
        minChange: JSBI.BigInt(`${changeThreshold}`),
        zeroBigInt: JSBI.BigInt(0),
    };
};
export const getKeyAndCellsPairs = (params) => {
    const inputScripts = 'inputScript' in params ? [params.inputScript] : params.inputScripts;
    const outputs = 'outputScript' in params ? [{ lock: params.outputScript, capacity: params.capacity }] : params.outputs;
    let unspentCellsMap = new Map();
    if ('inputScript' in params) {
        const lockHash = scriptToHash(params.inputScript);
        unspentCellsMap.set(lockHash, params.cells || []);
    }
    else {
        unspentCellsMap = params.cells || new Map();
    }
    return { inputScripts, outputs, unspentCellsMap };
};
export const getTargetOutputs = ({ outputs, minCapacity, }) => {
    return outputs.map(output => {
        const capacity = JSBI.BigInt(`${output.capacity}`);
        if (JSBI.lessThan(capacity, minCapacity)) {
            throw new Error(`Capacity should be at least ${minCapacity} shannon`);
        }
        return Object.assign(Object.assign({}, output), { capacity });
    });
};
export const getInputs = ({ inputScripts, safeMode, costCapacity, unspentCellsMap, }) => {
    const inputs = [];
    let sum = JSBI.BigInt(0);
    for (let i = 0; i < inputScripts.length; i++) {
        const lockhash = scriptToHash(inputScripts[i]);
        const unspentCells = unspentCellsMap.get(lockhash) || [];
        for (let j = 0; j < unspentCells.length; j++) {
            const c = unspentCells[j];
            if (!safeMode || (c.data === EMPTY_DATA && !c.type)) {
                inputs.push({ previousOutput: c.outPoint, since: '0x0', lockhash });
                sum = JSBI.add(sum, JSBI.BigInt(c.capacity));
                if (JSBI.greaterThanOrEqual(sum, costCapacity)) {
                    break;
                }
            }
        }
        if (JSBI.greaterThan(sum, costCapacity)) {
            break;
        }
    }
    if (JSBI.lessThan(sum, costCapacity)) {
        throw new Error('Input capacity is not enough');
    }
    return { inputs, sum };
};
export const getLeftCells = ({ usedCells, inputScripts, unspentCellsMap, }) => {
    const leftCells = [];
    const isCellUsed = (cell) => usedCells.some(used => { var _a, _b, _c, _d; return ((_a = used.previousOutput) === null || _a === void 0 ? void 0 : _a.txHash) === ((_b = cell.outPoint) === null || _b === void 0 ? void 0 : _b.txHash) && ((_c = used.previousOutput) === null || _c === void 0 ? void 0 : _c.index) === ((_d = cell.outPoint) === null || _d === void 0 ? void 0 : _d.index); });
    inputScripts.forEach(script => {
        const lockhash = scriptToHash(script);
        const cells = unspentCellsMap.get(lockhash);
        if (cells === null || cells === void 0 ? void 0 : cells.length) {
            cells.forEach(cell => {
                if (cell.data === EMPTY_DATA && !cell.type && !isCellUsed(cell)) {
                    leftCells.push({
                        outPoint: cell.outPoint,
                        capacity: cell.capacity,
                    });
                }
            });
        }
    });
    return leftCells;
};
const isFee = (fee) => typeof fee !== 'object';
const generateRawTransaction = (_a) => {
    var _b, _c;
    var { fee = '0x0', changeLockScript, safeMode = true, deps, capacityThreshold = MIN_CELL_CAPACITY, changeThreshold = MIN_CELL_CAPACITY } = _a, params = __rest(_a, ["fee", "changeLockScript", "safeMode", "deps", "capacityThreshold", "changeThreshold"]);
    if (!deps) {
        throw new Error('The dep is not loaded');
    }
    const { targetFee, minCapacity, minChange, zeroBigInt } = getBigInts({
        fee: isFee(fee) ? fee : '0x0',
        capacityThreshold,
        changeThreshold,
    });
    const { inputScripts, outputs: toOutputs, unspentCellsMap } = getKeyAndCellsPairs(params);
    const targetOutputs = getTargetOutputs({ outputs: toOutputs, minCapacity });
    const targetCapacity = targetOutputs.reduce((acc, o) => JSBI.add(acc, o.capacity), zeroBigInt);
    const costCapacity = JSBI.add(JSBI.add(targetCapacity, targetFee), minChange);
    const changeOutput = {
        capacity: zeroBigInt,
        lock: changeLockScript || inputScripts[0],
    };
    const { inputs, sum: inputSum } = getInputs({ inputScripts, safeMode, costCapacity, unspentCellsMap });
    if (JSBI.greaterThan(inputSum, JSBI.add(targetCapacity, targetFee))) {
        changeOutput.capacity = JSBI.subtract(JSBI.subtract(inputSum, targetCapacity), targetFee);
    }
    const outputs = targetOutputs.map(o => (Object.assign(Object.assign({}, o), { capacity: `0x${o.capacity.toString(16)}` })));
    if (JSBI.greaterThan(changeOutput.capacity, zeroBigInt)) {
        outputs.push(Object.assign(Object.assign({}, changeOutput), { capacity: `0x${changeOutput.capacity.toString(16)}` }));
    }
    const cellDeps = Array.isArray(deps) ? deps : [deps];
    const witnesses = (_b = params.witnesses) !== null && _b !== void 0 ? _b : [];
    inputs.forEach((input, idx) => {
        var _a;
        if (!witnesses[idx]) {
            witnesses[idx] = input.lockhash !== ((_a = inputs[idx - 1]) === null || _a === void 0 ? void 0 : _a.lockhash) ? EMPTY_WITNESS_ARGS : '0x';
        }
    });
    const outputsData = (_c = params.outputsData) !== null && _c !== void 0 ? _c : [];
    outputs.forEach((_, idx) => {
        if (!outputsData[idx]) {
            outputsData[idx] = '0x';
        }
    });
    const tx = {
        version: '0x0',
        cellDeps: cellDeps.map(dep => ({ outPoint: dep.outPoint, depType: dep.depType })),
        headerDeps: [],
        inputs: inputs.map(({ previousOutput, since }) => ({ previousOutput, since })),
        outputs,
        witnesses,
        outputsData,
    };
    if (!isFee(fee)) {
        const leftCells = getLeftCells({ inputScripts, usedCells: tx.inputs, unspentCellsMap });
        return fee.reconciler({ tx, feeRate: fee.feeRate, changeThreshold, cells: leftCells, extraCount: 10 });
    }
    return tx;
};
export default generateRawTransaction;
//# sourceMappingURL=generateRawTransaction.js.map