"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ckb_sdk_utils_1 = require("@nervosnetwork/ckb-sdk-utils");
const multisig_js_1 = require("./multisig.js");
function signWitnessGroup(sk, transactionHash, witnessGroup, multisigConfig) {
    if (!witnessGroup.length) {
        throw new Error('WitnessGroup cannot be empty');
    }
    if (typeof witnessGroup[0] !== 'object') {
        throw new Error('The first witness in the group should be type of WitnessArgs');
    }
    const emptyWitness = Object.assign(Object.assign({}, witnessGroup[0]), { lock: `0x${'0'.repeat(130)}` });
    if (multisigConfig) {
        emptyWitness.lock = `${(0, multisig_js_1.serializeMultisigConfig)(multisigConfig)}${'0'.repeat(130 * multisigConfig.m)}`;
    }
    const serializedEmptyWitnessBytes = (0, ckb_sdk_utils_1.hexToBytes)((0, ckb_sdk_utils_1.serializeWitnessArgs)(emptyWitness));
    const serializedEmptyWitnessSize = serializedEmptyWitnessBytes.length;
    const s = (0, ckb_sdk_utils_1.blake2b)(32, null, null, ckb_sdk_utils_1.PERSONAL);
    s.update((0, ckb_sdk_utils_1.hexToBytes)(transactionHash));
    s.update((0, ckb_sdk_utils_1.hexToBytes)((0, ckb_sdk_utils_1.toUint64Le)(`0x${serializedEmptyWitnessSize.toString(16)}`)));
    s.update(serializedEmptyWitnessBytes);
    witnessGroup.slice(1).forEach(w => {
        const bytes = (0, ckb_sdk_utils_1.hexToBytes)(typeof w === 'string' ? w : (0, ckb_sdk_utils_1.serializeWitnessArgs)(w));
        s.update((0, ckb_sdk_utils_1.hexToBytes)((0, ckb_sdk_utils_1.toUint64Le)(`0x${bytes.length.toString(16)}`)));
        s.update(bytes);
    });
    const message = `0x${s.digest('hex')}`;
    if (typeof sk === 'string') {
        const keyPair = new ckb_sdk_utils_1.ECPair(sk);
        emptyWitness.lock = keyPair.signRecoverable(message);
        return [multisigConfig ? emptyWitness : (0, ckb_sdk_utils_1.serializeWitnessArgs)(emptyWitness), ...witnessGroup.slice(1)];
    }
    else {
        const skResult = sk(message, [emptyWitness, ...witnessGroup.slice(1)]);
        if (typeof skResult === 'string') {
            emptyWitness.lock = skResult;
            return [multisigConfig ? emptyWitness : (0, ckb_sdk_utils_1.serializeWitnessArgs)(emptyWitness), ...witnessGroup.slice(1)];
        }
        return skResult.then(res => {
            emptyWitness.lock = res;
            return [multisigConfig ? emptyWitness : (0, ckb_sdk_utils_1.serializeWitnessArgs)(emptyWitness), ...witnessGroup.slice(1)];
        });
    }
}
exports.default = signWitnessGroup;
//# sourceMappingURL=signWitnessGroup.js.map