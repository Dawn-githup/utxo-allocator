export type Promisable<T> = PromiseLike<T> | T;
type KeyOf<T> = keyof T & string;
/**
 * key-value storage
 */
export interface Store<Schema = any> {
    hasItem<K extends KeyOf<Schema>>(key: K): Promisable<boolean>;
    getItem<K extends KeyOf<Schema>>(key: K): Promisable<Schema[K] | undefined>;
    removeItem<K extends KeyOf<Schema>>(key: K): Promisable<void>;
    setItem<K extends KeyOf<Schema>>(key: K, value: Schema[K]): Promisable<void>;
}
export declare function createInMemoryStorage<S>(): Store<S>;
export {};
//# sourceMappingURL=store.d.ts.map