{"version":3,"file":"base.js","names":["_codec","require","_utils","createModelHelper","codec","create","val","unpack","pack","hash","bytes","bytify","ckbHash","equals","a","b","equal","clone","defaultDeepClone","value","valType","Array","isArray","map","Object","entries","reduce","result","key","assign","Error","String"],"sources":["../../src/models/base.ts"],"sourcesContent":["import { bytes } from \"@ckb-lumos/codec\";\nimport { BytesCodec } from \"@ckb-lumos/codec/lib/base\";\nimport { ckbHash } from \"@ckb-lumos/base/lib/utils\";\n\n/**\n * A helper object that provides common functionalities, such as create(clone), equals, hash, etc. for models.\n */\nexport type ModelHelper<Model, ModelLike = Model> = {\n  /**\n   * create a Model from a ModelLike\n   * @param modelLike\n   */\n  create(modelLike: ModelLike): Model;\n  /**\n   * check if the two models are equals\n   * @param modelLike\n   * @param modelR\n   */\n  equals(modelLike: ModelLike, modelR: ModelLike): boolean;\n  /**\n   * create the hash of the model\n   * @param modelLike\n   */\n  hash(modelLike: ModelLike): Uint8Array;\n\n  /**\n   * clone a model\n   * @param model\n   */\n  clone(model: Model): Model;\n};\n\n/**\n * create a {@link ModelHelper} with a {@link BytesCodec}\n * @param codec\n */\nexport function createModelHelper<Model, ModelLike>(\n  codec: BytesCodec<Model, ModelLike>\n): ModelHelper<Model, ModelLike> {\n  return {\n    create: (val) => codec.unpack(codec.pack(val)),\n    hash: (val) => bytes.bytify(ckbHash(codec.pack(val))),\n    equals: (a, b) => bytes.equal(codec.pack(a), codec.pack(b)),\n    clone: defaultDeepClone,\n  };\n}\n\n/**\n * @internal\n */\nexport function defaultDeepClone<T>(value: T): T {\n  const valType = typeof value;\n\n  if (\n    valType === \"number\" ||\n    valType === \"string\" ||\n    valType === \"boolean\" ||\n    valType === \"bigint\" ||\n    value == null\n  ) {\n    return value;\n  } else if (Array.isArray(value)) {\n    return value.map(defaultDeepClone) as T;\n  } else if (valType === \"object\") {\n    return Object.entries(value).reduce(\n      (result, [key, value]) =>\n        Object.assign(result, { [key]: defaultDeepClone(value) }),\n      {}\n    ) as T;\n  }\n\n  throw new Error(\"Cannot clone the value: \" + String(value));\n}\n"],"mappings":";;;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAEA,IAAAC,MAAA,GAAAD,OAAA;AAEA;AACA;AACA;;AA0BA;AACA;AACA;AACA;AACO,SAASE,iBAAiBA,CAC/BC,KAAmC,EACJ;EAC/B,OAAO;IACLC,MAAM,EAAGC,GAAG,IAAKF,KAAK,CAACG,MAAM,CAACH,KAAK,CAACI,IAAI,CAACF,GAAG,CAAC,CAAC;IAC9CG,IAAI,EAAGH,GAAG,IAAKI,YAAK,CAACC,MAAM,CAAC,IAAAC,cAAO,EAACR,KAAK,CAACI,IAAI,CAACF,GAAG,CAAC,CAAC,CAAC;IACrDO,MAAM,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKL,YAAK,CAACM,KAAK,CAACZ,KAAK,CAACI,IAAI,CAACM,CAAC,CAAC,EAAEV,KAAK,CAACI,IAAI,CAACO,CAAC,CAAC,CAAC;IAC3DE,KAAK,EAAEC;EACT,CAAC;AACH;;AAEA;AACA;AACA;AACO,SAASA,gBAAgBA,CAAIC,KAAQ,EAAK;EAC/C,MAAMC,OAAO,GAAG,OAAOD,KAAK;EAE5B,IACEC,OAAO,KAAK,QAAQ,IACpBA,OAAO,KAAK,QAAQ,IACpBA,OAAO,KAAK,SAAS,IACrBA,OAAO,KAAK,QAAQ,IACpBD,KAAK,IAAI,IAAI,EACb;IACA,OAAOA,KAAK;EACd,CAAC,MAAM,IAAIE,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,EAAE;IAC/B,OAAOA,KAAK,CAACI,GAAG,CAACL,gBAAgB,CAAC;EACpC,CAAC,MAAM,IAAIE,OAAO,KAAK,QAAQ,EAAE;IAC/B,OAAOI,MAAM,CAACC,OAAO,CAACN,KAAK,CAAC,CAACO,MAAM,CACjC,CAACC,MAAM,EAAE,CAACC,GAAG,EAAET,KAAK,CAAC,KACnBK,MAAM,CAACK,MAAM,CAACF,MAAM,EAAE;MAAE,CAACC,GAAG,GAAGV,gBAAgB,CAACC,KAAK;IAAE,CAAC,CAAC,EAC3D,CAAC,CACH,CAAC;EACH;EAEA,MAAM,IAAIW,KAAK,CAAC,0BAA0B,GAAGC,MAAM,CAACZ,KAAK,CAAC,CAAC;AAC7D","ignoreList":[]}