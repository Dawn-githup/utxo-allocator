{"version":3,"file":"index.js","names":["_codec","require","_base","_bech","_immutable","_configManager","_bi","_addressToScript","_utils","_toolkit","_blockchain","_refresh","_models","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","bytify","hexify","bytes","BECH32_LIMIT","minimalScriptCapacity","script","validate","result","minimalScriptCapacityCompatible","BigInt","toString","ONE_CKB","validators","ValidateScript","codeHash","length","args","BI","from","mul","minimalCellCapacity","fullCell","minimalCellCapacityCompatible","blockchain","CellOutput","pack","cellOutput","lock","type","data","locateCellDep","config","undefined","getConfig","scriptTemplate","values","SCRIPTS","find","s","CODE_HASH","HASH_TYPE","hashType","depType","DEP_TYPE","outPoint","txHash","TX_HASH","index","INDEX","HAS_WARNED_FOR_DEPRECATED_ADDRESS","CKB2019_ADDRESS_FORMAT_TYPE_DATA","CKB2019_ADDRESS_FORMAT_TYPE_TYPE","generateAddress","console","warn","SHORT_ID","push","hexToByteArray","Error","words","bech32","toWords","encode","PREFIX","scriptToAddress","generatePredefinedAddress","scriptType","template","availableKeys","generateSecp256k1Blake160Address","generateSecp256k1Blake160MultisigAddress","parseAddress","address","parseFullFormatAddress","parseDeprecatedCkb2019Address","addressToScript","encodeToAddress","concat","HashType","bech32m","encodeToConfigAddress","options","String","TransactionSkeleton","Record","cellProvider","cellDeps","List","headerDeps","inputs","outputs","witnesses","fixedEntries","signingEntries","inputSinces","ImmutableMap","createTransactionFromSkeleton","txSkeleton","tx","version","toArray","map","input","i","since","previousOutput","output","outputsData","ValidateTransaction","createTransactionSkeleton","transaction","fetcher","update","inputCells","Promise","all","reduce","set","outputCells","_transaction$outputsD","sealTransaction","sealingContents","size","e","witness","witnessArgs","WitnessArgs","unpack","newWitnessArgs","inputType","outputType","transactionSkeletonToObject","txSkelton","toJS","objectToTransactionSkeleton","obj","value","entries"],"sources":["../src/index.ts"],"sourcesContent":["import { bytes } from \"@ckb-lumos/codec\";\nimport {\n  Address,\n  Cell,\n  CellDep,\n  CellProvider,\n  Hash,\n  HexString,\n  PackedSince,\n  Script,\n  Transaction,\n  WitnessArgs,\n  blockchain,\n  OutPoint,\n} from \"@ckb-lumos/base\";\nimport { bech32, bech32m } from \"bech32\";\nimport { List, Map as ImmutableMap, Record } from \"immutable\";\nimport { Config, getConfig, predefined } from \"@ckb-lumos/config-manager\";\nimport { BI } from \"@ckb-lumos/bi\";\nimport {\n  parseDeprecatedCkb2019Address,\n  parseFullFormatAddress,\n} from \"./address-to-script\";\nimport { hexToByteArray } from \"./utils\";\nimport { validators } from \"@ckb-lumos/toolkit\";\nimport { HashType } from \"@ckb-lumos/base/lib/blockchain\";\n\nconst { bytify, hexify } = bytes;\nexport interface Options {\n  config?: Config;\n}\n\nconst BECH32_LIMIT = 1023;\n\nexport function minimalScriptCapacity(\n  script: Script,\n  { validate = true }: { validate?: boolean } = {}\n): bigint {\n  const result = minimalScriptCapacityCompatible(script, { validate });\n  return BigInt(result.toString());\n}\n\nconst ONE_CKB = 100_000_000;\n\nexport function minimalScriptCapacityCompatible(\n  script: Script,\n  { validate = true }: { validate?: boolean } = {}\n): BI {\n  if (validate) {\n    validators.ValidateScript(script);\n  }\n\n  let bytes = 0;\n  bytes += bytify(script.codeHash).length;\n  bytes += bytify(script.args).length;\n  // hash_type field\n  bytes += 1;\n\n  return BI.from(bytes).mul(ONE_CKB);\n}\n\nexport function minimalCellCapacity(\n  fullCell: Cell,\n  { validate = true }: { validate?: boolean } = {}\n): bigint {\n  const result = minimalCellCapacityCompatible(fullCell, { validate });\n  return BigInt(result.toString());\n}\n\nexport function minimalCellCapacityCompatible(\n  fullCell: Cell,\n  { validate = true }: { validate?: boolean } = {}\n): BI {\n  if (validate) {\n    blockchain.CellOutput.pack(fullCell.cellOutput);\n  }\n  // Capacity field itself\n  let bytes = 8;\n  bytes += bytify(fullCell.cellOutput.lock.codeHash).length;\n  bytes += bytify(fullCell.cellOutput.lock.args).length;\n  // hashType field\n  bytes += 1;\n  if (fullCell.cellOutput.type) {\n    bytes += bytify(fullCell.cellOutput.type.codeHash).length;\n    bytes += bytify(fullCell.cellOutput.type.args).length;\n    bytes += 1;\n  }\n  if (fullCell.data) {\n    bytes += bytify(fullCell.data).length;\n  }\n  return BI.from(bytes).mul(ONE_CKB);\n}\n\nexport function locateCellDep(\n  script: Script,\n  { config = undefined }: Options = {}\n): CellDep | null {\n  config = config || getConfig();\n  const scriptTemplate = Object.values(config.SCRIPTS).find(\n    (s) =>\n      s && s.CODE_HASH === script.codeHash && s.HASH_TYPE === script.hashType\n  );\n\n  if (scriptTemplate) {\n    return {\n      depType: scriptTemplate.DEP_TYPE,\n      outPoint: {\n        txHash: scriptTemplate.TX_HASH,\n        index: scriptTemplate.INDEX,\n      },\n    };\n  }\n  return null;\n}\n\nlet HAS_WARNED_FOR_DEPRECATED_ADDRESS = false;\n\n// |format type|description                                               |\n// |-----------|----------------------------------------------------------|\n// |0x00       |full version identifies the hash_type                     |\n// |0x01       |short version for locks with popular code_hash, deprecated|\n// |0x02       |full version with hash_type = \"Data\", deprecated          |\n// |0x04       |full version with hash_type = \"Type\", deprecated          |\n\nconst CKB2019_ADDRESS_FORMAT_TYPE_DATA = 0x02;\nconst CKB2019_ADDRESS_FORMAT_TYPE_TYPE = 0x04;\n\n/**\n * @deprecated please migrate to {@link encodeToAddress}, the short format address will be removed in the future\n * @param script\n * @param param1\n * @returns\n */\nexport function generateAddress(\n  script: Script,\n  { config = undefined }: Options = {}\n): Address {\n  config = config || getConfig();\n  if (!HAS_WARNED_FOR_DEPRECATED_ADDRESS) {\n    console.warn(\n      \"The address format generated by generateAddress or scriptToAddress will be deprecated, please migrate to encodeToAddress to generate the new ckb2021 full format address as soon as possible\"\n    );\n    HAS_WARNED_FOR_DEPRECATED_ADDRESS = true;\n  }\n  validators.ValidateScript(script);\n\n  const scriptTemplate = Object.values(config.SCRIPTS).find(\n    (s) =>\n      s && s.CODE_HASH === script.codeHash && s.HASH_TYPE === script.hashType\n  );\n  const data = [];\n  if (scriptTemplate && scriptTemplate.SHORT_ID !== undefined) {\n    data.push(1, scriptTemplate.SHORT_ID);\n    data.push(...hexToByteArray(script.args));\n  } else {\n    if (script.hashType === \"type\") {\n      data.push(CKB2019_ADDRESS_FORMAT_TYPE_TYPE);\n    } else if (script.hashType === \"data\") {\n      data.push(CKB2019_ADDRESS_FORMAT_TYPE_DATA);\n    } else {\n      throw new Error(`Invalid hashType ${script.hashType}`);\n    }\n\n    data.push(...hexToByteArray(script.codeHash));\n    data.push(...hexToByteArray(script.args));\n  }\n  const words = bech32.toWords(data);\n  return bech32.encode(config.PREFIX, words, BECH32_LIMIT);\n}\n\n/**\n * @deprecated please migrate to {@link encodeToAddress}, the short format address will be removed in the future */\nexport const scriptToAddress = generateAddress;\n\n/**\n * @deprecated please migrate to {@link encodeToConfigAddress}\n * @param args\n * @param scriptType\n * @param param2\n * @returns\n */\nfunction generatePredefinedAddress(\n  args: HexString,\n  scriptType: string,\n  { config = undefined }: Options = {}\n): Address {\n  config = config || getConfig();\n  const template = config.SCRIPTS[scriptType];\n  if (!template) {\n    const availableKeys = Object.keys(config.SCRIPTS);\n    throw new Error(\n      `Invalid script type: ${scriptType}, only support: ${availableKeys}`\n    );\n  }\n  const script: Script = {\n    codeHash: template.CODE_HASH,\n    hashType: template.HASH_TYPE,\n    args,\n  };\n\n  return generateAddress(script, { config });\n}\n\n/**\n * @deprecated please migrate to {@link encodeToConfigAddress}\n * @param args\n * @param param1\n * @returns\n */\nexport function generateSecp256k1Blake160Address(\n  args: HexString,\n  { config = undefined }: Options = {}\n): Address {\n  return generatePredefinedAddress(args, \"SECP256K1_BLAKE160\", { config });\n}\n\n/**\n * @deprecated please migrate to {@link encodeToConfigAddress}\n * @param args\n * @param config\n */\nexport function generateSecp256k1Blake160MultisigAddress(\n  args: HexString,\n  { config = undefined }: Options = {}\n): Address {\n  return generatePredefinedAddress(args, \"SECP256K1_BLAKE160_MULTISIG\", {\n    config,\n  });\n}\n\nexport function parseAddress(\n  address: Address,\n  { config = undefined }: Options = {}\n): Script {\n  config = config || getConfig();\n\n  try {\n    return parseFullFormatAddress(address, { config });\n  } catch {\n    return parseDeprecatedCkb2019Address(address, { config });\n  }\n}\n\nexport const addressToScript = parseAddress;\n\n/**\n * parse a lock script to an address\n * @param script\n * @param config\n */\nexport function encodeToAddress(\n  script: Script,\n  { config = undefined }: Options = {}\n): Address {\n  validators.ValidateScript(script);\n  config = config || getConfig();\n  // https://github.com/nervosnetwork/rfcs/blob/9aef152a5123c8972de1aefc11794cf84d1762ed/rfcs/0021-ckb-address-format/0021-ckb-address-format.md#full-payload-format\n  // Full payload format directly encodes all data fields of lock script. The encode rule of full payload format is Bech32m.\n  // payload = 0x00 | code_hash | hash_type | args\n\n  const data = bytes.concat(\n    [0x00],\n    script.codeHash,\n    HashType.pack(script.hashType),\n    script.args\n  );\n\n  return bech32m.encode(config.PREFIX, bech32m.toWords(data), BECH32_LIMIT);\n}\n\ntype PredefinedScriptName = keyof typeof predefined.LINA.SCRIPTS;\n\nexport function encodeToConfigAddress(\n  args: HexString,\n  scriptType: PredefinedScriptName\n): string;\nexport function encodeToConfigAddress<C extends Config>(\n  args: HexString,\n  scriptType: keyof C[\"SCRIPTS\"],\n  options: { config?: C }\n): string;\n/**\n * encode a script to an address with args and a key of config\n * @example\n * ```ts\n * // parse a predefined lock to an address\n * encodeToConfigAddress('0x12345678123456781234567812345678', 'SECP256K1_BLAKE160');\n * // parse a custom lock to an address\n * encodeToConfigAddress('0x12345678123456781234567812345678', 'MY_CUSTOM_LOCK', {\n *   SCRIPTS: {\n *     MY_CUSTOM_LOCK: {...}\n *   }\n * })\n * ```\n * @param args script args\n * @param scriptType a key of `config.SCRIPTS`\n * @param options\n * @returns\n */\nexport function encodeToConfigAddress<C extends Config>(\n  args: HexString,\n  scriptType: keyof C[\"SCRIPTS\"],\n  options?: { config?: C }\n): string {\n  const config = (options?.config || getConfig()) as C;\n  const template = config.SCRIPTS[scriptType as string];\n\n  if (!template) {\n    const availableKeys = Object.keys(config.SCRIPTS);\n    throw new Error(\n      // prettier-ignore\n      `Invalid script type: ${String(scriptType)}, only support: ${availableKeys}`\n    );\n  }\n\n  const script: Script = {\n    codeHash: template.CODE_HASH,\n    hashType: template.HASH_TYPE,\n    args,\n  };\n\n  return encodeToAddress(script, { config });\n}\n\nexport interface TransactionSkeletonInterface {\n  cellProvider: CellProvider | null;\n  cellDeps: List<CellDep>;\n  headerDeps: List<Hash>;\n  inputs: List<Cell>;\n  outputs: List<Cell>;\n  witnesses: List<HexString>;\n  fixedEntries: List<{ field: string; index: number }>;\n  signingEntries: List<{ type: string; index: number; message: string }>;\n  inputSinces: ImmutableMap<number, PackedSince>;\n}\n\nexport type TransactionSkeletonType = Record<TransactionSkeletonInterface> &\n  Readonly<TransactionSkeletonInterface>;\n\nexport const TransactionSkeleton = Record<TransactionSkeletonInterface>({\n  cellProvider: null,\n  cellDeps: List(),\n  headerDeps: List(),\n  inputs: List(),\n  outputs: List(),\n  witnesses: List(),\n  fixedEntries: List(),\n  signingEntries: List(),\n  inputSinces: ImmutableMap(),\n});\n\nexport function createTransactionFromSkeleton(\n  txSkeleton: TransactionSkeletonType,\n  { validate = true }: { validate?: boolean } = {}\n): Transaction {\n  const tx: Transaction = {\n    version: \"0x0\",\n    cellDeps: txSkeleton.get(\"cellDeps\").toArray(),\n    headerDeps: txSkeleton.get(\"headerDeps\").toArray(),\n    inputs: txSkeleton\n      .get(\"inputs\")\n      .map((input, i) => {\n        if (!input.outPoint) {\n          throw new Error(\n            `cannot find OutPoint in Inputs[${i}] when createTransactionFromSkeleton`\n          );\n        }\n        return {\n          since: txSkeleton.get(\"inputSinces\").get(i, \"0x0\"),\n          previousOutput: input.outPoint,\n        };\n      })\n      .toArray(),\n    outputs: txSkeleton\n      .get(\"outputs\")\n      .map((output) => output.cellOutput)\n      .toArray(),\n    outputsData: txSkeleton\n      .get(\"outputs\")\n      .map((output) => output.data || \"0x0\")\n      .toArray(),\n    witnesses: txSkeleton.get(\"witnesses\").toArray(),\n  };\n  if (validate) {\n    validators.ValidateTransaction(tx);\n  }\n  return tx;\n}\n\ntype Promisable<T> = Promise<T> | T;\nexport type LiveCellFetcher = (outPoint: OutPoint) => Promisable<Cell>;\n\n/**\n * create a {@link TransactionSkeleton} from a {@link Transaction}\n * @example\n * ```js\n * const rpc = new RPC('localhost:8114')\n * const fetcher = (outPoint: OutPoint) => rpc.getLiveCell(outPoint)\n * const skeleton = await createTransactionSkeleton({ transaction, fetcher });\n * ```\n */\nexport async function createTransactionSkeleton(\n  transaction: Transaction,\n  fetcher: LiveCellFetcher\n): Promise<TransactionSkeletonType> {\n  let txSkeleton = TransactionSkeleton();\n  txSkeleton = txSkeleton.update(\"cellDeps\", (cellDeps) =>\n    cellDeps.push(...transaction.cellDeps)\n  );\n\n  txSkeleton = txSkeleton.update(\"headerDeps\", (headerDeps) =>\n    headerDeps.push(...transaction.headerDeps)\n  );\n\n  const inputCells = await Promise.all(\n    transaction.inputs.map((input) => fetcher(input.previousOutput))\n  );\n  txSkeleton = txSkeleton.update(\"inputs\", (inputs) =>\n    inputs.push(...inputCells)\n  );\n\n  txSkeleton = txSkeleton.update(\"inputSinces\", (inputSinces) =>\n    transaction.inputs.reduce(\n      (map, input, i) => map.set(i, input.since),\n      inputSinces\n    )\n  );\n\n  const outputCells: Array<Cell> = transaction.outputs.map((output, index) => ({\n    cellOutput: output,\n    data: transaction.outputsData[index] ?? \"0x\",\n  }));\n\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) =>\n    outputs.push(...outputCells)\n  );\n  txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) =>\n    witnesses.push(...transaction.witnesses)\n  );\n\n  return txSkeleton;\n}\n\nexport function sealTransaction(\n  txSkeleton: TransactionSkeletonType,\n  sealingContents: HexString[]\n): Transaction {\n  const tx = createTransactionFromSkeleton(txSkeleton);\n  if (sealingContents.length !== txSkeleton.get(\"signingEntries\").size) {\n    throw new Error(\n      `Requiring ${\n        txSkeleton.get(\"signingEntries\").size\n      } sealing contents but provided ${sealingContents.length}!`\n    );\n  }\n  txSkeleton.get(\"signingEntries\").forEach((e, i) => {\n    switch (e.type) {\n      case \"witness_args_lock\": {\n        const witness = tx.witnesses[e.index];\n        const witnessArgs = blockchain.WitnessArgs.unpack(bytify(witness));\n        const newWitnessArgs: WitnessArgs = {\n          lock: sealingContents[i],\n        };\n        const inputType = witnessArgs.inputType;\n        if (inputType) {\n          newWitnessArgs.inputType = inputType;\n        }\n        const outputType = witnessArgs.outputType;\n        if (outputType) {\n          newWitnessArgs.outputType = outputType;\n        }\n\n        tx.witnesses[e.index] = hexify(\n          blockchain.WitnessArgs.pack(newWitnessArgs)\n        );\n        break;\n      }\n      default:\n        throw new Error(`Invalid signing entry type: ${e.type}`);\n    }\n  });\n  return tx;\n}\n\nexport interface TransactionSkeletonObject {\n  cellProvider: CellProvider | null;\n  cellDeps: CellDep[];\n  headerDeps: Hash[];\n  inputs: Cell[];\n  outputs: Cell[];\n  witnesses: HexString[];\n  fixedEntries: Array<{ field: string; index: number }>;\n  signingEntries: Array<{ type: string; index: number; message: string }>;\n  inputSinces: Map<number, PackedSince>;\n}\n\n/**\n * Convert TransactionSkeleton to js object\n *\n * @param txSkelton\n */\nexport function transactionSkeletonToObject(\n  txSkelton: TransactionSkeletonType\n): TransactionSkeletonObject {\n  return txSkelton.toJS() as TransactionSkeletonObject;\n}\n\n/**\n * Convert js object to TransactionSkeleton\n *\n * @param obj\n */\nexport function objectToTransactionSkeleton(\n  obj: TransactionSkeletonObject\n): TransactionSkeletonType {\n  let inputSinces = ImmutableMap<number, PackedSince>();\n  for (const [key, value] of Object.entries(obj.inputSinces)) {\n    inputSinces = inputSinces.set(+key, value);\n  }\n  const txSkeleton = TransactionSkeleton({\n    cellProvider: obj.cellProvider,\n    cellDeps: List(obj.cellDeps),\n    headerDeps: List(obj.headerDeps),\n    inputs: List(obj.inputs),\n    outputs: List(obj.outputs),\n    witnesses: List(obj.witnesses),\n    fixedEntries: List(obj.fixedEntries),\n    signingEntries: List(obj.signingEntries),\n    inputSinces,\n  });\n  return txSkeleton;\n}\n\nexport { refreshTypeIdCellDeps } from \"./refresh\";\nexport * from \"./models\";\n"],"mappings":"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","ignoreList":[]}