{"version":3,"sources":["../src/error.ts","../src/utils.ts","../src/service/base.ts","../src/service/service.ts"],"sourcesContent":["import { BtcAssetsApiContext } from './types';\n\nexport enum ErrorCodes {\n  UNKNOWN,\n\n  ASSETS_API_RESPONSE_ERROR,\n  ASSETS_API_UNAUTHORIZED,\n  ASSETS_API_INVALID_PARAM,\n  ASSETS_API_RESOURCE_NOT_FOUND,\n  ASSETS_API_RESPONSE_DECODE_ERROR,\n}\n\nexport const ErrorMessages = {\n  [ErrorCodes.UNKNOWN]: 'Unknown error',\n\n  [ErrorCodes.ASSETS_API_UNAUTHORIZED]: 'BtcAssetsAPI unauthorized, please check your token/origin',\n  [ErrorCodes.ASSETS_API_INVALID_PARAM]: 'Invalid param(s) was provided to the BtcAssetsAPI',\n  [ErrorCodes.ASSETS_API_RESPONSE_ERROR]: 'BtcAssetsAPI returned an error',\n  [ErrorCodes.ASSETS_API_RESOURCE_NOT_FOUND]: 'Resource not found on the BtcAssetsAPI',\n  [ErrorCodes.ASSETS_API_RESPONSE_DECODE_ERROR]: 'Failed to decode the response of BtcAssetsAPI',\n};\n\nexport class BtcAssetsApiError extends Error {\n  public code = ErrorCodes.UNKNOWN;\n  public message: string;\n  public context?: BtcAssetsApiContext;\n\n  constructor(payload: { code: ErrorCodes; message?: string; context?: BtcAssetsApiContext }) {\n    const message = payload.message ?? ErrorMessages[payload.code] ?? ErrorMessages[ErrorCodes.UNKNOWN];\n\n    super(message);\n    this.message = message;\n    this.code = payload.code;\n    this.context = payload.context;\n    Object.setPrototypeOf(this, BtcAssetsApiError.prototype);\n  }\n\n  static withComment(code: ErrorCodes, comment?: string, context?: BtcAssetsApiContext): BtcAssetsApiError {\n    const prefixMessage = ErrorMessages[code] ?? ErrorMessages[ErrorCodes.UNKNOWN];\n    const message = comment ? `${prefixMessage}: ${comment}` : undefined;\n    return new BtcAssetsApiError({ code, message, context });\n  }\n}\n","/**\n * Check if target string is a valid domain.\n * @exmaple\n * isDomain('google.com') // => true\n * isDomain('https://google.com') // => false\n * isDomain('localhost') // => false\n * isDomain('localhost', true) // => true\n */\nexport function isDomain(domain: string, allowLocalhost?: boolean): boolean {\n  if (allowLocalhost && domain === 'localhost') {\n    return true;\n  }\n  const regex = /^(?:[-A-Za-z0-9]+\\.)+[A-Za-z]{2,}$/;\n  return regex.test(domain);\n}\n","import pickBy from 'lodash/pickBy.js';\nimport { isDomain } from '../utils';\nimport { BtcAssetsApiError, ErrorCodes } from '../error';\nimport { BaseApis, BaseApiRequestOptions, BtcAssetsApiToken, BtcAssetsApiContext, Json } from '../types';\n\nexport class BtcAssetsApiBase implements BaseApis {\n  public url: string;\n  public app?: string;\n  public domain?: string;\n  public origin?: string;\n  private token?: string;\n\n  constructor(props: { url: string; app?: string; domain?: string; origin?: string; token?: string }) {\n    this.url = props.url;\n    this.app = props.app;\n    this.domain = props.domain;\n    this.origin = props.origin;\n    this.token = props.token;\n\n    // Validation\n    if (this.domain && !isDomain(this.domain, true)) {\n      throw BtcAssetsApiError.withComment(ErrorCodes.ASSETS_API_INVALID_PARAM, 'domain');\n    }\n  }\n\n  async request<T>(route: string, options?: BaseApiRequestOptions): Promise<T> {\n    const { requireToken = true, allow404 = false, method = 'GET', headers, params, ...otherOptions } = options ?? {};\n    if (requireToken && !this.token && !(this.app && this.domain)) {\n      throw BtcAssetsApiError.withComment(ErrorCodes.ASSETS_API_INVALID_PARAM, 'app, domain');\n    }\n    if (requireToken && !this.token) {\n      await this.init();\n    }\n\n    const pickedParams = pickBy(params, (val) => val !== undefined);\n    const packedParams = params ? '?' + new URLSearchParams(pickedParams).toString() : '';\n    const url = `${this.url}${route}${packedParams}`;\n    const res = await fetch(url, {\n      method,\n      headers: {\n        authorization: this.token ? `Bearer ${this.token}` : undefined,\n        origin: this.origin,\n        ...headers,\n      },\n      ...otherOptions,\n    } as RequestInit);\n\n    let text: string | undefined;\n    let json: Json | undefined;\n    let ok: boolean = false;\n    try {\n      text = await res.text();\n      json = JSON.parse(text);\n      ok = json?.ok ?? res.ok ?? false;\n    } catch {\n      // do nothing\n    }\n\n    let comment: string | undefined;\n    const status = res.status;\n    const context: BtcAssetsApiContext = {\n      request: {\n        url,\n        params,\n        body: tryParseBody(otherOptions.body),\n      },\n      response: {\n        status,\n        data: json ?? text,\n      },\n    };\n\n    if (!json) {\n      comment = text ? `(${status}) ${text}` : `${status}`;\n    }\n    if (json && !ok) {\n      const code = json.code ?? json.statusCode ?? json.error?.error?.code ?? res.status;\n      const message = json.message ?? (typeof json.error === 'string' ? json.error : json.error?.error?.message);\n      if (message) {\n        comment = code ? `(${code}) ${message}` : message;\n      } else {\n        comment = JSON.stringify(json);\n      }\n    }\n\n    if (status === 200 && !json) {\n      throw BtcAssetsApiError.withComment(ErrorCodes.ASSETS_API_RESPONSE_DECODE_ERROR, comment, context);\n    }\n    if (status === 401) {\n      throw BtcAssetsApiError.withComment(ErrorCodes.ASSETS_API_UNAUTHORIZED, comment, context);\n    }\n    if (status === 404 && !allow404) {\n      throw BtcAssetsApiError.withComment(ErrorCodes.ASSETS_API_RESOURCE_NOT_FOUND, comment, context);\n    }\n    if (status !== 200 && status !== 404 && !allow404) {\n      throw BtcAssetsApiError.withComment(ErrorCodes.ASSETS_API_RESPONSE_ERROR, comment, context);\n    }\n    if (status === 404 && allow404) {\n      return undefined as T;\n    }\n\n    return json! as T;\n  }\n\n  async post<T>(route: string, options?: BaseApiRequestOptions): Promise<T> {\n    return this.request(route, {\n      method: 'POST',\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options?.headers,\n      },\n    } as BaseApiRequestOptions);\n  }\n\n  async generateToken() {\n    if (!this.app || !this.domain) {\n      throw BtcAssetsApiError.withComment(ErrorCodes.ASSETS_API_INVALID_PARAM, 'app, domain');\n    }\n\n    return this.post<BtcAssetsApiToken>('/token/generate', {\n      requireToken: false,\n      body: JSON.stringify({\n        app: this.app!,\n        domain: this.domain!,\n      }),\n    });\n  }\n\n  async init(force?: boolean) {\n    // If the token exists and not a force action, do nothing\n    if (this.token && !force) {\n      return;\n    }\n\n    const token = await this.generateToken();\n    this.token = token.token;\n  }\n}\n\nfunction tryParseBody(body: unknown): Record<string, unknown> | undefined {\n  try {\n    return typeof body === 'string' ? JSON.parse(body) : undefined;\n  } catch {\n    return undefined;\n  }\n}\n","import { BtcAssetsApiBase } from './base';\nimport {\n  BtcApis,\n  BtcApiBalance,\n  BtcApiBalanceParams,\n  BtcApiBlock,\n  BtcApiBlockchainInfo,\n  BtcApiBlockHash,\n  BtcApiBlockHeader,\n  BtcApiBlockTransactionIds,\n  BtcApiSentTransaction,\n  BtcApiTransaction,\n  BtcApiUtxo,\n  BtcApiUtxoParams,\n  BtcApiTransactionParams,\n  BtcApiRecommendedFeeRates,\n} from '../types';\nimport {\n  RgbppApis,\n  RgbppCell,\n  RgbppApiSpvProof,\n  RgbppApiPaymasterInfo,\n  RgbppApiTransactionState,\n  RgbppApiSendCkbTransactionPayload,\n  RgbppApiCkbTransactionHash,\n  RgbppApiAssetsByAddressParams,\n  RgbppApiBalanceByAddressParams,\n  RgbppApiBalance,\n  RgbppApiRetryCkbTransactionPayload,\n  RgbppApiTransactionStateParams,\n  RgbppApiTransactionRetry,\n} from '../types';\n\nexport class BtcAssetsApi extends BtcAssetsApiBase implements BtcApis, RgbppApis {\n  /**\n   * Base\n   */\n\n  static fromToken(url: string, token: string, origin?: string) {\n    return new BtcAssetsApi({ url, token, origin });\n  }\n\n  /**\n   * Bitcoin APIs, under the /bitcoin/v1 prefix.\n   */\n\n  getBtcBlockchainInfo() {\n    return this.request<BtcApiBlockchainInfo>('/bitcoin/v1/info');\n  }\n\n  getBtcBlockByHash(blockHash: string) {\n    return this.request<BtcApiBlock>(`/bitcoin/v1/block/${blockHash}`);\n  }\n\n  getBtcBlockHeaderByHash(blockHash: string) {\n    return this.request<BtcApiBlockHeader>(`/bitcoin/v1/block/${blockHash}/header`);\n  }\n\n  getBtcBlockHashByHeight(height: number) {\n    return this.request<BtcApiBlockHash>(`/bitcoin/v1/block/height/${height}`);\n  }\n\n  getBtcBlockTransactionIdsByHash(blockHash: number) {\n    return this.request<BtcApiBlockTransactionIds>(`/bitcoin/v1/block/${blockHash}/txids`);\n  }\n\n  getBtcRecommendedFeeRates() {\n    return this.request<BtcApiRecommendedFeeRates>(`/bitcoin/v1/fees/recommended`);\n  }\n\n  getBtcBalance(address: string, params?: BtcApiBalanceParams) {\n    return this.request<BtcApiBalance>(`/bitcoin/v1/address/${address}/balance`, {\n      params,\n    });\n  }\n\n  getBtcUtxos(address: string, params?: BtcApiUtxoParams) {\n    return this.request<BtcApiUtxo[]>(`/bitcoin/v1/address/${address}/unspent`, {\n      params,\n    });\n  }\n\n  getBtcTransactions(address: string, params?: BtcApiTransactionParams) {\n    return this.request<BtcApiTransaction[]>(`/bitcoin/v1/address/${address}/txs`, {\n      params,\n    });\n  }\n\n  getBtcTransaction(txId: string) {\n    return this.request<BtcApiTransaction>(`/bitcoin/v1/transaction/${txId}`);\n  }\n\n  sendBtcTransaction(txHex: string) {\n    return this.post<BtcApiSentTransaction>('/bitcoin/v1/transaction', {\n      body: JSON.stringify({\n        txhex: txHex,\n      }),\n    });\n  }\n\n  /**\n   * RGBPP APIs, under the /rgbpp/v1 prefix.\n   */\n\n  getRgbppPaymasterInfo() {\n    return this.request<RgbppApiPaymasterInfo>('/rgbpp/v1/paymaster/info');\n  }\n\n  getRgbppTransactionHash(btcTxId: string) {\n    return this.request<RgbppApiCkbTransactionHash>(`/rgbpp/v1/transaction/${btcTxId}`);\n  }\n\n  getRgbppTransactionState(btcTxId: string, params?: RgbppApiTransactionStateParams) {\n    return this.request<RgbppApiTransactionState>(`/rgbpp/v1/transaction/${btcTxId}/job`, {\n      params,\n    });\n  }\n\n  getRgbppAssetsByBtcTxId(btcTxId: string) {\n    return this.request<RgbppCell[]>(`/rgbpp/v1/assets/${btcTxId}`);\n  }\n\n  getRgbppAssetsByBtcUtxo(btcTxId: string, vout: number) {\n    return this.request<RgbppCell[]>(`/rgbpp/v1/assets/${btcTxId}/${vout}`);\n  }\n\n  getRgbppAssetsByBtcAddress(btcAddress: string, params?: RgbppApiAssetsByAddressParams) {\n    return this.request<RgbppCell[]>(`/rgbpp/v1/address/${btcAddress}/assets`, {\n      params,\n    });\n  }\n\n  getRgbppBalanceByBtcAddress(btcAddress: string, params?: RgbppApiBalanceByAddressParams) {\n    return this.request<RgbppApiBalance>(`/rgbpp/v1/address/${btcAddress}/balance`, {\n      params,\n    });\n  }\n\n  getRgbppSpvProof(btcTxId: string, confirmations: number) {\n    return this.request<RgbppApiSpvProof>('/rgbpp/v1/btc-spv/proof', {\n      params: {\n        btc_txid: btcTxId,\n        confirmations,\n      },\n    });\n  }\n\n  sendRgbppCkbTransaction(payload: RgbppApiSendCkbTransactionPayload) {\n    return this.post<RgbppApiTransactionState>('/rgbpp/v1/transaction/ckb-tx', {\n      body: JSON.stringify(payload),\n    });\n  }\n\n  retryRgbppCkbTransaction(payload: RgbppApiRetryCkbTransactionPayload) {\n    return this.post<RgbppApiTransactionRetry>('/rgbpp/v1/transaction/retry', {\n      body: JSON.stringify(payload),\n    });\n  }\n}\n"],"mappings":"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","names":["ErrorCodes"]}