{"version":3,"file":"dao.js","names":["_helpers","require","_base","_codec","_configManager","_secp256k1_blake","_interopRequireDefault","_secp256k1_blake160_multisig","_from_info","_helper","_bi","_rpc","_common","obj","__esModule","default","parseSince","sinceUtils","DEPOSIT_DAO_DATA","DAO_LOCK_PERIOD_EPOCHS_COMPATIBLE","BI","from","CellCollector","constructor","fromInfo","cellProvider","cellType","config","undefined","Error","getConfig","fromScript","parseFromInfo","daoTypeScript","generateDaoScript","data","cellCollector","collector","lock","type","collect","inputCell","exports","listDaoCells","fromAddress","cell","deposit","txSkeleton","toAddress","amount","enableNonSystemScript","DAO_SCRIPT","SCRIPTS","DAO","_checkFromInfoSince","_addDaoCellDep","toScript","parseAddress","codeHash","CODE_HASH","hashType","HASH_TYPE","args","update","outputs","push","cellOutput","capacity","toString","outPoint","blockHash","outputIndex","get","size","fixedEntries","field","index","isSecp256k1Blake160Script","secp256k1Blake160","injectCapacity","isSecp256k1Blake160MultisigScript","secp256k1Blake160Multisig","common","encodeToAddress","isMultisigFromInfo","since","length","number","Uint64LE","unpack","slice","toHexString","relative","withdraw","fromInput","_checkDaoScript","typeScript","fromLockScript","setupInputCell","generateAddress","targetOutputIndex","targetOutput","clonedTargetOutput","JSON","parse","stringify","blockNumber","bytes","hexify","Uint64","pack","headerDeps","parseEpochCompatible","epoch","_epoch","shr","and","epochSinceCompatible","_length","_index","_number","shl","add","unlock","depositInput","withdrawInput","RpcClient","RPC","rpc","uri","withdrawTypeScript","depositBlockHeader","getHeader","depositEpoch","withdrawBlockHeader","withdrawEpoch","withdrawFraction","mul","depositFraction","depositedEpochs","sub","gt","lockEpochs","div","minimalSinceEpoch","minimalSince","outputCapacity","calculateMaximumWithdrawCompatible","dao","witnesses","depositHeaderDepIndex","defaultWitnessArgs","inputType","defaultWitness","blockchain","WitnessArgs","lastOutputIndex","remove","calculateDaoEarliestSince","depositBlockHeaderEpoch","withdrawBlockHeaderEpoch","result","calculateDaoEarliestSinceCompatible","BigInt","template","addCellDep","txHash","TX_HASH","INDEX","depType","DEP_TYPE","extractDaoDataCompatible","test","len","hex","startsWith","map","key","i","reduce","c","calculateMaximumWithdraw","withdrawCell","depositDao","withdrawDao","toBigInt","depositAR","ar","withdrawAR","occupiedCapacity","minimalCellCapacityCompatible","countedCapacity","withdrawCountedCapacity","_default"],"sources":["../src/dao.ts"],"sourcesContent":["/* eslint-disable import/no-named-as-default-member */\n\nimport {\n  parseAddress,\n  TransactionSkeletonType,\n  Options,\n  generateAddress,\n  encodeToAddress,\n  minimalCellCapacityCompatible,\n} from \"@ckb-lumos/helpers\";\nimport {\n  since as sinceUtils,\n  HexString,\n  Address,\n  CellProvider,\n  Cell,\n  WitnessArgs,\n  PackedDao,\n  PackedSince,\n  CellCollector as CellCollectorInterface,\n  blockchain,\n} from \"@ckb-lumos/base\";\nimport { bytes, number } from \"@ckb-lumos/codec\";\nimport { getConfig, Config } from \"@ckb-lumos/config-manager\";\nconst { parseSince } = sinceUtils;\nimport secp256k1Blake160 from \"./secp256k1_blake160\";\nimport secp256k1Blake160Multisig from \"./secp256k1_blake160_multisig\";\nimport { FromInfo, isMultisigFromInfo, parseFromInfo } from \"./from_info\";\nimport {\n  addCellDep,\n  isSecp256k1Blake160Script,\n  isSecp256k1Blake160MultisigScript,\n  generateDaoScript,\n} from \"./helper\";\nimport { BI, BIish } from \"@ckb-lumos/bi\";\nimport { RPC } from \"@ckb-lumos/rpc\";\nimport common from \"./common\";\n\nconst DEPOSIT_DAO_DATA: HexString = \"0x0000000000000000\";\nconst DAO_LOCK_PERIOD_EPOCHS_COMPATIBLE = BI.from(180);\n\nexport class CellCollector implements CellCollectorInterface {\n  private cellCollector: CellCollectorInterface;\n  private cellType: \"all\" | \"deposit\" | \"withdraw\";\n\n  constructor(\n    fromInfo: FromInfo,\n    cellProvider: CellProvider,\n    cellType: \"all\" | \"deposit\" | \"withdraw\",\n    { config = undefined }: Options = {}\n  ) {\n    if (!cellProvider) {\n      throw new Error(\"Cell Provider is missing!\");\n    }\n\n    config = config || getConfig();\n\n    const fromScript = parseFromInfo(fromInfo, { config }).fromScript;\n    const daoTypeScript = generateDaoScript(config);\n    const data: HexString | string =\n      cellType === \"deposit\" ? DEPOSIT_DAO_DATA : \"any\";\n    this.cellType = cellType;\n\n    this.cellCollector = cellProvider.collector({\n      lock: fromScript,\n      type: daoTypeScript,\n      data,\n    });\n  }\n\n  async *collect(): AsyncGenerator<Cell> {\n    for await (const inputCell of this.cellCollector.collect()) {\n      if (this.cellType === \"withdraw\" && inputCell.data === DEPOSIT_DAO_DATA) {\n        continue;\n      }\n\n      yield inputCell;\n    }\n  }\n}\n\n/**\n * list DAO cells,\n *\n * @param cellProvider\n * @param fromAddress\n * @param cellType\n * @param options\n */\nexport async function* listDaoCells(\n  cellProvider: CellProvider,\n  fromAddress: Address,\n  cellType: \"all\" | \"deposit\" | \"withdraw\",\n  { config = undefined }: Options = {}\n): AsyncIterator<Cell> {\n  const collector = new CellCollector(fromAddress, cellProvider, cellType, {\n    config,\n  });\n\n  for await (const cell of collector.collect()) {\n    yield cell;\n  }\n}\n\ninterface DepositOptions {\n  config?: Config;\n  /**\n   * enable using non-system script in inputs\n   */\n  enableNonSystemScript?: boolean;\n}\n\n// TODO: reject multisig with non absolute-epoch-number locktime lock\n/**\n * deposit a cell to DAO\n *\n * @param txSkeleton\n * @param fromInfo only system script is enabled by default, to enable non-system script as inputs, please set enableNonSystemScript to true in options\n * @param toAddress deposit cell lock address\n * @param amount capacity in shannon\n * @param options\n */\nexport async function deposit(\n  txSkeleton: TransactionSkeletonType,\n  fromInfo: FromInfo,\n  toAddress: Address,\n  amount: BIish,\n  { config = undefined, enableNonSystemScript = false }: DepositOptions = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n  const DAO_SCRIPT = config.SCRIPTS.DAO;\n  if (!DAO_SCRIPT) {\n    throw new Error(\"Provided config does not have DAO script setup!\");\n  }\n\n  _checkFromInfoSince(fromInfo, config);\n\n  // check and add cellDep if not exists\n  txSkeleton = _addDaoCellDep(txSkeleton, config);\n\n  if (!toAddress) {\n    throw new Error(\"You must provide a to address!\");\n  }\n\n  const toScript = parseAddress(toAddress, { config });\n  const daoTypeScript = {\n    codeHash: DAO_SCRIPT.CODE_HASH,\n    hashType: DAO_SCRIPT.HASH_TYPE,\n    args: \"0x\",\n  };\n\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.push({\n      cellOutput: {\n        capacity: \"0x\" + BI.from(amount).toString(16),\n        lock: toScript,\n        type: daoTypeScript,\n      },\n      data: DEPOSIT_DAO_DATA,\n      outPoint: undefined,\n      blockHash: undefined,\n    });\n  });\n\n  const outputIndex = txSkeleton.get(\"outputs\").size - 1;\n\n  // fix entry\n  txSkeleton = txSkeleton.update(\"fixedEntries\", (fixedEntries) => {\n    return fixedEntries.push({\n      field: \"outputs\",\n      index: outputIndex,\n    });\n  });\n\n  if (typeof fromInfo === \"string\") {\n    const fromScript = parseAddress(fromInfo, { config });\n    // address\n    if (isSecp256k1Blake160Script(fromScript, config)) {\n      txSkeleton = await secp256k1Blake160.injectCapacity(\n        txSkeleton,\n        outputIndex,\n        fromInfo,\n        {\n          config,\n        }\n      );\n    } else if (isSecp256k1Blake160MultisigScript(fromScript, config)) {\n      txSkeleton = await secp256k1Blake160Multisig.injectCapacity(\n        txSkeleton,\n        outputIndex,\n        fromInfo,\n        { config }\n      );\n    } else if (enableNonSystemScript) {\n      txSkeleton = await common.injectCapacity(\n        txSkeleton,\n        [fromInfo],\n        amount,\n        encodeToAddress(parseFromInfo(fromInfo).fromScript, { config }),\n        undefined,\n        { config }\n      );\n    }\n  } else if (fromInfo) {\n    if (isMultisigFromInfo(fromInfo)) {\n      txSkeleton = await secp256k1Blake160Multisig.injectCapacity(\n        txSkeleton,\n        outputIndex,\n        fromInfo,\n        {\n          config,\n        }\n      );\n    } else if (enableNonSystemScript) {\n      txSkeleton = await common.injectCapacity(\n        txSkeleton,\n        [fromInfo],\n        amount,\n        encodeToAddress(parseFromInfo(fromInfo).fromScript, { config }),\n        undefined,\n        { config }\n      );\n    }\n  }\n\n  return txSkeleton;\n}\n\nfunction _checkFromInfoSince(fromInfo: FromInfo, config: Config): void {\n  let since;\n  if (typeof fromInfo === \"string\") {\n    // fromInfo is an address\n    const fromScript = parseAddress(fromInfo, { config });\n    const args = fromScript.args;\n    if (args.length === 58) {\n      since = number.Uint64LE.unpack(\"0x\" + args.slice(42)).toHexString();\n    }\n  } else if (\"R\" in fromInfo) {\n    since = fromInfo.since;\n  }\n\n  if (since != null) {\n    const { relative, type } = parseSince(since);\n    if (!(!relative && type === \"epochNumber\")) {\n      throw new Error(\n        \"Can't deposit a dao cell with multisig locktime which not using absolute-epoch-number format!\"\n      );\n    }\n  }\n}\n\nexport interface WithdrawOptions {\n  config?: Config;\n  /**\n   * enable using non-system script in inputs\n   */\n  enableNonSystemScript?: boolean;\n}\n\n/**\n * withdraw an deposited DAO cell\n *\n * @param txSkeleton\n * @param fromInput deposited DAO cell\n * @param fromInfo\n * @param options\n */\nasync function withdraw(\n  txSkeleton: TransactionSkeletonType,\n  fromInput: Cell,\n  fromInfo?: FromInfo,\n  { config = undefined, enableNonSystemScript = false }: WithdrawOptions = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n  _checkDaoScript(config);\n  txSkeleton = _addDaoCellDep(txSkeleton, config);\n\n  // check inputs.size == outputs.size\n  if (txSkeleton.get(\"inputs\").size !== txSkeleton.get(\"outputs\").size) {\n    throw new Error(\"Input size must equals to output size in txSkeleton!\");\n  }\n\n  if (!config.SCRIPTS.DAO) {\n    throw new Error(\"Provided config does not have DAO script setup!\");\n  }\n\n  // TODO: check fromInput\n\n  const cellProvider = txSkeleton.get(\"cellProvider\");\n  if (!cellProvider) {\n    throw new Error(\"Cell provider is missing!\");\n  }\n  const typeScript = fromInput.cellOutput.type;\n  const DAO_SCRIPT = config.SCRIPTS.DAO;\n  if (\n    !typeScript ||\n    typeScript.codeHash !== DAO_SCRIPT.CODE_HASH ||\n    typeScript.hashType !== DAO_SCRIPT.HASH_TYPE ||\n    fromInput.data !== DEPOSIT_DAO_DATA\n  ) {\n    throw new Error(\"fromInput is not a DAO deposit cell.\");\n  }\n\n  // setup input cell\n  const fromLockScript = fromInput.cellOutput.lock;\n  if (isSecp256k1Blake160Script(fromLockScript, config)) {\n    txSkeleton = await secp256k1Blake160.setupInputCell(\n      txSkeleton,\n      fromInput,\n      undefined,\n      { config }\n    );\n  } else if (isSecp256k1Blake160MultisigScript(fromLockScript, config)) {\n    txSkeleton = await secp256k1Blake160Multisig.setupInputCell(\n      txSkeleton,\n      fromInput,\n      fromInfo || generateAddress(fromLockScript, { config }),\n      { config }\n    );\n  } else if (enableNonSystemScript) {\n    txSkeleton = await common.setupInputCell(\n      txSkeleton,\n      fromInput,\n      fromInfo || encodeToAddress(fromLockScript, { config }),\n      { config }\n    );\n  }\n\n  const targetOutputIndex: number = txSkeleton.get(\"outputs\").size - 1;\n  const targetOutput: Cell = txSkeleton.get(\"outputs\").get(targetOutputIndex)!;\n  const clonedTargetOutput: Cell = JSON.parse(JSON.stringify(targetOutput));\n  if (!fromInput.blockNumber) {\n    throw new Error(\"fromInput has no blockNumber!\");\n  } else {\n    clonedTargetOutput.data = bytes.hexify(\n      number.Uint64.pack(fromInput.blockNumber)\n    );\n  }\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.update(targetOutputIndex, () => clonedTargetOutput);\n  });\n\n  // add header deps\n  txSkeleton = txSkeleton.update(\"headerDeps\", (headerDeps) => {\n    return headerDeps.push(fromInput.blockHash!);\n  });\n\n  // fix inputs / outputs / witnesses\n  txSkeleton = txSkeleton.update(\"fixedEntries\", (fixedEntries) => {\n    return fixedEntries.push(\n      {\n        field: \"inputs\",\n        index: txSkeleton.get(\"inputs\").size - 1,\n      },\n      {\n        field: \"outputs\",\n        index: txSkeleton.get(\"outputs\").size - 1,\n      }\n    );\n  });\n\n  return txSkeleton;\n}\n\nfunction parseEpochCompatible(epoch: BIish): {\n  length: BI;\n  index: BI;\n  number: BI;\n} {\n  const _epoch = BI.from(epoch);\n  return {\n    length: _epoch.shr(40).and(0xfff),\n    index: _epoch.shr(24).and(0xfff),\n    number: _epoch.and(0xffffff),\n  };\n}\n\nfunction epochSinceCompatible({\n  length,\n  index,\n  number,\n}: {\n  length: BIish;\n  index: BIish;\n  number: BIish;\n}): BI {\n  const _length = BI.from(length);\n  const _index = BI.from(index);\n  const _number = BI.from(number);\n  return BI.from(0x20)\n    .shl(56)\n    .add(_length.shl(40))\n    .add(_index.shl(24))\n    .add(_number);\n}\n\n/**\n * Unlock a withdrew DAO cell\n *\n * @param txSkeleton\n * @param depositInput deposited DAO cell\n * @param withdrawInput withdrew DAO cell\n * @param toAddress\n * @param fromInfo\n * @param options\n */\nexport async function unlock(\n  txSkeleton: TransactionSkeletonType,\n  depositInput: Cell,\n  withdrawInput: Cell,\n  toAddress: Address,\n  fromInfo: FromInfo,\n  {\n    config = undefined,\n    RpcClient = RPC,\n  }: Options & { RpcClient?: typeof RPC } = {}\n): Promise<TransactionSkeletonType> {\n  config = config || getConfig();\n  _checkDaoScript(config);\n  txSkeleton = _addDaoCellDep(txSkeleton, config);\n\n  if (!config.SCRIPTS.DAO) {\n    throw new Error(\"Provided config does not have DAO script setup!\");\n  }\n\n  const cellProvider = txSkeleton.get(\"cellProvider\");\n  if (!cellProvider) {\n    throw new Error(\"Cell provider is missing!\");\n  }\n  const rpc = new RpcClient(cellProvider.uri!);\n\n  const typeScript = depositInput.cellOutput.type;\n  const DAO_SCRIPT = config.SCRIPTS.DAO;\n  if (\n    !typeScript ||\n    typeScript.codeHash !== DAO_SCRIPT.CODE_HASH ||\n    typeScript.hashType !== DAO_SCRIPT.HASH_TYPE ||\n    depositInput.data !== DEPOSIT_DAO_DATA\n  ) {\n    throw new Error(\"depositInput is not a DAO deposit cell.\");\n  }\n\n  const withdrawTypeScript = withdrawInput.cellOutput.type;\n  if (\n    !withdrawTypeScript ||\n    withdrawTypeScript.codeHash !== DAO_SCRIPT.CODE_HASH ||\n    withdrawTypeScript.hashType !== DAO_SCRIPT.HASH_TYPE ||\n    withdrawInput.data === DEPOSIT_DAO_DATA\n  ) {\n    throw new Error(\"withdrawInput is not a DAO withdraw cell.\");\n  }\n\n  // calculate since & capacity (interest)\n  const depositBlockHeader = await rpc.getHeader(depositInput.blockHash!);\n  const depositEpoch = parseEpochCompatible(depositBlockHeader!.epoch);\n  // const depositCapacity = BigInt(depositInput.cellOutput.capacity)\n\n  const withdrawBlockHeader = await rpc.getHeader(withdrawInput.blockHash!);\n  const withdrawEpoch = parseEpochCompatible(withdrawBlockHeader!.epoch);\n\n  const withdrawFraction = withdrawEpoch.index.mul(depositEpoch.length);\n  const depositFraction = depositEpoch.index.mul(withdrawEpoch.length);\n  let depositedEpochs = withdrawEpoch.number.sub(depositEpoch.number);\n\n  if (withdrawFraction.gt(depositFraction)) {\n    depositedEpochs = depositedEpochs.add(1);\n  }\n\n  const lockEpochs = depositedEpochs\n    .add(DAO_LOCK_PERIOD_EPOCHS_COMPATIBLE)\n    .sub(1)\n    .div(DAO_LOCK_PERIOD_EPOCHS_COMPATIBLE)\n    .mul(DAO_LOCK_PERIOD_EPOCHS_COMPATIBLE);\n  const minimalSinceEpoch = {\n    number: BI.from(depositEpoch.number.add(lockEpochs)),\n    index: BI.from(depositEpoch.index),\n    length: BI.from(depositEpoch.length),\n  };\n  const minimalSince = epochSinceCompatible(minimalSinceEpoch);\n\n  const outputCapacity: HexString =\n    \"0x\" +\n    calculateMaximumWithdrawCompatible(\n      withdrawInput,\n      depositBlockHeader!.dao,\n      withdrawBlockHeader!.dao\n    ).toString(16);\n\n  const toScript = parseAddress(toAddress, { config });\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.push({\n      cellOutput: {\n        capacity: outputCapacity,\n        lock: toScript,\n        type: undefined,\n      },\n      data: \"0x\",\n      outPoint: undefined,\n      blockHash: undefined,\n    });\n  });\n\n  const since: PackedSince = \"0x\" + minimalSince.toString(16);\n\n  while (txSkeleton.get(\"witnesses\").size < txSkeleton.get(\"inputs\").size - 1) {\n    txSkeleton = txSkeleton.update(\"witnesses\", (witnesses) =>\n      witnesses.push(\"0x\")\n    );\n  }\n\n  // add header deps\n  txSkeleton = txSkeleton.update(\"headerDeps\", (headerDeps) => {\n    return headerDeps.push(depositInput.blockHash!, withdrawInput.blockHash!);\n  });\n\n  const depositHeaderDepIndex = txSkeleton.get(\"headerDeps\").size - 2;\n\n  // setup input cell\n  const defaultWitnessArgs: WitnessArgs = {\n    inputType: bytes.hexify(number.Uint64LE.pack(depositHeaderDepIndex)),\n  };\n  const defaultWitness: HexString = bytes.hexify(\n    blockchain.WitnessArgs.pack(defaultWitnessArgs)\n  );\n  const fromLockScript = withdrawInput.cellOutput.lock;\n  if (isSecp256k1Blake160Script(fromLockScript, config)) {\n    txSkeleton = await secp256k1Blake160.setupInputCell(\n      txSkeleton,\n      withdrawInput,\n      undefined,\n      {\n        config,\n        since,\n        defaultWitness,\n      }\n    );\n  } else if (isSecp256k1Blake160MultisigScript(fromLockScript, config)) {\n    txSkeleton = await secp256k1Blake160Multisig.setupInputCell(\n      txSkeleton,\n      withdrawInput,\n      fromInfo || generateAddress(fromLockScript, { config }),\n      { config, since, defaultWitness }\n    );\n  }\n  // remove change output by setupInputCell\n  const lastOutputIndex: number = txSkeleton.get(\"outputs\").size - 1;\n  txSkeleton = txSkeleton.update(\"outputs\", (outputs) => {\n    return outputs.remove(lastOutputIndex);\n  });\n\n  // fix inputs / outputs / witnesses\n  txSkeleton = txSkeleton.update(\"fixedEntries\", (fixedEntries) => {\n    return fixedEntries.push(\n      {\n        field: \"inputs\",\n        index: txSkeleton.get(\"inputs\").size - 1,\n      },\n      {\n        field: \"outputs\",\n        index: txSkeleton.get(\"outputs\").size - 1,\n      },\n      {\n        field: \"witnesses\",\n        index: txSkeleton.get(\"witnesses\").size - 1,\n      },\n      {\n        field: \"headerDeps\",\n        index: txSkeleton.get(\"headerDeps\").size - 2,\n      }\n    );\n  });\n\n  return txSkeleton;\n}\n\n/**\n * calculate a withdraw dao cell minimal unlock since\n *\n * @param depositBlockHeaderEpoch depositBlockHeader.epoch\n * @param withdrawBlockHeaderEpoch withdrawBlockHeader.epoch\n */\nexport function calculateDaoEarliestSince(\n  depositBlockHeaderEpoch: HexString,\n  withdrawBlockHeaderEpoch: HexString\n): bigint {\n  const result = calculateDaoEarliestSinceCompatible(\n    depositBlockHeaderEpoch,\n    withdrawBlockHeaderEpoch\n  );\n  return BigInt(result.toString());\n}\n\n/**\n * calculate a withdraw dao cell minimal unlock since\n *\n * @param depositBlockHeaderEpoch depositBlockHeader.epoch\n * @param withdrawBlockHeaderEpoch withdrawBlockHeader.epoch\n */\nexport function calculateDaoEarliestSinceCompatible(\n  depositBlockHeaderEpoch: HexString,\n  withdrawBlockHeaderEpoch: HexString\n): BI {\n  const depositEpoch = parseEpochCompatible(depositBlockHeaderEpoch);\n  const withdrawEpoch = parseEpochCompatible(withdrawBlockHeaderEpoch);\n  const withdrawFraction = withdrawEpoch.index.mul(depositEpoch.length);\n  const depositFraction = depositEpoch.index.mul(withdrawEpoch.length);\n  let depositedEpochs = withdrawEpoch.number.sub(depositEpoch.number);\n\n  if (withdrawFraction.gt(depositFraction)) {\n    depositedEpochs = depositedEpochs.add(1);\n  }\n\n  const lockEpochs = depositedEpochs\n    .add(DAO_LOCK_PERIOD_EPOCHS_COMPATIBLE)\n    .sub(1)\n    .div(DAO_LOCK_PERIOD_EPOCHS_COMPATIBLE)\n    .mul(DAO_LOCK_PERIOD_EPOCHS_COMPATIBLE);\n  const minimalSinceEpoch = {\n    number: BI.from(depositEpoch.number.add(lockEpochs)),\n    index: BI.from(depositEpoch.index),\n    length: BI.from(depositEpoch.length),\n  };\n  return epochSinceCompatible(minimalSinceEpoch);\n}\n\nfunction _checkDaoScript(config: Config): void {\n  const DAO_SCRIPT = config.SCRIPTS.DAO;\n  if (!DAO_SCRIPT) {\n    throw new Error(\"Provided config does not have DAO script setup!\");\n  }\n}\n\n/**\n *\n * @param {TransactionSkeleton} txSkeleton\n * @param {any} config\n * @returns {TransactionSkeleton} txSkeleton\n */\nfunction _addDaoCellDep(\n  txSkeleton: TransactionSkeletonType,\n  config: Config\n): TransactionSkeletonType {\n  const template = config.SCRIPTS.DAO!;\n  return addCellDep(txSkeleton, {\n    outPoint: {\n      txHash: template.TX_HASH,\n      index: template.INDEX,\n    },\n    depType: template.DEP_TYPE,\n  });\n}\n\nexport function extractDaoDataCompatible(dao: PackedDao): {\n  [key: string]: BI;\n} {\n  if (!/^(0x)?([0-9a-fA-F]){64}$/.test(dao)) {\n    throw new Error(\"Invalid dao format!\");\n  }\n\n  const len = 8 * 2;\n  const hex = dao.startsWith(\"0x\") ? dao.slice(2) : dao;\n\n  return [\"c\", \"ar\", \"s\", \"u\"]\n    .map((key, i) => {\n      return {\n        [key]: number.Uint64LE.unpack(\"0x\" + hex.slice(len * i, len * (i + 1))),\n      };\n    })\n    .reduce((result, c) => ({ ...result, ...c }), {});\n}\n\n/**\n * calculate maximum withdraw capacity when unlock\n *\n * @param withdrawCell withdrawCell or depositCell\n * @param depositDao depositBlockHeader.dao\n * @param withdrawDao withdrawBlockHeader.dao\n */\nexport function calculateMaximumWithdraw(\n  withdrawCell: Cell,\n  depositDao: PackedDao,\n  withdrawDao: PackedDao\n): bigint {\n  return calculateMaximumWithdrawCompatible(\n    withdrawCell,\n    depositDao,\n    withdrawDao\n  ).toBigInt();\n}\n\n/**\n * calculate maximum withdraw capacity when unlock\n *\n * @param withdrawCell withdrawCell or depositCell\n * @param depositDao depositBlockHeader.dao\n * @param withdrawDao withdrawBlockHeader.dao\n */\nexport function calculateMaximumWithdrawCompatible(\n  withdrawCell: Cell,\n  depositDao: PackedDao,\n  withdrawDao: PackedDao\n): BI {\n  const depositAR = BI.from(extractDaoDataCompatible(depositDao).ar);\n  const withdrawAR = BI.from(extractDaoDataCompatible(withdrawDao).ar);\n\n  const occupiedCapacity = BI.from(minimalCellCapacityCompatible(withdrawCell));\n  const outputCapacity = BI.from(withdrawCell.cellOutput.capacity);\n  const countedCapacity = outputCapacity.sub(occupiedCapacity);\n  const withdrawCountedCapacity = countedCapacity\n    .mul(withdrawAR)\n    .div(depositAR);\n\n  return withdrawCountedCapacity.add(occupiedCapacity);\n}\n\nexport default {\n  deposit,\n  withdraw,\n  unlock,\n  calculateMaximumWithdraw,\n  calculateMaximumWithdrawCompatible,\n  calculateDaoEarliestSince,\n  calculateDaoEarliestSinceCompatible,\n  CellCollector,\n  listDaoCells,\n};\n"],"mappings":"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"}