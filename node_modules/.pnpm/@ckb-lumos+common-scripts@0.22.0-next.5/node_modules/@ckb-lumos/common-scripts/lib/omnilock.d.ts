import { Options, TransactionSkeletonType } from "@ckb-lumos/helpers";
import { BytesLike } from "@ckb-lumos/codec";
import { Cell, HexString, PackedSince, Script } from "@ckb-lumos/base";
import { FromInfo } from ".";
import { CellCollectorConstructor } from "./type";
import * as bitcoin from "./omnilock-bitcoin";
export type OmnilockInfo = {
    auth: OmnilockAuth;
};
export type OmnilockAuth = IdentityCkb | IdentityEthereum | IdentityBitcoin;
export type IdentityCkb = {
    flag: "SECP256K1_BLAKE160";
    /**
     * the blake160 hash of a secp256k1 public key
     */
    content: BytesLike;
};
export type IdentityEthereum = {
    flag: "ETHEREUM";
    /**
     * an Ethereum address, aka the public key hash
     */
    content: BytesLike;
};
export type IdentityBitcoin = {
    flag: "BITCOIN";
    /**
     * a Bitcoin address, such as
     * `P2PKH(17VZNX1SN5NtKa8UQFxwQbFeFc3iqRYhem)`,
     * `P2SH(3EktnHQD7RiAE6uzMj2ZifT9YgRrkSgzQX)`,
     * `Bech32(bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4)`
     */
    content: string;
};
/**
 * only support ETHEREUM and SECP256K1_BLAKE160 mode currently
 * refer to: @link https://github.com/nervosnetwork/rfcs/blob/master/rfcs/0042-omnilock/0042-omnilock.md omnilock
 * @param omnilockInfo
 * @param options
 * @returns
 * @example
 * // create an omnilock to work with MetaMask wallet
 * createOmnilockScript({
 *   auth: {
 *     flag: "ETHEREUM",
 *     content: "an ethereum address here",
 *   }, { config })
 * // or we can create an omnilock to work with UniSat wallet
 * createOmnilockScript({
 *   auth: {
 *     flag: "BITCOIN",
 *     content: "a bitcoin address here",
 *   }
 * }, {config})
 */
export declare function createOmnilockScript(omnilockInfo: OmnilockInfo, options?: Options): Script;
export declare const OmnilockWitnessLock: import("@ckb-lumos/codec/lib/molecule").ObjectLayoutCodec<{
    signature: import("@ckb-lumos/codec/lib/molecule").OptionLayoutCodec<import("@ckb-lumos/codec/lib/base").BytesCodec<string, BytesLike>>;
    omni_identity: import("@ckb-lumos/codec/lib/molecule").OptionLayoutCodec<import("@ckb-lumos/codec/lib/molecule").ObjectLayoutCodec<{
        identity: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, BytesLike>;
        proofs: import("@ckb-lumos/codec/lib/molecule").ArrayLayoutCodec<import("@ckb-lumos/codec/lib/molecule").ObjectLayoutCodec<{
            mask: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, BytesLike>;
            proof: import("@ckb-lumos/codec/lib/base").BytesCodec<string, BytesLike>;
        }>>;
    }>>;
    preimage: import("@ckb-lumos/codec/lib/molecule").OptionLayoutCodec<import("@ckb-lumos/codec/lib/base").BytesCodec<string, BytesLike>>;
}>;
export declare const CellCollector: CellCollectorConstructor;
/**
 * Setup input cell infos, such as cell deps and witnesses.
 *
 * @param txSkeleton
 * @param inputCell
 * @param _fromInfo
 * @param options
 */
export declare function setupInputCell(txSkeleton: TransactionSkeletonType, inputCell: Cell, _fromInfo?: FromInfo, { config, defaultWitness, since, }?: Options & {
    defaultWitness?: HexString;
    since?: PackedSince;
}): Promise<TransactionSkeletonType>;
/**
 * prepare for txSkeleton signingEntries, will update txSkeleton.get("signingEntries")
 *
 * @param txSkeleton
 * @param options
 */
export declare function prepareSigningEntries(txSkeleton: TransactionSkeletonType, { config }?: Options): TransactionSkeletonType;
export { bitcoin };
declare const _default: {
    prepareSigningEntries: typeof prepareSigningEntries;
    setupInputCell: typeof setupInputCell;
    CellCollector: CellCollectorConstructor;
    OmnilockWitnessLock: import("@ckb-lumos/codec/lib/molecule").ObjectLayoutCodec<{
        signature: import("@ckb-lumos/codec/lib/molecule").OptionLayoutCodec<import("@ckb-lumos/codec/lib/base").BytesCodec<string, BytesLike>>;
        omni_identity: import("@ckb-lumos/codec/lib/molecule").OptionLayoutCodec<import("@ckb-lumos/codec/lib/molecule").ObjectLayoutCodec<{
            identity: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, BytesLike>;
            proofs: import("@ckb-lumos/codec/lib/molecule").ArrayLayoutCodec<import("@ckb-lumos/codec/lib/molecule").ObjectLayoutCodec<{
                mask: import("@ckb-lumos/codec/lib/base").FixedBytesCodec<string, BytesLike>;
                proof: import("@ckb-lumos/codec/lib/base").BytesCodec<string, BytesLike>;
            }>>;
        }>>;
        preimage: import("@ckb-lumos/codec/lib/molecule").OptionLayoutCodec<import("@ckb-lumos/codec/lib/base").BytesCodec<string, BytesLike>>;
    }>;
    createOmnilockScript: typeof createOmnilockScript;
};
export default _default;
//# sourceMappingURL=omnilock.d.ts.map