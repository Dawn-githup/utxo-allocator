import { ErrorCode } from '@nervosnetwork/ckb-sdk-utils';
export class PageSizeTooLargeException extends RangeError {
    constructor(pageSize, maxSize) {
        super(`Expect page size to be at most ${maxSize}, but ${pageSize} received`);
        this.code = ErrorCode.ParameterInvalid;
    }
}
export class PageSizeTooSmallException extends RangeError {
    constructor(pageSize, minSize) {
        super(`Expect page size to be at least ${minSize}, but ${pageSize} received`);
        this.code = ErrorCode.ParameterInvalid;
    }
}
export class OutputsValidatorTypeException extends TypeError {
    constructor() {
        super(`Expect outputs validator to be 'default' or 'passthrough'`);
        this.code = ErrorCode.ParameterInvalid;
    }
}
export class BigintOrHexStringTypeException extends TypeError {
    constructor(value) {
        super(`Expect number to be bigint or hex string, but ${value} received`);
        this.code = ErrorCode.ParameterInvalid;
    }
}
export class StringHashTypeException extends TypeError {
    constructor(hash) {
        super(`Expect hash to be string, but ${hash} received`);
        this.code = ErrorCode.ParameterInvalid;
    }
}
export default {
    PageSizeTooLargeException,
    PageSizeTooSmallException,
    OutputsValidatorTypeException,
    BigintOrHexStringTypeException,
    StringHashTypeException,
};
//# sourceMappingURL=formatter.js.map