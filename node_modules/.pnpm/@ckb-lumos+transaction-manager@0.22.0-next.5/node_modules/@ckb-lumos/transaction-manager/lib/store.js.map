{"version":3,"file":"store.js","names":["createInMemoryStorage","store","Map","getItem","key","value","get","JSON","parse","stringify","hasItem","has","removeItem","delete","setItem","set"],"sources":["../src/store.ts"],"sourcesContent":["export type Promisable<T> = PromiseLike<T> | T;\ntype KeyOf<T> = keyof T & string;\n\n/**\n * key-value storage\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface Store<Schema = any> {\n  hasItem<K extends KeyOf<Schema>>(key: K): Promisable<boolean>;\n  getItem<K extends KeyOf<Schema>>(key: K): Promisable<Schema[K] | undefined>;\n  removeItem<K extends KeyOf<Schema>>(key: K): Promisable<void>;\n  setItem<K extends KeyOf<Schema>>(key: K, value: Schema[K]): Promisable<void>;\n}\n\nexport function createInMemoryStorage<S>(): Store<S> {\n  const store = new Map();\n  return {\n    getItem(key) {\n      const value = store.get(key) as string | undefined;\n      if (!value) return value as undefined;\n      // deep clone to avoid the value being modified by the caller\n      return JSON.parse(JSON.stringify(value));\n    },\n    hasItem(key) {\n      return store.has(key);\n    },\n    removeItem(key) {\n      store.delete(key);\n    },\n    setItem(key, value) {\n      store.set(key, value);\n    },\n  };\n}\n"],"mappings":";;;;;;AAGA;AACA;AACA;AACA;;AAQO,SAASA,qBAAqBA,CAAA,EAAgB;EACnD,MAAMC,KAAK,GAAG,IAAIC,GAAG,CAAC,CAAC;EACvB,OAAO;IACLC,OAAOA,CAACC,GAAG,EAAE;MACX,MAAMC,KAAK,GAAGJ,KAAK,CAACK,GAAG,CAACF,GAAG,CAAuB;MAClD,IAAI,CAACC,KAAK,EAAE,OAAOA,KAAK;MACxB;MACA,OAAOE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACJ,KAAK,CAAC,CAAC;IAC1C,CAAC;IACDK,OAAOA,CAACN,GAAG,EAAE;MACX,OAAOH,KAAK,CAACU,GAAG,CAACP,GAAG,CAAC;IACvB,CAAC;IACDQ,UAAUA,CAACR,GAAG,EAAE;MACdH,KAAK,CAACY,MAAM,CAACT,GAAG,CAAC;IACnB,CAAC;IACDU,OAAOA,CAACV,GAAG,EAAEC,KAAK,EAAE;MAClBJ,KAAK,CAACc,GAAG,CAACX,GAAG,EAAEC,KAAK,CAAC;IACvB;EACF,CAAC;AACH"}