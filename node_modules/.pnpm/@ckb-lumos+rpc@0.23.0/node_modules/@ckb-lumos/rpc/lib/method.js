"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Method = void 0;
var _exceptions = require("./exceptions");
var _ = require(".");
var _abortController = _interopRequireDefault(require("abort-controller"));
var _crossFetch = _interopRequireDefault(require("cross-fetch"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class Method {
  #name;
  #config;
  get name() {
    return this.#name;
  }
  #options = {
    name: "",
    method: "",
    paramsFormatters: [],
    resultFormatters: undefined
  };
  #node;
  constructor(node, options, config = {}) {
    this.#node = node;
    this.#options = options;
    this.#name = options.name;
    const {
      timeout = _.DEFAULT_RPC_TIMEOUT,
      fetch = _crossFetch.default
    } = config;
    this.#config = {
      timeout,
      fetch
    };
    Object.defineProperty(this.call, "name", {
      value: options.name,
      configurable: false,
      writable: false
    });
  }

  /* eslint-disable @typescript-eslint/ban-types, @typescript-eslint/explicit-module-boundary-types */
  call = async (...params) => {
    const payload = this.getPayload(...params);
    const controller = new _abortController.default();
    const signal = controller.signal;
    const timeout = setTimeout(() => controller.abort(), this.#config.timeout);
    const res = await this.#config.fetch(this.#node.url, {
      method: "POST",
      headers: {
        "content-type": "application/json"
      },
      body: JSON.stringify(payload),
      signal
    }).then(res => res.json()).then(res => {
      var _this$options$resultF, _this$options$resultF2, _this$options;
      if (res.id !== payload.id) {
        throw new _exceptions.IdNotMatchException(payload.id, res.id);
      }
      if (res.error) {
        throw new _exceptions.ResponseException(JSON.stringify(res.error));
      }
      return (_this$options$resultF = (_this$options$resultF2 = (_this$options = this.#options).resultFormatters) === null || _this$options$resultF2 === void 0 ? void 0 : _this$options$resultF2.call(_this$options, res.result)) !== null && _this$options$resultF !== void 0 ? _this$options$resultF : res.result;
    });
    clearTimeout(timeout);
    return res;
  };
  getPayload = (...params) => {
    const data = params.map((p, i) => this.#options.paramsFormatters[i] && this.#options.paramsFormatters[i](p) || p);
    /* eslint-disable @typescript-eslint/no-magic-numbers */
    const id = Math.round(Math.random() * 10000);
    const payload = {
      id,
      method: this.#options.method,
      params: data,
      jsonrpc: "2.0"
    };
    return payload;
  };
}
/* eslint-enable @typescript-eslint/ban-types, @typescript-eslint/explicit-module-boundary-types */
exports.Method = Method;
//# sourceMappingURL=method.js.map