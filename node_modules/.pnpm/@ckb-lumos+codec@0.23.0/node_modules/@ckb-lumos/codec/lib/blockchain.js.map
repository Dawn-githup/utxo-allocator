{"version":3,"file":"blockchain.js","names":["_base","require","_bytes","_molecule","createFixedHexBytesCodec","byteLength","createFixedBytesCodec","pack","hex","bytify","unpack","buf","hexify","Bytes","exports","byteVecOf","BytesOpt","option","BytesVec","vector","Byte32","Byte32Vec","WitnessArgsOf","payload","table","lock","input_type","output_type","HexifyCodec","createBytesCodec","WitnessArgs"],"sources":["../src/blockchain.ts"],"sourcesContent":["import {\n  AnyCodec,\n  BytesCodec,\n  BytesLike,\n  createBytesCodec,\n  createFixedBytesCodec,\n  FixedBytesCodec,\n  PackParam,\n  UnpackResult,\n} from \"./base\";\nimport { bytify, hexify } from \"./bytes\";\nimport { byteVecOf, option, table, vector } from \"./molecule\";\n\nexport function createFixedHexBytesCodec(\n  byteLength: number\n): FixedBytesCodec<string, BytesLike> {\n  return createFixedBytesCodec({\n    byteLength,\n    pack: (hex) => bytify(hex),\n    unpack: (buf) => hexify(buf),\n  });\n}\n\n/**\n * placeholder codec, generally used as a placeholder\n * ```\n * // for example, when some BytesOpt is not used, it will be filled with this codec\n * // option BytesOpt (Bytes);\n * const UnusedBytesOpt = UnknownOpt\n * ```\n */\n// export const UnusedOpt = option(Unknown);\n\n// vector Bytes <byte>\nexport const Bytes = byteVecOf({ pack: bytify, unpack: hexify });\n\nexport const BytesOpt = option(Bytes);\nexport const BytesVec = vector(Bytes);\nexport const Byte32 = createFixedHexBytesCodec(32);\nexport const Byte32Vec = vector(Byte32);\n\nexport function WitnessArgsOf<\n  LockCodec extends AnyCodec,\n  InputTypeCodec extends AnyCodec,\n  OutputTypeCodec extends AnyCodec\n>(payload: {\n  lock: LockCodec;\n  input_type: InputTypeCodec;\n  output_type: OutputTypeCodec;\n}): BytesCodec<\n  {\n    lock?: UnpackResult<LockCodec>;\n    input_type?: UnpackResult<InputTypeCodec>;\n    output_type?: UnpackResult<OutputTypeCodec>;\n  },\n  {\n    lock?: PackParam<LockCodec>;\n    input_type?: PackParam<InputTypeCodec>;\n    output_type?: PackParam<OutputTypeCodec>;\n  }\n> {\n  return table(\n    {\n      lock: option(byteVecOf(payload.lock)),\n      input_type: option(byteVecOf(payload.input_type)),\n      output_type: option(byteVecOf(payload.output_type)),\n    },\n    [\"lock\", \"input_type\", \"output_type\"]\n  );\n}\n\nconst HexifyCodec = createBytesCodec<string, BytesLike>({\n  pack: bytify,\n  unpack: hexify,\n});\n\n/**\n *\n * @example\n * ```ts\n * // secp256k1 lock witness\n * WitnessArgs.pack({ lock: '0x' + '00'.repeat(65) })\n * ```\n */\nexport const WitnessArgs = WitnessArgsOf({\n  lock: HexifyCodec,\n  input_type: HexifyCodec,\n  output_type: HexifyCodec,\n});\n"],"mappings":";;;;;;;;AAAA,IAAAA,KAAA,GAAAC,OAAA;AAUA,IAAAC,MAAA,GAAAD,OAAA;AACA,IAAAE,SAAA,GAAAF,OAAA;AAEO,SAASG,wBAAwBA,CACtCC,UAAkB,EACkB;EACpC,OAAO,IAAAC,2BAAqB,EAAC;IAC3BD,UAAU;IACVE,IAAI,EAAGC,GAAG,IAAK,IAAAC,aAAM,EAACD,GAAG,CAAC;IAC1BE,MAAM,EAAGC,GAAG,IAAK,IAAAC,aAAM,EAACD,GAAG;EAC7B,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACO,MAAME,KAAK,GAAAC,OAAA,CAAAD,KAAA,GAAG,IAAAE,mBAAS,EAAC;EAAER,IAAI,EAAEE,aAAM;EAAEC,MAAM,EAAEE;AAAO,CAAC,CAAC;AAEzD,MAAMI,QAAQ,GAAAF,OAAA,CAAAE,QAAA,GAAG,IAAAC,gBAAM,EAACJ,KAAK,CAAC;AAC9B,MAAMK,QAAQ,GAAAJ,OAAA,CAAAI,QAAA,GAAG,IAAAC,gBAAM,EAACN,KAAK,CAAC;AAC9B,MAAMO,MAAM,GAAAN,OAAA,CAAAM,MAAA,GAAGhB,wBAAwB,CAAC,EAAE,CAAC;AAC3C,MAAMiB,SAAS,GAAAP,OAAA,CAAAO,SAAA,GAAG,IAAAF,gBAAM,EAACC,MAAM,CAAC;AAEhC,SAASE,aAAaA,CAI3BC,OAID,EAWC;EACA,OAAO,IAAAC,eAAK,EACV;IACEC,IAAI,EAAE,IAAAR,gBAAM,EAAC,IAAAF,mBAAS,EAACQ,OAAO,CAACE,IAAI,CAAC,CAAC;IACrCC,UAAU,EAAE,IAAAT,gBAAM,EAAC,IAAAF,mBAAS,EAACQ,OAAO,CAACG,UAAU,CAAC,CAAC;IACjDC,WAAW,EAAE,IAAAV,gBAAM,EAAC,IAAAF,mBAAS,EAACQ,OAAO,CAACI,WAAW,CAAC;EACpD,CAAC,EACD,CAAC,MAAM,EAAE,YAAY,EAAE,aAAa,CACtC,CAAC;AACH;AAEA,MAAMC,WAAW,GAAG,IAAAC,sBAAgB,EAAoB;EACtDtB,IAAI,EAAEE,aAAM;EACZC,MAAM,EAAEE;AACV,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMkB,WAAW,GAAAhB,OAAA,CAAAgB,WAAA,GAAGR,aAAa,CAAC;EACvCG,IAAI,EAAEG,WAAW;EACjBF,UAAU,EAAEE,WAAW;EACvBD,WAAW,EAAEC;AACf,CAAC,CAAC","ignoreList":[]}