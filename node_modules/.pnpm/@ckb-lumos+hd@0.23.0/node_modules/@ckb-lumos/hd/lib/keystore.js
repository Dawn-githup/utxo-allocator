"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.UnsupportedCipher = exports.InvalidKeystore = exports.IncorrectPassword = void 0;
var _crypto = _interopRequireDefault(require("crypto"));
var _sha = require("sha3");
var _uuid = require("uuid");
var _extended_key = require("./extended_key");
var _scryptJs = require("scrypt-js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class UnsupportedCipher extends Error {
  constructor() {
    super("Unsupported cipher!");
  }
}
exports.UnsupportedCipher = UnsupportedCipher;
class IncorrectPassword extends Error {
  constructor() {
    super("Incorrect password!");
  }
}
exports.IncorrectPassword = IncorrectPassword;
class InvalidKeystore extends Error {
  constructor() {
    super("Invalid keystore, please check your file integrity.");
  }
}
exports.InvalidKeystore = InvalidKeystore;
const CIPHER = "aes-128-ctr";
const CKB_CLI_ORIGIN = "ckb-cli";
// The parameter r ("blockSize")
//    specifies the block size.
const DEFAULT_SCRIPT_PARAM_r = 8;
// The parallelization parameter p
//    ("parallelizationParameter") is a positive integer less than or equal
//    to ((2^32-1) * 32) / (128 * r)
const DEFAULT_SCRIPT_PARAM_p = 1;
// The CPU/Memory cost parameter N
//    ("costParameter") must be larger than 1, a power of 2, and less than
//    2^(128 * r / 8)
const DEFAULT_SCRYPT_PARAM_N = 262144;

// Encrypt and save master extended private key.
class Keystore {
  version = 3;
  constructor(theCrypto, id, origin) {
    this.crypto = theCrypto;
    this.id = id;
    this.origin = origin;
  }
  static fromJson(json) {
    try {
      const object = JSON.parse(json);
      return new Keystore(object.crypto, object.id, object.origin);
    } catch {
      throw new InvalidKeystore();
    }
  }
  toJson() {
    return JSON.stringify(this);
  }
  isFromCkbCli() {
    return this.origin === CKB_CLI_ORIGIN;
  }

  // Create an empty keystore object that contains empty private key
  static createEmpty() {
    const saltSize = 32;
    const salt = _crypto.default.randomBytes(saltSize);
    const iv = _crypto.default.randomBytes(16);
    const kdfparams = {
      dklen: 32,
      salt: salt.toString("hex"),
      n: DEFAULT_SCRYPT_PARAM_N,
      r: DEFAULT_SCRIPT_PARAM_r,
      p: DEFAULT_SCRIPT_PARAM_p
    };
    return new Keystore({
      ciphertext: "",
      cipherparams: {
        iv: iv.toString("hex")
      },
      cipher: CIPHER,
      kdf: "scrypt",
      kdfparams,
      mac: ""
    }, (0, _uuid.v4)());
  }
  static create(extendedPrivateKey, password, options = {}) {
    const saltSize = 32;
    const ivSize = 16;
    const salt = options.salt || _crypto.default.randomBytes(saltSize);
    const iv = options.iv || _crypto.default.randomBytes(ivSize);
    const kdfparams = {
      dklen: 32,
      salt: salt.toString("hex"),
      n: DEFAULT_SCRYPT_PARAM_N,
      r: DEFAULT_SCRIPT_PARAM_r,
      p: DEFAULT_SCRIPT_PARAM_p
    };
    const derivedKey = Buffer.from((0, _scryptJs.syncScrypt)(Buffer.from(password), salt, kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen));
    const cipher = _crypto.default.createCipheriv(CIPHER, derivedKey.slice(0, 16), iv);
    if (!cipher) {
      throw new UnsupportedCipher();
    }

    // size of 0x prefix
    const hexPrefixSize = 2;
    const ciphertext = Buffer.concat([cipher.update(Buffer.from(extendedPrivateKey.serialize().slice(hexPrefixSize), "hex")), cipher.final()]);
    return new Keystore({
      ciphertext: ciphertext.toString("hex"),
      cipherparams: {
        iv: iv.toString("hex")
      },
      cipher: CIPHER,
      kdf: "scrypt",
      kdfparams,
      mac: Keystore.mac(derivedKey, ciphertext)
    }, (0, _uuid.v4)());
  }

  // Imported from xpub with empty private key.
  isEmpty() {
    return this.crypto.ciphertext === "" && this.crypto.mac === "";
  }

  // Decrypt and return serialized extended private key.
  decrypt(password) {
    const derivedKey = this.derivedKey(password);
    const ciphertext = Buffer.from(this.crypto.ciphertext, "hex");
    if (Keystore.mac(derivedKey, ciphertext) !== this.crypto.mac) {
      throw new IncorrectPassword();
    }
    const decipher = _crypto.default.createDecipheriv(this.crypto.cipher, derivedKey.slice(0, 16), Buffer.from(this.crypto.cipherparams.iv, "hex"));
    return "0x" + Buffer.concat([decipher.update(ciphertext), decipher.final()]).toString("hex");
  }
  extendedPrivateKey(password) {
    return _extended_key.ExtendedPrivateKey.parse(this.decrypt(password));
  }
  checkPassword(password) {
    const derivedKey = this.derivedKey(password);
    const ciphertext = Buffer.from(this.crypto.ciphertext, "hex");
    return Keystore.mac(derivedKey, ciphertext) === this.crypto.mac;
  }
  derivedKey(password) {
    const {
      kdfparams
    } = this.crypto;
    return Buffer.from((0, _scryptJs.syncScrypt)(Buffer.from(password), Buffer.from(kdfparams.salt, "hex"), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen));
  }
  static mac(derivedKey, ciphertext) {
    const keccakSize = 256;
    return new _sha.Keccak(keccakSize)
    // https://github.com/ethereumjs/ethereumjs-wallet/blob/d57582443fbac2b63956e6d5c4193aa8ce925b3d/src/index.ts#L615-L617
    // eslint-disable-next-line @typescript-eslint/no-magic-numbers
    .update(Buffer.concat([derivedKey.subarray(16, 32), ciphertext])).digest("hex");
  }
  static scryptOptions(kdfparams) {
    return {
      N: kdfparams.n,
      r: kdfparams.r,
      p: kdfparams.p,
      // eslint-disable-next-line @typescript-eslint/no-magic-numbers
      maxmem: 128 * (kdfparams.n + kdfparams.p + 2) * kdfparams.r
    };
  }
}
exports.default = Keystore;
//# sourceMappingURL=keystore.js.map