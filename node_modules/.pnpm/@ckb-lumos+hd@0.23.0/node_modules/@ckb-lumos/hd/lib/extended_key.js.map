{"version":3,"file":"extended_key.js","names":["_keychain","_interopRequireDefault","require","_key","_interopRequireWildcard","_base","_helper","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","obj","AddressType","exports","ExtendedPublicKey","constructor","publicKey","chainCode","assertPublicKey","assertChainCode","serialize","slice","parse","serialized","utils","assertHexString","AccountExtendedPublicKey","ckbAccountPath","publicKeyInfo","type","index","getPublicKey","blake160","key","publicKeyToBlake160","path","pathFor","pathForReceiving","Receiving","pathForChange","Change","keychain","Keychain","fromPublicKey","Buffer","from","deriveChild","toString","ExtendedPrivateKey","privateKey","assertPrivateKey","toExtendedPublicKey","privateToPublic","toAccountExtendedPublicKey","masterKeychain","accountKeychain","derivePath","fromSeed","seed","privateKeyInfo","privateKeyInfoByPath","privateKeyInfoFromKeychain"],"sources":["../src/extended_key.ts"],"sourcesContent":["import Keychain from \"./keychain\";\nimport key, { privateToPublic } from \"./key\";\nimport { utils, HexString } from \"@ckb-lumos/base\";\nimport { assertPublicKey, assertChainCode, assertPrivateKey } from \"./helper\";\n\nexport enum AddressType {\n  Receiving = 0,\n  Change = 1,\n}\n\nexport interface PublicKeyInfo {\n  blake160: HexString;\n  path: string;\n  publicKey: HexString;\n}\n\nexport class ExtendedPublicKey {\n  publicKey: HexString;\n  chainCode: HexString;\n\n  constructor(publicKey: HexString, chainCode: HexString) {\n    assertPublicKey(publicKey);\n    assertChainCode(chainCode);\n\n    this.publicKey = publicKey;\n    this.chainCode = chainCode;\n  }\n\n  serialize(): HexString {\n    return this.publicKey + this.chainCode.slice(2);\n  }\n\n  static parse(serialized: HexString): ExtendedPublicKey {\n    utils.assertHexString(\"serialized\", serialized);\n    return new ExtendedPublicKey(\n      serialized.slice(0, 68),\n      \"0x\" + serialized.slice(68)\n    );\n  }\n}\n\n// Extended public key of the BIP44 path down to account level,\n// which is `m/44'/309'/0'`. This key will be persisted to wallet\n// and used to derive receiving/change addresses.\nexport class AccountExtendedPublicKey extends ExtendedPublicKey {\n  public static ckbAccountPath = `m/44'/309'/0'`;\n\n  static parse(serialized: HexString): AccountExtendedPublicKey {\n    utils.assertHexString(\"serialized\", serialized);\n    return new AccountExtendedPublicKey(\n      serialized.slice(0, 68),\n      \"0x\" + serialized.slice(68)\n    );\n  }\n\n  publicKeyInfo(type: AddressType, index: number): PublicKeyInfo {\n    const publicKey: string = this.getPublicKey(type, index);\n    const blake160: string = key.publicKeyToBlake160(publicKey);\n    return {\n      publicKey,\n      blake160,\n      path: AccountExtendedPublicKey.pathFor(type, index),\n    };\n  }\n\n  public static pathForReceiving(index: number) {\n    return AccountExtendedPublicKey.pathFor(AddressType.Receiving, index);\n  }\n\n  public static pathForChange(index: number) {\n    return AccountExtendedPublicKey.pathFor(AddressType.Change, index);\n  }\n\n  public static pathFor(type: AddressType, index: number): string {\n    return `${AccountExtendedPublicKey.ckbAccountPath}/${type}/${index}`;\n  }\n\n  private getPublicKey(type = AddressType.Receiving, index: number): HexString {\n    const keychain = Keychain.fromPublicKey(\n      Buffer.from(this.publicKey.slice(2), \"hex\"),\n      Buffer.from(this.chainCode.slice(2), \"hex\"),\n      AccountExtendedPublicKey.ckbAccountPath\n    )\n      .deriveChild(type, false)\n      .deriveChild(index, false);\n\n    return \"0x\" + keychain.publicKey.toString(\"hex\");\n  }\n}\n\nexport interface PrivateKeyInfo {\n  privateKey: HexString;\n  publicKey: HexString;\n  path: string;\n}\n\nexport class ExtendedPrivateKey {\n  privateKey: HexString;\n  chainCode: HexString;\n\n  constructor(privateKey: HexString, chainCode: HexString) {\n    assertPrivateKey(privateKey);\n    assertChainCode(chainCode);\n\n    this.privateKey = privateKey;\n    this.chainCode = chainCode;\n  }\n\n  serialize(): HexString {\n    return this.privateKey + this.chainCode.slice(2);\n  }\n\n  toExtendedPublicKey(): ExtendedPublicKey {\n    const publicKey: HexString = privateToPublic(this.privateKey);\n    return new ExtendedPublicKey(publicKey, this.chainCode);\n  }\n\n  toAccountExtendedPublicKey(): AccountExtendedPublicKey {\n    const masterKeychain = new Keychain(\n      Buffer.from(this.privateKey.slice(2), \"hex\"),\n      Buffer.from(this.chainCode.slice(2), \"hex\")\n    );\n    const accountKeychain = masterKeychain.derivePath(\n      AccountExtendedPublicKey.ckbAccountPath\n    );\n\n    return new AccountExtendedPublicKey(\n      \"0x\" + accountKeychain.publicKey.toString(\"hex\"),\n      \"0x\" + accountKeychain.chainCode.toString(\"hex\")\n    );\n  }\n\n  static fromSeed(seed: Buffer): ExtendedPrivateKey {\n    const keychain = Keychain.fromSeed(seed);\n    return new ExtendedPrivateKey(\n      \"0x\" + keychain.privateKey.toString(\"hex\"),\n      \"0x\" + keychain.chainCode.toString(\"hex\")\n    );\n  }\n\n  privateKeyInfo(type: AddressType, index: number): PrivateKeyInfo {\n    const path = AccountExtendedPublicKey.pathFor(type, index);\n    return this.privateKeyInfoByPath(path);\n  }\n\n  privateKeyInfoByPath(path: string): PrivateKeyInfo {\n    const keychain = new Keychain(\n      Buffer.from(this.privateKey.slice(2), \"hex\"),\n      Buffer.from(this.chainCode.slice(2), \"hex\")\n    ).derivePath(path);\n\n    return this.privateKeyInfoFromKeychain(keychain, path);\n  }\n\n  private privateKeyInfoFromKeychain(\n    keychain: Keychain,\n    path: string\n  ): PrivateKeyInfo {\n    return {\n      privateKey: \"0x\" + keychain.privateKey.toString(\"hex\"),\n      publicKey: \"0x\" + keychain.publicKey.toString(\"hex\"),\n      path: path,\n    };\n  }\n\n  static parse(serialized: HexString): ExtendedPrivateKey {\n    utils.assertHexString(\"serialized\", serialized);\n    return new ExtendedPrivateKey(\n      serialized.slice(0, 66),\n      \"0x\" + serialized.slice(66)\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]}