"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSporeCacheScriptByCodeHash = exports.getSporeCacheScriptsByTags = exports.getSporeCacheScriptsByTag = exports.createSporeConfigCache = exports.getSporeConfigCache = exports.setSporeConfigCache = void 0;
const cloneDeep_1 = __importDefault(require("lodash/cloneDeep"));
const hash_1 = require("./hash");
const cacheStore = new Map();
/**
 * Create a SporeCache from SporeConfig and store in cache.
 */
function setSporeConfigCache(config) {
    const cache = createSporeConfigCache(config);
    cacheStore.set(cache.hash, cache);
}
exports.setSporeConfigCache = setSporeConfigCache;
/**
 * Get a SporeConfig's corresponding SporeCache.
 * If not exists, create one and store in cache, and then return the new SporeCache.
 */
function getSporeConfigCache(config) {
    const hash = (0, hash_1.getSporeConfigHash)(config);
    if (cacheStore.has(hash)) {
        return cacheStore.get(hash);
    }
    setSporeConfigCache(config);
    return cacheStore.get(hash);
}
exports.getSporeConfigCache = getSporeConfigCache;
/**
 * Create a SporeConfigCache from SporeConfig.
 * Will generate mapping info for the scripts to save time when searching.
 */
function createSporeConfigCache(config) {
    const hash = (0, hash_1.getSporeConfigHash)(config);
    const scriptsByCodeHash = {};
    const scriptsByTag = {};
    const scriptsByTags = {};
    const queryRecordsByTags = {};
    for (const scriptName in config.scripts) {
        const scriptCategory = config.scripts[scriptName];
        const scriptTagMap = {};
        const scriptTagsMap = {};
        for (const script of scriptCategory.versions) {
            const categorizedScript = {
                name: scriptName,
                ...(0, cloneDeep_1.default)(script),
            };
            scriptsByCodeHash[script.script.codeHash] = categorizedScript;
            const tags = script.tags.sort();
            for (const tag of tags) {
                if (scriptTagMap[tag] === void 0) {
                    scriptTagMap[tag] = [];
                }
                scriptTagMap[tag].push(categorizedScript);
            }
            const combinedTags = tags.join(',');
            if (!scriptTagsMap[combinedTags]) {
                scriptTagsMap[combinedTags] = [];
            }
            scriptTagsMap[combinedTags].push(categorizedScript);
        }
        scriptsByTag[scriptName] = scriptTagMap;
        scriptsByTags[scriptName] = scriptTagsMap;
        queryRecordsByTags[scriptName] = {};
    }
    return {
        hash,
        config,
        scriptsByTag,
        scriptsByTags,
        scriptsByCodeHash,
        queryRecordsByTags,
    };
}
exports.createSporeConfigCache = createSporeConfigCache;
/**
 * Search for a specific list of SporeScripts by "scriptName" and "tag" in a SporeConfigCache.
 */
function getSporeCacheScriptsByTag(cache, scriptName, tag) {
    const scripts = cache.scriptsByTag[scriptName]?.[tag];
    if (!Array.isArray(scripts)) {
        return void 0;
    }
    return scripts;
}
exports.getSporeCacheScriptsByTag = getSporeCacheScriptsByTag;
/**
 * Search SporeConfig by "scriptName" and "tags" in a SporeConfigCache.
 */
function getSporeCacheScriptsByTags(cache, scriptName, tags) {
    if (tags.length === 1) {
        return getSporeCacheScriptsByTag(cache, scriptName, tags[0]);
    }
    const recordsMap = cache.queryRecordsByTags[scriptName];
    const sortedTags = tags.sort();
    const key = sortedTags.join(',');
    if (recordsMap && key in recordsMap) {
        return recordsMap[key];
    }
    const scriptsMap = cache.scriptsByTags[scriptName];
    if (!scriptsMap) {
        return void 0;
    }
    const patterns = sortedTags.join(',.*');
    const regex = new RegExp(`${patterns}.*`, 'g');
    const match = Object.entries(scriptsMap).filter(([_tags]) => {
        return regex.test(_tags);
    });
    if (match) {
        const matchScripts = match.reduce((matches, [_, scripts]) => {
            matches.push(...scripts);
            return matches;
        }, []);
        recordsMap[key] = matchScripts;
        return matchScripts;
    }
    return void 0;
}
exports.getSporeCacheScriptsByTags = getSporeCacheScriptsByTags;
/**
 * Search for a specific SporeScript by "codeHash" in a SporeCache.
 * If "scriptName" is passed, it also checks whether the name of the target script matches.
 */
function getSporeCacheScriptByCodeHash(cache, codeHash, scriptName) {
    const script = cache.scriptsByCodeHash[codeHash];
    if (scriptName && script.name !== scriptName) {
        return void 0;
    }
    return script;
}
exports.getSporeCacheScriptByCodeHash = getSporeCacheScriptByCodeHash;
//# sourceMappingURL=cache.js.map