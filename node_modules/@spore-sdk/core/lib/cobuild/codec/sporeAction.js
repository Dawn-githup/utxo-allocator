"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SporeAction = exports.MeltClusterAgent = exports.TransferClusterAgent = exports.CreateClusterAgent = exports.MeltClusterProxy = exports.TransferClusterProxy = exports.CreateClusterProxy = exports.TransferCluster = exports.CreateCluster = exports.MeltSpore = exports.TransferSpore = exports.CreateSpore = exports.Address = void 0;
const codec_1 = require("@ckb-lumos/codec");
const base_1 = require("@ckb-lumos/base");
const codec_2 = require("../../codec");
exports.Address = codec_1.molecule.union({
    Script: base_1.blockchain.Script,
}, ['Script']);
/**
 * Spore
 */
exports.CreateSpore = codec_1.molecule.table({
    sporeId: codec_2.Hash,
    to: exports.Address,
    dataHash: codec_2.Hash,
}, ['sporeId', 'to', 'dataHash']);
exports.TransferSpore = codec_1.molecule.table({
    sporeId: codec_2.Hash,
    from: exports.Address,
    to: exports.Address,
}, ['sporeId', 'from', 'to']);
exports.MeltSpore = codec_1.molecule.table({
    sporeId: codec_2.Hash,
    from: exports.Address,
}, ['sporeId', 'from']);
/**
 * Cluster
 */
exports.CreateCluster = codec_1.molecule.table({
    clusterId: codec_2.Hash,
    to: exports.Address,
    dataHash: codec_2.Hash,
}, ['clusterId', 'to', 'dataHash']);
exports.TransferCluster = codec_1.molecule.table({
    clusterId: codec_2.Hash,
    from: exports.Address,
    to: exports.Address,
}, ['clusterId', 'from', 'to']);
/**
 * ClusterProxy
 */
exports.CreateClusterProxy = codec_1.molecule.table({
    clusterId: codec_2.Hash,
    clusterProxyId: codec_2.Hash,
    to: exports.Address,
}, ['clusterId', 'clusterProxyId', 'to']);
exports.TransferClusterProxy = codec_1.molecule.table({
    clusterId: codec_2.Hash,
    clusterProxyId: codec_2.Hash,
    from: exports.Address,
    to: exports.Address,
}, ['clusterId', 'clusterProxyId', 'from', 'to']);
exports.MeltClusterProxy = codec_1.molecule.table({
    clusterId: codec_2.Hash,
    clusterProxyId: codec_2.Hash,
    from: exports.Address,
}, ['clusterId', 'clusterProxyId', 'from']);
/**
 * ClusterAgent
 */
exports.CreateClusterAgent = codec_1.molecule.table({
    clusterId: codec_2.Hash,
    clusterProxyId: codec_2.Hash,
    to: exports.Address,
}, ['clusterId', 'clusterProxyId', 'to']);
exports.TransferClusterAgent = codec_1.molecule.table({
    clusterId: codec_2.Hash,
    from: exports.Address,
    to: exports.Address,
}, ['clusterId', 'from', 'to']);
exports.MeltClusterAgent = codec_1.molecule.table({
    clusterId: codec_2.Hash,
    from: exports.Address,
}, ['clusterId', 'from']);
/**
 * Spore ScriptInfo Actions
 */
exports.SporeAction = codec_1.molecule.union({
    // Spore
    CreateSpore: exports.CreateSpore,
    TransferSpore: exports.TransferSpore,
    MeltSpore: exports.MeltSpore,
    // Cluster
    CreateCluster: exports.CreateCluster,
    TransferCluster: exports.TransferCluster,
    // ClusterProxy
    CreateClusterProxy: exports.CreateClusterProxy,
    TransferClusterProxy: exports.TransferClusterProxy,
    MeltClusterProxy: exports.MeltClusterProxy,
    // ClusterAgent
    CreateClusterAgent: exports.CreateClusterAgent,
    TransferClusterAgent: exports.TransferClusterAgent,
    MeltClusterAgent: exports.MeltClusterAgent,
}, [
    'CreateSpore',
    'TransferSpore',
    'MeltSpore',
    'CreateCluster',
    'TransferCluster',
    'CreateClusterProxy',
    'TransferClusterProxy',
    'MeltClusterProxy',
    'CreateClusterAgent',
    'TransferClusterAgent',
    'MeltClusterAgent',
]);
//# sourceMappingURL=sporeAction.js.map