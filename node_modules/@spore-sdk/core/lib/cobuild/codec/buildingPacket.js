"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildingPacket = exports.BuildingPacketV1 = exports.ScriptInfoVec = exports.ScriptInfo = exports.ResolvedInputs = exports.Message = exports.ActionVec = exports.Action = void 0;
const codec_1 = require("@ckb-lumos/codec");
const base_1 = require("@ckb-lumos/base");
const codec_2 = require("../../codec");
exports.Action = codec_1.molecule.table({
    scriptInfoHash: codec_2.Hash,
    scriptHash: codec_2.Hash,
    data: base_1.blockchain.Bytes,
}, ['scriptInfoHash', 'scriptHash', 'data']);
exports.ActionVec = codec_1.molecule.vector(exports.Action);
exports.Message = codec_1.molecule.table({
    actions: exports.ActionVec,
}, ['actions']);
exports.ResolvedInputs = codec_1.molecule.table({
    outputs: base_1.blockchain.CellOutputVec,
    outputsData: base_1.blockchain.BytesVec,
}, ['outputs', 'outputsData']);
exports.ScriptInfo = codec_1.molecule.table({
    name: codec_2.RawString,
    url: codec_2.RawString,
    scriptHash: codec_2.Hash,
    schema: codec_2.RawString,
    messageType: codec_2.RawString,
}, ['name', 'url', 'scriptHash', 'schema', 'messageType']);
exports.ScriptInfoVec = codec_1.molecule.vector(exports.ScriptInfo);
exports.BuildingPacketV1 = codec_1.molecule.table({
    message: exports.Message,
    payload: base_1.blockchain.Transaction,
    resolvedInputs: exports.ResolvedInputs,
    changeOutput: codec_2.Uint32Opt,
    scriptInfos: exports.ScriptInfoVec,
    lockActions: exports.ActionVec,
}, ['message', 'payload', 'resolvedInputs', 'changeOutput', 'scriptInfos', 'lockActions']);
exports.BuildingPacket = codec_1.molecule.union({
    BuildingPacketV1: exports.BuildingPacketV1,
}, ['BuildingPacketV1']);
//# sourceMappingURL=buildingPacket.js.map