import { BIish } from '@ckb-lumos/bi';
import { Address, Script } from '@ckb-lumos/base';
import { FromInfo } from '@ckb-lumos/lumos/common-scripts';
import { BI, helpers, Cell, HexString, OutPoint } from '@ckb-lumos/lumos';
import { SporeConfig } from '../../../config';
import { injectNewSporeOutput, SporeDataProps } from '../..';
export declare function createSpore(props: {
    data: SporeDataProps;
    toLock: Script;
    fromInfos: FromInfo[];
    prefixInputs?: Cell[];
    prefixOutputs?: Cell[];
    updateWitness?: HexString | ((witness: HexString) => HexString);
    defaultWitness?: HexString;
    changeAddress?: Address;
    updateOutput?: (cell: Cell) => Cell;
    capacityMargin?: BIish | ((cell: Cell, margin: BI) => BIish);
    cluster?: {
        updateOutput?: (cell: Cell) => Cell;
        capacityMargin?: BIish | ((cell: Cell, margin: BI) => BIish);
        updateWitness?: HexString | ((witness: HexString) => HexString);
    };
    clusterAgentOutPoint?: OutPoint;
    clusterAgent?: {
        updateOutput?: (cell: Cell) => Cell;
        capacityMargin?: BIish | ((cell: Cell, margin: BI) => BIish);
        updateWitness?: HexString | ((witness: HexString) => HexString);
    };
    mutant?: {
        paymentAmount?: (minPayment: BI, lock: Script, cell: Cell) => BIish;
    };
    skipCheckContentType?: boolean;
    maxTransactionSize?: number | false;
    feeRate?: BIish | undefined;
    config?: SporeConfig;
}): Promise<{
    txSkeleton: helpers.TransactionSkeletonType;
    outputIndex: number;
    reference: Awaited<ReturnType<typeof injectNewSporeOutput>>['reference'];
    mutantReference: Awaited<ReturnType<typeof injectNewSporeOutput>>['mutantReference'];
}>;
export declare function createMultipleSpores(props: {
    sporeInfos: {
        data: SporeDataProps;
        toLock: Script;
    }[];
    fromInfos: FromInfo[];
    fromCells?: Cell[];
    changeAddress?: Address;
    updateOutput?: (cell: Cell) => Cell;
    capacityMargin?: BIish | ((cell: Cell, margin: BI) => BIish);
    cluster?: {
        updateOutput?: (cell: Cell) => Cell;
        capacityMargin?: BIish | ((cell: Cell, margin: BI) => BIish);
        updateWitness?: HexString | ((witness: HexString) => HexString);
    };
    clusterAgentOutPoint?: OutPoint;
    clusterAgent?: {
        updateOutput?: (cell: Cell) => Cell;
        capacityMargin?: BIish | ((cell: Cell, margin: BI) => BIish);
        updateWitness?: HexString | ((witness: HexString) => HexString);
    };
    mutant?: {
        paymentAmount?: (minPayment: BI, lock: Script, cell: Cell) => BIish;
    };
    maxTransactionSize?: number | false;
    config?: SporeConfig;
}): Promise<{
    txSkeleton: helpers.TransactionSkeletonType;
    outputIndices: number[];
}>;
