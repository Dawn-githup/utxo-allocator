"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSporeById = exports.getSporeByOutPoint = exports.getSporeByType = void 0;
const lumos_1 = require("@ckb-lumos/lumos");
const helpers_1 = require("../../../helpers");
const config_1 = require("../../../config");
async function getSporeByType(type, config) {
    // Env
    config = config ?? (0, config_1.getSporeConfig)();
    const indexer = new lumos_1.Indexer(config.ckbIndexerUrl, config.ckbNodeUrl);
    // Check if the spore's id is TypeID
    if (!(0, helpers_1.isTypeId)(type.args)) {
        throw new Error(`Target Spore ID is invalid: ${type.args}`);
    }
    // Get cell by type
    const cell = await (0, helpers_1.getCellByType)({ type, indexer });
    if (cell === void 0) {
        throw new Error('Cannot find Spore by Type because target cell does not exist');
    }
    // Check target cell's type script
    const cellType = cell.cellOutput.type;
    if (!cellType || !(0, config_1.isSporeScriptSupported)(config, cellType, 'Spore')) {
        throw new Error('Cannot find spore by Type because target cell type is not a supported version of Spore');
    }
    return cell;
}
exports.getSporeByType = getSporeByType;
async function getSporeByOutPoint(outPoint, config) {
    // Env
    config = config ?? (0, config_1.getSporeConfig)();
    const rpc = new lumos_1.RPC(config.ckbNodeUrl);
    // Get cell from rpc
    const cellWithStatus = await (0, helpers_1.getCellWithStatusByOutPoint)({ outPoint, rpc });
    if (!cellWithStatus.cell) {
        throw new Error('Cannot find spore by OutPoint because target cell was not found');
    }
    if (cellWithStatus.status !== 'live') {
        throw new Error('Cannot find spore by OutPoint because target cell is not lived');
    }
    // Check target cell's type script
    const cellType = cellWithStatus.cell.cellOutput.type;
    if (!cellType || !(0, config_1.isSporeScriptSupported)(config, cellType, 'Spore')) {
        throw new Error('Cannot find spore by OutPoint because target cell type is not a supported version of Spore');
    }
    return cellWithStatus.cell;
}
exports.getSporeByOutPoint = getSporeByOutPoint;
async function getSporeById(id, config) {
    // Env
    config = config ?? (0, config_1.getSporeConfig)();
    // Check if the spore's id is TypeID
    if (!(0, helpers_1.isTypeId)(id)) {
        throw new Error('Cannot find spore because target SporeId is not valid');
    }
    // Get SporeType script
    const sporeScript = (0, config_1.getSporeScriptCategory)(config, 'Spore');
    const scripts = (sporeScript.versions ?? []).map((r) => r.script);
    // Search target spore from the latest version to the oldest
    for (const script of scripts) {
        try {
            return await getSporeByType({
                ...script,
                args: id,
            }, config);
        }
        catch {
            // Not found in the script, don't have to do anything
        }
    }
    throw new Error(`Cannot find spore by SporeId because target cell does not exist or it's not a supported version of Spore`);
}
exports.getSporeById = getSporeById;
//# sourceMappingURL=getSpore.js.map