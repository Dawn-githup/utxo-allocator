export interface RetryWorkResult<T, E = any> {
    result: T | undefined;
    success: boolean;
    errors: E[];
    retries: number;
    duration: number;
}
export interface RetryWorkIntervalContext {
    retries: number;
}
/**
 * A util function to run a getter code and retry if it fails.
 * This is useful when you're fetching changes from the internet.
 */
export declare function retryWork<T, E = any>(props: {
    getter: () => T | Promise<T>;
    retry?: number;
    delay?: number;
    interval?: number | ((context: RetryWorkIntervalContext) => number);
    onError?: (e: E) => boolean | Promise<boolean>;
    onComplete?: (value: T) => boolean | Promise<boolean>;
}): Promise<RetryWorkResult<T, E>>;
export declare function waitForMilliseconds(ms: number): Promise<void>;
