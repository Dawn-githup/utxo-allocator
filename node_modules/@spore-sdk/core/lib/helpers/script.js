"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.composeOutputLocks = exports.composeInputLocks = exports.getChangeLock = exports.isScriptIdEquals = exports.isScriptValueEquals = void 0;
const cloneDeep_1 = __importDefault(require("lodash/cloneDeep"));
const lumos_1 = require("@ckb-lumos/lumos");
const common_scripts_1 = require("@ckb-lumos/common-scripts");
/**
 * Compare two scripts to see if they are identical.
 */
function isScriptValueEquals(a, b) {
    return a.codeHash === b.codeHash && a.hashType === b.hashType && a.args === b.args;
}
exports.isScriptValueEquals = isScriptValueEquals;
/**
 * Compare two scripts to see if their 'codeHash' and 'hashType' are the same.
 */
function isScriptIdEquals(a, b) {
    return a.codeHash === b.codeHash && a.hashType === b.hashType;
}
exports.isScriptIdEquals = isScriptIdEquals;
/**
 * Get change lock of a transaction.
 */
function getChangeLock(fromInfos, changeAddress, config) {
    const firstFromInfo = (0, common_scripts_1.parseFromInfo)(fromInfos[0], { config });
    const changeAddressLock = changeAddress ? lumos_1.helpers.parseAddress(changeAddress, { config }) : void 0;
    return changeAddressLock ?? firstFromInfo.fromScript;
}
exports.getChangeLock = getChangeLock;
/**
 * Assemble locks of Transaction.inputs.
 */
function composeInputLocks(props) {
    const config = props.config;
    const inputLocks = Array.isArray(props.inputLocks) ? (0, cloneDeep_1.default)(props.inputLocks) : [];
    const fromInfoLocks = props.fromInfos.map((fromInfo) => {
        return (0, common_scripts_1.parseFromInfo)(fromInfo, { config }).fromScript;
    });
    return [...inputLocks, ...fromInfoLocks];
}
exports.composeInputLocks = composeInputLocks;
/**
 * Assemble possible locks of Transaction.outputs.
 */
function composeOutputLocks(props) {
    const config = props.config;
    const outputLocks = Array.isArray(props.outputLocks) ? (0, cloneDeep_1.default)(props.outputLocks) : [];
    let changeLock;
    if (props.changeAddress) {
        changeLock = lumos_1.helpers.parseAddress(props.changeAddress, { config });
    }
    else {
        changeLock = (0, common_scripts_1.parseFromInfo)(props.fromInfos[0], { config }).fromScript;
    }
    const foundIndex = outputLocks.findIndex((script) => isScriptValueEquals(script, changeLock));
    if (foundIndex < 0) {
        outputLocks.push(changeLock);
    }
    return outputLocks;
}
exports.composeOutputLocks = composeOutputLocks;
//# sourceMappingURL=script.js.map