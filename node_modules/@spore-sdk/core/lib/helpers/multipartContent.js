"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isMultipartContentAsBytesValid = exports.isMultipartContentValid = exports.readArrayBufferStream = exports.encodeMultipartContent = exports.decodeMultipartContentFromStream = exports.decodeMultipartContentFromBytes = exports.decodeMultipartContent = void 0;
const codec_1 = require("@ckb-lumos/codec");
const multipart_parser_1 = __importStar(require("@exact-realty/multipart-parser"));
const buffer_1 = require("./buffer");
async function decodeMultipartContent(message, boundary) {
    const buf = (0, buffer_1.bytifyRawString)(replaceNewLineToCRLF(message));
    return decodeMultipartContentFromBytes(buf, boundary);
}
exports.decodeMultipartContent = decodeMultipartContent;
async function decodeMultipartContentFromBytes(buf, boundary) {
    const stream = new Blob([codec_1.bytes.bytify(buf)]).stream();
    return decodeMultipartContentFromStream(stream, boundary);
}
exports.decodeMultipartContentFromBytes = decodeMultipartContentFromBytes;
async function decodeMultipartContentFromStream(stream, boundary) {
    async function parseMimeRecursively(messages) {
        const chunks = [];
        for await (const chunk of messages) {
            if (chunk.parts) {
                const parts = await parseMimeRecursively(chunk.parts);
                chunks.push({
                    ...chunk,
                    parts,
                });
            }
            else {
                chunks.push({
                    headers: chunk.headers,
                    body: chunk.body,
                });
            }
        }
        return chunks;
    }
    const firstLayer = (0, multipart_parser_1.default)(stream, boundary);
    return parseMimeRecursively(firstLayer);
}
exports.decodeMultipartContentFromStream = decodeMultipartContentFromStream;
async function encodeMultipartContent(boundary, message) {
    const stream = (0, multipart_parser_1.encodeMultipartMessage)(boundary, message);
    const result = await readArrayBufferStream(stream);
    return {
        stream,
        ...result,
    };
}
exports.encodeMultipartContent = encodeMultipartContent;
async function readArrayBufferStream(stream) {
    const reader = stream.getReader();
    const bufferChunks = [];
    const rawStringChunks = [];
    let codeUnitLength = 0;
    while (true) {
        const chunk = await reader.read();
        if (chunk.done) {
            break;
        }
        bufferChunks.push(chunk.value);
        const rawString = (0, buffer_1.bufferToRawString)(chunk.value);
        codeUnitLength += rawString.length;
        rawStringChunks.push(rawString);
    }
    const buffer = await new Blob(bufferChunks).arrayBuffer();
    const byteLength = buffer.byteLength;
    return {
        buffer,
        bufferChunks,
        rawStringChunks,
        byteLength,
        codeUnitLength,
    };
}
exports.readArrayBufferStream = readArrayBufferStream;
async function isMultipartContentValid(message, boundary) {
    try {
        await decodeMultipartContent(message, boundary);
        return true;
    }
    catch {
        return false;
    }
}
exports.isMultipartContentValid = isMultipartContentValid;
async function isMultipartContentAsBytesValid(buf, boundary) {
    try {
        await decodeMultipartContentFromBytes(buf, boundary);
        return true;
    }
    catch {
        return false;
    }
}
exports.isMultipartContentAsBytesValid = isMultipartContentAsBytesValid;
function replaceNewLineToCRLF(str) {
    return str.replace(/\r\n/g, '\n').replace(/\n/g, '\r\n');
}
//# sourceMappingURL=multipartContent.js.map