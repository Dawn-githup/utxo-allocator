/// <reference types="@nervosnetwork/ckb-types" />
import JSBI from 'jsbi';
import ECPair from './ecpair.js';
import { AddressOptions } from './address/index.js';
import { serializeScript } from './serialization/index.js';
import { serializeRawTransaction, serializeTransaction, serializeWitnessArgs } from './serialization/transaction.js';
import { PERSONAL } from './const.js';
export * from './address/index.js';
export * from './serialization/index.js';
export * from './convertors/index.js';
export * from './exceptions/index.js';
export * from './const.js';
export * from './validators.js';
export * from './epochs.js';
export * from './sizes.js';
export * from './occupiedCapacity.js';
export * from './calculateTransactionFee.js';
export { ECPair };
export * as systemScripts from './systemScripts.js';
export * as reconcilers from './reconcilers/index.js';
export { serializeScript, serializeRawTransaction, serializeTransaction, serializeWitnessArgs, JSBI, PERSONAL };
export declare const blake2b: (outlen: number, key: Uint8Array | null, salt: Uint8Array | null, personal: Uint8Array | null, noAssert?: boolean | undefined) => import("./crypto/blake2b.js").Blake2b, bech32: import("bech32").BechLib, bech32m: import("bech32").BechLib, blake160: import("./crypto/blake160.js").Blake160;
export declare const scriptToHash: (script: CKBComponents.Script) => string;
export declare const rawTransactionToHash: (rawTransaction: Omit<CKBComponents.RawTransaction, 'witnesses'>) => string;
export declare const privateKeyToPublicKey: (privateKey: string) => string;
export declare const privateKeyToAddress: (privateKey: string, options: AddressOptions) => string;
export declare const extractDAOData: (dao: CKBComponents.DAO) => {
    c: string;
    ar: string;
    s: string;
    u: string;
};
export declare const calculateMaximumWithdraw: (outputCell: CKBComponents.CellOutput, outputDataCapacity: CKBComponents.Bytes, depositDAO: CKBComponents.DAO, withdrawDAO: CKBComponents.DAO) => string;
