{"version":3,"file":"TransactionStorage.js","names":["_store","require","TransactionStorage","constructor","storage","getTransactions","getItem","setTransactions","transactions","setItem","updatePendingCells","addTransaction","tx","concat","deleteTransactionByHash","txHash","exists","some","hash","filter","deleteTransactionByCell","cell","outPoint","getPendingCells","getSpentCellOutpoints","spentCellOutpoints","map","inputs","input","previousOutput","flat","pendingCells","outputs","output","index","toString","cellOutput","data","outputsData","exports","createInMemoryPendingTransactionStorage","createInMemoryStorage"],"sources":["../src/TransactionStorage.ts"],"sourcesContent":["import { Transaction, OutPoint, Cell, Hash } from \"@ckb-lumos/base\";\nimport { Promisable, Store, createInMemoryStorage } from \"./store\";\n\nexport type PendingCell = Pick<\n  Required<Cell>,\n  \"outPoint\" | \"data\" | \"cellOutput\"\n>;\n\ntype TransactionWithHash = Required<Transaction>;\n\ninterface ManagerStorageScheme {\n  transactions: TransactionWithHash[];\n  spentCellOutpoints: OutPoint[];\n  pendingCells: PendingCell[];\n}\n\nexport interface TransactionStorageType {\n  getTransactions(): Promisable<TransactionWithHash[]>;\n  setTransactions(transactions: TransactionWithHash[]): Promisable<void>;\n  addTransaction(tx: TransactionWithHash): Promisable<void>;\n  deleteTransactionByHash(txHash: Hash): Promisable<boolean>;\n\n  // generated from pending transactions\n  getPendingCells(): Promisable<PendingCell[]>;\n  getSpentCellOutpoints(): Promisable<OutPoint[]>;\n\n  // remove transaction if pending cell is on chain\n  deleteTransactionByCell(cell: Cell): Promisable<boolean>;\n}\n\n/**\n * @internal\n */\nexport class TransactionStorage implements TransactionStorageType {\n  private storage: Store<ManagerStorageScheme>;\n\n  constructor(storage: Store<ManagerStorageScheme>) {\n    this.storage = storage;\n  }\n\n  async getTransactions(): Promise<TransactionWithHash[]> {\n    return (await this.storage.getItem(\"transactions\")) || [];\n  }\n\n  async setTransactions(transactions: TransactionWithHash[]): Promise<void> {\n    await this.storage.setItem(\"transactions\", transactions);\n    await this.updatePendingCells();\n  }\n\n  async addTransaction(tx: TransactionWithHash): Promise<void> {\n    const transactions = await this.getTransactions();\n    await this.storage.setItem(\"transactions\", transactions.concat(tx));\n    await this.updatePendingCells();\n  }\n\n  async deleteTransactionByHash(txHash: Hash): Promise<boolean> {\n    const transactions = await this.getTransactions();\n    const exists = transactions.some((tx) => tx.hash === txHash);\n    if (!exists) return false;\n    await this.storage.setItem(\n      \"transactions\",\n      transactions.filter((tx) => tx.hash !== txHash)\n    );\n    await this.updatePendingCells();\n    return true;\n  }\n\n  async deleteTransactionByCell(cell: Cell): Promise<boolean> {\n    if (!cell.outPoint) return false;\n    const txHash = cell.outPoint.txHash;\n    return await this.deleteTransactionByHash(txHash);\n  }\n\n  async getPendingCells(): Promise<PendingCell[]> {\n    return (await this.storage.getItem(\"pendingCells\")) || [];\n  }\n\n  async getSpentCellOutpoints(): Promise<OutPoint[]> {\n    return (await this.storage.getItem(\"spentCellOutpoints\")) || [];\n  }\n\n  private async updatePendingCells(): Promise<void> {\n    const transactions = await this.getTransactions();\n\n    const spentCellOutpoints = transactions\n      .map((tx) => tx.inputs.map((input) => input.previousOutput))\n      .flat();\n    const pendingCells: PendingCell[] = transactions\n      .map((tx) =>\n        tx.outputs.map((output, index) => ({\n          outPoint: {\n            txHash: tx.hash,\n            index: \"0x\" + index.toString(16),\n          },\n          cellOutput: output,\n          data: tx.outputsData[index],\n        }))\n      )\n      .flat();\n\n    await this.storage.setItem(\"spentCellOutpoints\", spentCellOutpoints);\n    await this.storage.setItem(\"pendingCells\", pendingCells);\n  }\n}\n\nexport function createInMemoryPendingTransactionStorage(): TransactionStorageType {\n  return new TransactionStorage(createInMemoryStorage<ManagerStorageScheme>());\n}\n"],"mappings":"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"}