import { Transaction, OutPoint, Cell, Hash } from "@ckb-lumos/base";
import { Promisable } from "./store";
export type PendingCell = Pick<Required<Cell>, "outPoint" | "data" | "cellOutput">;
type TransactionWithHash = Required<Transaction>;
export interface TransactionStorageType {
    getTransactions(): Promisable<TransactionWithHash[]>;
    setTransactions(transactions: TransactionWithHash[]): Promisable<void>;
    addTransaction(tx: TransactionWithHash): Promisable<void>;
    deleteTransactionByHash(txHash: Hash): Promisable<boolean>;
    getPendingCells(): Promisable<PendingCell[]>;
    getSpentCellOutpoints(): Promisable<OutPoint[]>;
    deleteTransactionByCell(cell: Cell): Promisable<boolean>;
}
export declare function createInMemoryPendingTransactionStorage(): TransactionStorageType;
export {};
//# sourceMappingURL=TransactionStorage.d.ts.map