var _Method_name, _Method_options, _Method_node;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import axios from 'axios';
import { IdNotMatchException, ResponseException } from './exceptions/index.js';
class Method {
    constructor(node, options) {
        _Method_name.set(this, void 0);
        _Method_options.set(this, {
            name: '',
            method: '',
            paramsFormatters: [],
            resultFormatters: undefined,
        });
        _Method_node.set(this, void 0);
        this.call = (...params) => {
            const payload = this.getPayload(...params);
            return axios({
                method: 'POST',
                headers: {
                    'content-type': 'application/json',
                },
                data: payload,
                url: __classPrivateFieldGet(this, _Method_node, "f").url,
                httpAgent: __classPrivateFieldGet(this, _Method_node, "f").httpAgent,
                httpsAgent: __classPrivateFieldGet(this, _Method_node, "f").httpsAgent,
            }).then(res => {
                var _a, _b, _c;
                if (res.data.id !== payload.id) {
                    throw new IdNotMatchException(payload.id, res.data.id);
                }
                if (res.data.error) {
                    throw new ResponseException(JSON.stringify(res.data.error));
                }
                return (_c = (_b = (_a = __classPrivateFieldGet(this, _Method_options, "f")).resultFormatters) === null || _b === void 0 ? void 0 : _b.call(_a, res.data.result)) !== null && _c !== void 0 ? _c : res.data.result;
            });
        };
        this.getPayload = (...params) => {
            const data = params.map((p, i) => (__classPrivateFieldGet(this, _Method_options, "f").paramsFormatters[i] && __classPrivateFieldGet(this, _Method_options, "f").paramsFormatters[i](p)) || p);
            const id = Math.round(Math.random() * 10000);
            const payload = {
                id,
                method: __classPrivateFieldGet(this, _Method_options, "f").method,
                params: data,
                jsonrpc: '2.0',
            };
            return payload;
        };
        __classPrivateFieldSet(this, _Method_node, node, "f");
        __classPrivateFieldSet(this, _Method_options, options, "f");
        __classPrivateFieldSet(this, _Method_name, options.name, "f");
        Object.defineProperty(this.call, 'name', { value: options.name, configurable: false, writable: false });
    }
    get name() {
        return __classPrivateFieldGet(this, _Method_name, "f");
    }
}
_Method_name = new WeakMap(), _Method_options = new WeakMap(), _Method_node = new WeakMap();
export default Method;
//# sourceMappingURL=method.js.map