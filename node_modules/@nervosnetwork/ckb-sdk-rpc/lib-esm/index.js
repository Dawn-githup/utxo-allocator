var _CKBRPC_node, _CKBRPC_paramsFormatter, _CKBRPC_resultFormatter;
import { __awaiter, __classPrivateFieldGet } from "tslib";
import axios from 'axios';
import Base from './Base/index.js';
import Method from './method.js';
import paramsFormatter from './paramsFormatter.js';
import resultFormatter from './resultFormatter.js';
import { MethodInBatchNotFoundException, PayloadInBatchException, IdNotMatchedInBatchException, } from './exceptions/index.js';
class CKBRPC extends Base {
    constructor(url) {
        super();
        _CKBRPC_node.set(this, {
            url: '',
        });
        _CKBRPC_paramsFormatter.set(this, paramsFormatter);
        _CKBRPC_resultFormatter.set(this, resultFormatter);
        this.addMethod = (options) => {
            const method = new Method(this.node, options);
            Object.defineProperty(this, options.name, {
                value: method.call,
                enumerable: true,
            });
        };
        this.createBatchRequest = (params = []) => {
            const ctx = this;
            const proxied = new Proxy([], {
                set(...p) {
                    var _a;
                    const methods = Object.keys(ctx);
                    if (p[1] !== 'length') {
                        const name = (_a = p === null || p === void 0 ? void 0 : p[2]) === null || _a === void 0 ? void 0 : _a[0];
                        if (methods.indexOf(name) === -1) {
                            throw new MethodInBatchNotFoundException(name);
                        }
                    }
                    return Reflect.set(...p);
                },
            });
            Object.defineProperties(proxied, {
                add: {
                    value(...args) {
                        this.push(args);
                        return this;
                    },
                },
                remove: {
                    value(i) {
                        this.splice(i, 1);
                        return this;
                    },
                },
                exec: {
                    value() {
                        return __awaiter(this, void 0, void 0, function* () {
                            const payload = proxied.map(([f, ...p], i) => {
                                try {
                                    const method = new Method(ctx.node, Object.assign(Object.assign({}, ctx.rpcProperties[f]), { name: f }));
                                    return method.getPayload(...p);
                                }
                                catch (err) {
                                    throw new PayloadInBatchException(i, err.message);
                                }
                            });
                            if (!payload.length) {
                                return [];
                            }
                            const batchRes = yield axios({
                                method: 'POST',
                                headers: { 'content-type': 'application/json' },
                                data: payload,
                                url: __classPrivateFieldGet(ctx, _CKBRPC_node, "f").url,
                                httpAgent: __classPrivateFieldGet(ctx, _CKBRPC_node, "f").httpAgent,
                                httpsAgent: __classPrivateFieldGet(ctx, _CKBRPC_node, "f").httpsAgent,
                            });
                            return batchRes.data.map((res, i) => {
                                var _a, _b, _c;
                                if (res.id !== payload[i].id) {
                                    return new IdNotMatchedInBatchException(i, payload[i].id, res.id);
                                }
                                return (_c = (_b = (_a = ctx.rpcProperties[proxied[i][0]]).resultFormatters) === null || _b === void 0 ? void 0 : _b.call(_a, res.result)) !== null && _c !== void 0 ? _c : res.result;
                            });
                        });
                    },
                },
            });
            params.forEach(p => proxied.push(p));
            return proxied;
        };
        this.setNode({ url });
        Object.defineProperties(this, {
            addMethod: { value: this.addMethod, enumerable: false, writable: false, configurable: false },
            setNode: { value: this.setNode, enumerable: false, writable: false, configurable: false },
            createBatchRequest: { value: this.createBatchRequest, enumerable: false, writable: false, configurable: false },
        });
        Object.keys(this.rpcProperties).forEach(name => {
            this.addMethod(Object.assign({ name }, this.rpcProperties[name]));
        });
    }
    get node() {
        return __classPrivateFieldGet(this, _CKBRPC_node, "f");
    }
    get paramsFormatter() {
        return __classPrivateFieldGet(this, _CKBRPC_paramsFormatter, "f");
    }
    get resultFormatter() {
        return __classPrivateFieldGet(this, _CKBRPC_resultFormatter, "f");
    }
    setNode(node) {
        Object.assign(this.node, node);
        return this.node;
    }
}
_CKBRPC_node = new WeakMap(), _CKBRPC_paramsFormatter = new WeakMap(), _CKBRPC_resultFormatter = new WeakMap();
export default CKBRPC;
//# sourceMappingURL=index.js.map