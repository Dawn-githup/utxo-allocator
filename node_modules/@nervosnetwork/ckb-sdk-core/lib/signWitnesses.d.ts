/// <reference types="../types/global" />
/// <reference types="@nervosnetwork/ckb-types" />
import { SignatureProvider } from './signWitnessGroup.js';
import { MultisigConfig } from './multisig.js';
declare type LockHash = string;
declare type TransactionHash = string;
declare type CachedLock = {
    lock: CKBComponents.Script;
};
export declare type MultisigOption = {
    sk: SignatureProvider;
    blake160: string;
    config: MultisigConfig;
    signatures: string[];
};
export interface SignWitnesses {
    (key: SignatureProvider): (params: {
        transactionHash: TransactionHash;
        witnesses: StructuredWitness[];
    }) => StructuredWitness[];
    (key: Map<LockHash, SignatureProvider | MultisigOption>): (params: {
        transactionHash: TransactionHash;
        witnesses: StructuredWitness[];
        inputCells: CachedLock[];
        skipMissingKeys: boolean;
    }) => StructuredWitness[];
    (key: SignatureProvider | Map<LockHash, SignatureProvider | MultisigOption>): (params: {
        transactionHash: TransactionHash;
        witnesses: StructuredWitness[];
        inputCells?: CachedLock[];
        skipMissingKeys?: boolean;
    }) => StructuredWitness[];
}
export declare const isMap: <K = any, V = any>(val: any) => val is Map<K, V>;
declare const signWitnesses: SignWitnesses;
export default signWitnesses;
