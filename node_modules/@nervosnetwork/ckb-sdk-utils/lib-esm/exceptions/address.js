import ErrorCode from './ErrorCode.js';
export class AddressPayloadException extends Error {
    constructor(payload, type) {
        super(`'${payload}' is not a valid ${type ? `${type} version ` : ''}address payload`);
        this.code = ErrorCode.AddressInvalid;
        this.type = type;
    }
}
export class AddressException extends Error {
    constructor(addr, stack, type) {
        super(`'${addr}' is not a valid ${type ? `${type} version ` : ''}address`);
        this.code = ErrorCode.AddressInvalid;
        this.type = type;
        this.stack = stack;
    }
}
export class CodeHashException extends Error {
    constructor(codeHash) {
        super(`'${codeHash}' is not a valid code hash`);
        this.code = ErrorCode.AddressInvalid;
    }
}
export class HashTypeException extends Error {
    constructor(hashType) {
        super(`'${hashType}' is not a valid hash type`);
        this.code = ErrorCode.AddressInvalid;
    }
}
export class AddressFormatTypeException extends Error {
    constructor(type) {
        super(`0x${type.toString(16).padStart(2, '0')} is not a valid address format type`);
        this.code = ErrorCode.AddressInvalid;
    }
}
export class AddressFormatTypeAndEncodeMethodNotMatchException extends Error {
    constructor(type, bech32Type = 'unknown') {
        super(`Address format type 0x${type.toString(16).padStart(2, '0')} doesn't match encode method ${bech32Type}`);
        this.code = ErrorCode.AddressInvalid;
    }
}
export default {
    AddressPayloadException,
    AddressException,
    CodeHashException,
    HashTypeException,
    AddressFormatTypeException,
    AddressFormatTypeAndEncodeMethodNotMatchException,
};
//# sourceMappingURL=address.js.map