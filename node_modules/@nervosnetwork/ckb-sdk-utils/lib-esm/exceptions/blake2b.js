import ErrorCode from './ErrorCode.js';
export class OutLenTooSmallException extends Error {
    constructor(outlen, minLen) {
        super(`Expect outlen to be at least ${minLen}, but ${outlen} received`);
        this.code = ErrorCode.ParameterInvalid;
    }
}
export class OutLenTooLargeException extends Error {
    constructor(outlen, maxLen) {
        super(`Expect outlen to be at most ${maxLen}, but ${outlen} received`);
        this.code = ErrorCode.ParameterInvalid;
    }
}
export class KeyLenTooSmallException extends Error {
    constructor(keyLen, minLen) {
        super(`Expect key length to be at least ${minLen}, but ${keyLen} received`);
        this.code = ErrorCode.ParameterInvalid;
    }
}
export class KeyLenTooLargeException extends Error {
    constructor(keyLen, maxLen) {
        super(`Expect key length to be at most ${maxLen}, but ${keyLen} received`);
        this.code = ErrorCode.ParameterInvalid;
    }
}
export class OutTypeException extends TypeError {
    constructor() {
        super(`Expect out to be "binary", "hex", Uint8Array, or Buffer`);
        this.code = ErrorCode.ParameterInvalid;
    }
}
export class SaltTypeException extends TypeError {
    constructor() {
        super(`Expect salt to be Uint8Array or Buffer`);
        this.code = ErrorCode.ParameterInvalid;
    }
}
export class SaltLenException extends Error {
    constructor(saltLen, requiredLen) {
        super(`Expect salt length to be ${requiredLen}, but ${saltLen} received`);
        this.code = ErrorCode.ParameterInvalid;
    }
}
export class InputTypeException extends TypeError {
    constructor() {
        super(`Expect input to be Uint8Array or Buffer`);
        this.code = ErrorCode.ParameterInvalid;
    }
}
export class KeyTypeException extends TypeError {
    constructor() {
        super(`Expect key to be Uint8Array or Buffer`);
        this.code = ErrorCode.ParameterInvalid;
    }
}
export class PersonalTypeException extends TypeError {
    constructor() {
        super(`Expect PERSONAL to be Uint8Array or Buffer`);
        this.code = ErrorCode.ParameterInvalid;
    }
}
export class PersonalLenException extends Error {
    constructor(personalLen, requiredLen) {
        super(`Expect PERSONAL length to be ${requiredLen}, but ${personalLen} received`);
        this.code = ErrorCode.ParameterInvalid;
    }
}
export default {
    OutLenTooSmallException,
    OutLenTooLargeException,
    KeyLenTooSmallException,
    KeyLenTooLargeException,
    OutTypeException,
    SaltTypeException,
    SaltLenException,
    InputTypeException,
    KeyTypeException,
    PersonalTypeException,
    PersonalLenException,
};
//# sourceMappingURL=blake2b.js.map